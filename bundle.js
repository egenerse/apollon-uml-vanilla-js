var ApollonTest = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all2) => {
    for (var name in all2)
      __defProp(target, name, { get: all2[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/pepjs/dist/pep.js
  var require_pep = __commonJS({
    "node_modules/pepjs/dist/pep.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.PointerEventsPolyfill = factory();
      })(exports, function() {
        "use strict";
        var MOUSE_PROPS = [
          "bubbles",
          "cancelable",
          "view",
          "screenX",
          "screenY",
          "clientX",
          "clientY",
          "ctrlKey",
          "altKey",
          "shiftKey",
          "metaKey",
          "button",
          "relatedTarget",
          "pageX",
          "pageY"
        ];
        var MOUSE_DEFAULTS = [
          false,
          false,
          null,
          0,
          0,
          0,
          0,
          false,
          false,
          false,
          false,
          0,
          null,
          0,
          0
        ];
        function PointerEvent2(inType, inDict) {
          inDict = inDict || /* @__PURE__ */ Object.create(null);
          var e2 = document.createEvent("Event");
          e2.initEvent(inType, inDict.bubbles || false, inDict.cancelable || false);
          for (var i2 = 2, p; i2 < MOUSE_PROPS.length; i2++) {
            p = MOUSE_PROPS[i2];
            e2[p] = inDict[p] || MOUSE_DEFAULTS[i2];
          }
          e2.buttons = inDict.buttons || 0;
          var pressure = 0;
          if (inDict.pressure !== void 0 && e2.buttons) {
            pressure = inDict.pressure;
          } else {
            pressure = e2.buttons ? 0.5 : 0;
          }
          e2.x = e2.clientX;
          e2.y = e2.clientY;
          e2.pointerId = inDict.pointerId || 0;
          e2.width = inDict.width || 1;
          e2.height = inDict.height || 1;
          e2.pressure = pressure;
          e2.tiltX = inDict.tiltX || 0;
          e2.tiltY = inDict.tiltY || 0;
          e2.twist = inDict.twist || 0;
          e2.tangentialPressure = inDict.tangentialPressure || 0;
          e2.pointerType = inDict.pointerType || "";
          e2.hwTimestamp = inDict.hwTimestamp || 0;
          e2.isPrimary = inDict.isPrimary || false;
          e2.detail = 0;
          return e2;
        }
        var USE_MAP = window.Map && window.Map.prototype.forEach;
        var PointerMap = USE_MAP ? Map : SparseArrayMap;
        function SparseArrayMap() {
          this.array = [];
          this.size = 0;
        }
        SparseArrayMap.prototype = {
          set: function(k2, v2) {
            if (v2 === void 0) {
              return this.delete(k2);
            }
            if (!this.has(k2)) {
              this.size++;
            }
            this.array[k2] = v2;
          },
          has: function(k2) {
            return this.array[k2] !== void 0;
          },
          delete: function(k2) {
            if (this.has(k2)) {
              delete this.array[k2];
              this.size--;
            }
          },
          get: function(k2) {
            return this.array[k2];
          },
          clear: function() {
            this.array.length = 0;
            this.size = 0;
          },
          // return value, key, map
          forEach: function(callback, thisArg) {
            return this.array.forEach(function(v2, k2) {
              callback.call(thisArg, v2, k2, this);
            }, this);
          }
        };
        var CLONE_PROPS = [
          // MouseEvent
          "bubbles",
          "cancelable",
          "view",
          "detail",
          "screenX",
          "screenY",
          "clientX",
          "clientY",
          "ctrlKey",
          "altKey",
          "shiftKey",
          "metaKey",
          "button",
          "relatedTarget",
          // DOM Level 3
          "buttons",
          // PointerEvent
          "pointerId",
          "width",
          "height",
          "pressure",
          "tiltX",
          "tiltY",
          "pointerType",
          "hwTimestamp",
          "isPrimary",
          // event instance
          "type",
          "target",
          "currentTarget",
          "which",
          "pageX",
          "pageY",
          "timeStamp"
        ];
        var CLONE_DEFAULTS = [
          // MouseEvent
          false,
          false,
          null,
          null,
          0,
          0,
          0,
          0,
          false,
          false,
          false,
          false,
          0,
          null,
          // DOM Level 3
          0,
          // PointerEvent
          0,
          0,
          0,
          0,
          0,
          0,
          "",
          0,
          false,
          // event instance
          "",
          null,
          null,
          0,
          0,
          0,
          0
        ];
        var BOUNDARY_EVENTS = {
          "pointerover": 1,
          "pointerout": 1,
          "pointerenter": 1,
          "pointerleave": 1
        };
        var HAS_SVG_INSTANCE = typeof SVGElementInstance !== "undefined";
        var dispatcher = {
          pointermap: new PointerMap(),
          eventMap: /* @__PURE__ */ Object.create(null),
          captureInfo: /* @__PURE__ */ Object.create(null),
          // Scope objects for native events.
          // This exists for ease of testing.
          eventSources: /* @__PURE__ */ Object.create(null),
          eventSourceList: [],
          /**
           * Add a new event source that will generate pointer events.
           *
           * `inSource` must contain an array of event names named `events`, and
           * functions with the names specified in the `events` array.
           * @param {string} name A name for the event source
           * @param {Object} source A new source of platform events.
           */
          registerSource: function(name, source) {
            var s3 = source;
            var newEvents = s3.events;
            if (newEvents) {
              newEvents.forEach(function(e2) {
                if (s3[e2]) {
                  this.eventMap[e2] = s3[e2].bind(s3);
                }
              }, this);
              this.eventSources[name] = s3;
              this.eventSourceList.push(s3);
            }
          },
          register: function(element) {
            var l2 = this.eventSourceList.length;
            for (var i2 = 0, es; i2 < l2 && (es = this.eventSourceList[i2]); i2++) {
              es.register.call(es, element);
            }
          },
          unregister: function(element) {
            var l2 = this.eventSourceList.length;
            for (var i2 = 0, es; i2 < l2 && (es = this.eventSourceList[i2]); i2++) {
              es.unregister.call(es, element);
            }
          },
          contains: (
            /*scope.external.contains || */
            function(container, contained) {
              try {
                return container.contains(contained);
              } catch (ex) {
                return false;
              }
            }
          ),
          // EVENTS
          down: function(inEvent) {
            inEvent.bubbles = true;
            this.fireEvent("pointerdown", inEvent);
          },
          move: function(inEvent) {
            inEvent.bubbles = true;
            this.fireEvent("pointermove", inEvent);
          },
          up: function(inEvent) {
            inEvent.bubbles = true;
            this.fireEvent("pointerup", inEvent);
          },
          enter: function(inEvent) {
            inEvent.bubbles = false;
            this.fireEvent("pointerenter", inEvent);
          },
          leave: function(inEvent) {
            inEvent.bubbles = false;
            this.fireEvent("pointerleave", inEvent);
          },
          over: function(inEvent) {
            inEvent.bubbles = true;
            this.fireEvent("pointerover", inEvent);
          },
          out: function(inEvent) {
            inEvent.bubbles = true;
            this.fireEvent("pointerout", inEvent);
          },
          cancel: function(inEvent) {
            inEvent.bubbles = true;
            this.fireEvent("pointercancel", inEvent);
          },
          leaveOut: function(event) {
            this.out(event);
            this.propagate(event, this.leave, false);
          },
          enterOver: function(event) {
            this.over(event);
            this.propagate(event, this.enter, true);
          },
          // LISTENER LOGIC
          eventHandler: function(inEvent) {
            if (inEvent._handledByPE) {
              return;
            }
            var type = inEvent.type;
            var fn = this.eventMap && this.eventMap[type];
            if (fn) {
              fn(inEvent);
            }
            inEvent._handledByPE = true;
          },
          // set up event listeners
          listen: function(target, events) {
            events.forEach(function(e2) {
              this.addEvent(target, e2);
            }, this);
          },
          // remove event listeners
          unlisten: function(target, events) {
            events.forEach(function(e2) {
              this.removeEvent(target, e2);
            }, this);
          },
          addEvent: (
            /*scope.external.addEvent || */
            function(target, eventName) {
              target.addEventListener(eventName, this.boundHandler);
            }
          ),
          removeEvent: (
            /*scope.external.removeEvent || */
            function(target, eventName) {
              target.removeEventListener(eventName, this.boundHandler);
            }
          ),
          // EVENT CREATION AND TRACKING
          /**
           * Creates a new Event of type `inType`, based on the information in
           * `inEvent`.
           *
           * @param {string} inType A string representing the type of event to create
           * @param {Event} inEvent A platform event with a target
           * @return {Event} A PointerEvent of type `inType`
           */
          makeEvent: function(inType, inEvent) {
            if (this.captureInfo[inEvent.pointerId]) {
              inEvent.relatedTarget = null;
            }
            var e2 = new PointerEvent2(inType, inEvent);
            if (inEvent.preventDefault) {
              e2.preventDefault = inEvent.preventDefault;
            }
            e2._target = e2._target || inEvent.target;
            return e2;
          },
          // make and dispatch an event in one call
          fireEvent: function(inType, inEvent) {
            var e2 = this.makeEvent(inType, inEvent);
            return this.dispatchEvent(e2);
          },
          /**
           * Returns a snapshot of inEvent, with writable properties.
           *
           * @param {Event} inEvent An event that contains properties to copy.
           * @return {Object} An object containing shallow copies of `inEvent`'s
           *    properties.
           */
          cloneEvent: function(inEvent) {
            var eventCopy = /* @__PURE__ */ Object.create(null);
            var p;
            for (var i2 = 0; i2 < CLONE_PROPS.length; i2++) {
              p = CLONE_PROPS[i2];
              eventCopy[p] = inEvent[p] || CLONE_DEFAULTS[i2];
              if (HAS_SVG_INSTANCE && (p === "target" || p === "relatedTarget")) {
                if (eventCopy[p] instanceof SVGElementInstance) {
                  eventCopy[p] = eventCopy[p].correspondingUseElement;
                }
              }
            }
            if (inEvent.preventDefault) {
              eventCopy.preventDefault = function() {
                inEvent.preventDefault();
              };
            }
            return eventCopy;
          },
          getTarget: function(inEvent) {
            var capture = this.captureInfo[inEvent.pointerId];
            if (!capture) {
              return inEvent._target;
            }
            if (inEvent._target === capture || !(inEvent.type in BOUNDARY_EVENTS)) {
              return capture;
            }
          },
          propagate: function(event, fn, propagateDown) {
            var target = event.target;
            var targets = [];
            while (target != null && target !== document && !target.contains(event.relatedTarget)) {
              targets.push(target);
              target = target.parentNode;
              if (!target) {
                return;
              }
            }
            if (propagateDown) {
              targets.reverse();
            }
            targets.forEach(function(target2) {
              event.target = target2;
              fn.call(this, event);
            }, this);
          },
          setCapture: function(inPointerId, inTarget, skipDispatch) {
            if (this.captureInfo[inPointerId]) {
              this.releaseCapture(inPointerId, skipDispatch);
            }
            this.captureInfo[inPointerId] = inTarget;
            this.implicitRelease = this.releaseCapture.bind(this, inPointerId, skipDispatch);
            document.addEventListener("pointerup", this.implicitRelease);
            document.addEventListener("pointercancel", this.implicitRelease);
            var e2 = new PointerEvent2("gotpointercapture", { bubbles: true });
            e2.pointerId = inPointerId;
            e2._target = inTarget;
            if (!skipDispatch) {
              this.asyncDispatchEvent(e2);
            }
          },
          releaseCapture: function(inPointerId, skipDispatch) {
            var t2 = this.captureInfo[inPointerId];
            if (!t2) {
              return;
            }
            this.captureInfo[inPointerId] = void 0;
            document.removeEventListener("pointerup", this.implicitRelease);
            document.removeEventListener("pointercancel", this.implicitRelease);
            var e2 = new PointerEvent2("lostpointercapture", { bubbles: true });
            e2.pointerId = inPointerId;
            e2._target = t2;
            if (!skipDispatch) {
              this.asyncDispatchEvent(e2);
            }
          },
          /**
           * Dispatches the event to its target.
           *
           * @param {Event} inEvent The event to be dispatched.
           * @return {Boolean} True if an event handler returns true, false otherwise.
           */
          dispatchEvent: (
            /*scope.external.dispatchEvent || */
            function(inEvent) {
              var t2 = this.getTarget(inEvent);
              if (t2) {
                return t2.dispatchEvent(inEvent);
              }
            }
          ),
          asyncDispatchEvent: function(inEvent) {
            requestAnimationFrame(this.dispatchEvent.bind(this, inEvent));
          }
        };
        dispatcher.boundHandler = dispatcher.eventHandler.bind(dispatcher);
        var targeting = {
          shadow: function(inEl) {
            if (inEl) {
              return inEl.shadowRoot || inEl.webkitShadowRoot;
            }
          },
          canTarget: function(shadow) {
            return shadow && Boolean(shadow.elementFromPoint);
          },
          targetingShadow: function(inEl) {
            var s3 = this.shadow(inEl);
            if (this.canTarget(s3)) {
              return s3;
            }
          },
          olderShadow: function(shadow) {
            var os = shadow.olderShadowRoot;
            if (!os) {
              var se2 = shadow.querySelector("shadow");
              if (se2) {
                os = se2.olderShadowRoot;
              }
            }
            return os;
          },
          allShadows: function(element) {
            var shadows = [];
            var s3 = this.shadow(element);
            while (s3) {
              shadows.push(s3);
              s3 = this.olderShadow(s3);
            }
            return shadows;
          },
          searchRoot: function(inRoot, x2, y2) {
            if (inRoot) {
              var t2 = inRoot.elementFromPoint(x2, y2);
              var st, sr;
              sr = this.targetingShadow(t2);
              while (sr) {
                st = sr.elementFromPoint(x2, y2);
                if (!st) {
                  sr = this.olderShadow(sr);
                } else {
                  var ssr = this.targetingShadow(st);
                  return this.searchRoot(ssr, x2, y2) || st;
                }
              }
              return t2;
            }
          },
          owner: function(element) {
            var s3 = element;
            while (s3.parentNode) {
              s3 = s3.parentNode;
            }
            if (s3.nodeType !== Node.DOCUMENT_NODE && s3.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
              s3 = document;
            }
            return s3;
          },
          findTarget: function(inEvent) {
            var x2 = inEvent.clientX;
            var y2 = inEvent.clientY;
            var s3 = this.owner(inEvent.target);
            if (!s3.elementFromPoint(x2, y2)) {
              s3 = document;
            }
            return this.searchRoot(s3, x2, y2);
          }
        };
        var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);
        var map2 = Array.prototype.map.call.bind(Array.prototype.map);
        var toArray = Array.prototype.slice.call.bind(Array.prototype.slice);
        var filter2 = Array.prototype.filter.call.bind(Array.prototype.filter);
        var MO = window.MutationObserver || window.WebKitMutationObserver;
        var SELECTOR = "[touch-action]";
        var OBSERVER_INIT = {
          subtree: true,
          childList: true,
          attributes: true,
          attributeOldValue: true,
          attributeFilter: ["touch-action"]
        };
        function Installer(add, remove3, changed, binder) {
          this.addCallback = add.bind(binder);
          this.removeCallback = remove3.bind(binder);
          this.changedCallback = changed.bind(binder);
          if (MO) {
            this.observer = new MO(this.mutationWatcher.bind(this));
          }
        }
        Installer.prototype = {
          watchSubtree: function(target) {
            if (this.observer && targeting.canTarget(target)) {
              this.observer.observe(target, OBSERVER_INIT);
            }
          },
          enableOnSubtree: function(target) {
            this.watchSubtree(target);
            if (target === document && document.readyState !== "complete") {
              this.installOnLoad();
            } else {
              this.installNewSubtree(target);
            }
          },
          installNewSubtree: function(target) {
            forEach(this.findElements(target), this.addElement, this);
          },
          findElements: function(target) {
            if (target.querySelectorAll) {
              return target.querySelectorAll(SELECTOR);
            }
            return [];
          },
          removeElement: function(el) {
            this.removeCallback(el);
          },
          addElement: function(el) {
            this.addCallback(el);
          },
          elementChanged: function(el, oldValue) {
            this.changedCallback(el, oldValue);
          },
          concatLists: function(accum, list) {
            return accum.concat(toArray(list));
          },
          // register all touch-action = none nodes on document load
          installOnLoad: function() {
            document.addEventListener("readystatechange", function() {
              if (document.readyState === "complete") {
                this.installNewSubtree(document);
              }
            }.bind(this));
          },
          isElement: function(n3) {
            return n3.nodeType === Node.ELEMENT_NODE;
          },
          flattenMutationTree: function(inNodes) {
            var tree = map2(inNodes, this.findElements, this);
            tree.push(filter2(inNodes, this.isElement));
            return tree.reduce(this.concatLists, []);
          },
          mutationWatcher: function(mutations) {
            mutations.forEach(this.mutationHandler, this);
          },
          mutationHandler: function(m2) {
            if (m2.type === "childList") {
              var added = this.flattenMutationTree(m2.addedNodes);
              added.forEach(this.addElement, this);
              var removed = this.flattenMutationTree(m2.removedNodes);
              removed.forEach(this.removeElement, this);
            } else if (m2.type === "attributes") {
              this.elementChanged(m2.target, m2.oldValue);
            }
          }
        };
        function shadowSelector(s3) {
          return "body /shadow-deep/ " + s3;
        }
        function rule(v2) {
          return "{ -ms-touch-action: " + v2 + "; touch-action: " + v2 + "; }";
        }
        var attrib2css = [
          { selector: '[touch-action="none"]', value: "none" },
          { selector: '[touch-action="auto"]', value: "auto" },
          { selector: '[touch-action~="pan-x"]', value: "pan-x" },
          { selector: '[touch-action~="pan-y"]', value: "pan-y" },
          { selector: '[touch-action~="pan-up"]', value: "pan-up" },
          { selector: '[touch-action~="pan-down"]', value: "pan-down" },
          { selector: '[touch-action~="pan-left"]', value: "pan-left" },
          { selector: '[touch-action~="pan-right"]', value: "pan-right" }
        ];
        var styles = "";
        var hasNativePE = window.PointerEvent || window.MSPointerEvent;
        var hasShadowRoot = !window.ShadowDOMPolyfill && document.head.createShadowRoot;
        function applyAttributeStyles() {
          if (hasNativePE) {
            attrib2css.forEach(function(r3) {
              styles += r3.selector + rule(r3.value) + "\n";
              if (hasShadowRoot) {
                styles += shadowSelector(r3.selector) + rule(r3.value) + "\n";
              }
            });
            var el = document.createElement("style");
            el.textContent = styles;
            document.head.appendChild(el);
          }
        }
        var pointermap = dispatcher.pointermap;
        var DEDUP_DIST = 25;
        var BUTTON_TO_BUTTONS = [1, 4, 2, 8, 16];
        var HAS_BUTTONS = false;
        try {
          HAS_BUTTONS = new MouseEvent("test", { buttons: 1 }).buttons === 1;
        } catch (e2) {
        }
        var mouseEvents = {
          POINTER_ID: 1,
          POINTER_TYPE: "mouse",
          events: [
            "mousedown",
            "webkitmouseforcechanged",
            "mousemove",
            "mouseup",
            "mouseover",
            "mouseout"
          ],
          register: function(target) {
            dispatcher.listen(target, this.events);
          },
          unregister: function(target) {
            dispatcher.unlisten(target, this.events);
          },
          lastTouches: [],
          // collide with the global mouse listener
          isEventSimulatedFromTouch: function(inEvent) {
            var lts = this.lastTouches;
            var x2 = inEvent.clientX;
            var y2 = inEvent.clientY;
            for (var i2 = 0, l2 = lts.length, t2; i2 < l2 && (t2 = lts[i2]); i2++) {
              var dx = Math.abs(x2 - t2.x);
              var dy = Math.abs(y2 - t2.y);
              if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {
                return true;
              }
            }
          },
          prepareEvent: function(inEvent) {
            var e2 = dispatcher.cloneEvent(inEvent);
            var pd = e2.preventDefault;
            e2.preventDefault = function() {
              inEvent.preventDefault();
              pd();
            };
            e2.pointerId = this.POINTER_ID;
            e2.isPrimary = true;
            e2.pointerType = this.POINTER_TYPE;
            if ("webkitForce" in inEvent) {
              e2.pressure = inEvent.webkitForce - MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN;
            }
            return e2;
          },
          prepareButtonsForMove: function(e2, inEvent) {
            var p = pointermap.get(this.POINTER_ID);
            if (inEvent.which === 0 || !p) {
              e2.buttons = 0;
            } else {
              e2.buttons = p.buttons;
            }
            inEvent.buttons = e2.buttons;
          },
          mousedown: function(inEvent) {
            if (!this.isEventSimulatedFromTouch(inEvent)) {
              var p = pointermap.get(this.POINTER_ID);
              var e2 = this.prepareEvent(inEvent);
              if (!HAS_BUTTONS) {
                e2.buttons = BUTTON_TO_BUTTONS[e2.button];
                if (p) {
                  e2.buttons |= p.buttons;
                }
                inEvent.buttons = e2.buttons;
              }
              pointermap.set(this.POINTER_ID, inEvent);
              if (!p || p.buttons === 0) {
                dispatcher.down(e2);
              } else {
                dispatcher.move(e2);
              }
            }
          },
          // This is called when the user force presses without moving x/y
          webkitmouseforcechanged: function(inEvent) {
            this.mousemove(inEvent);
          },
          mousemove: function(inEvent) {
            if (!this.isEventSimulatedFromTouch(inEvent)) {
              var e2 = this.prepareEvent(inEvent);
              if (!HAS_BUTTONS) {
                this.prepareButtonsForMove(e2, inEvent);
              }
              e2.button = -1;
              pointermap.set(this.POINTER_ID, inEvent);
              dispatcher.move(e2);
            }
          },
          mouseup: function(inEvent) {
            if (!this.isEventSimulatedFromTouch(inEvent)) {
              var p = pointermap.get(this.POINTER_ID);
              var e2 = this.prepareEvent(inEvent);
              if (!HAS_BUTTONS) {
                var up = BUTTON_TO_BUTTONS[e2.button];
                e2.buttons = p ? p.buttons & ~up : 0;
                inEvent.buttons = e2.buttons;
              }
              pointermap.set(this.POINTER_ID, inEvent);
              e2.buttons &= ~BUTTON_TO_BUTTONS[e2.button];
              if (e2.buttons === 0) {
                dispatcher.up(e2);
              } else {
                dispatcher.move(e2);
              }
            }
          },
          mouseover: function(inEvent) {
            if (!this.isEventSimulatedFromTouch(inEvent)) {
              var e2 = this.prepareEvent(inEvent);
              if (!HAS_BUTTONS) {
                this.prepareButtonsForMove(e2, inEvent);
              }
              e2.button = -1;
              pointermap.set(this.POINTER_ID, inEvent);
              dispatcher.enterOver(e2);
            }
          },
          mouseout: function(inEvent) {
            if (!this.isEventSimulatedFromTouch(inEvent)) {
              var e2 = this.prepareEvent(inEvent);
              if (!HAS_BUTTONS) {
                this.prepareButtonsForMove(e2, inEvent);
              }
              e2.button = -1;
              dispatcher.leaveOut(e2);
            }
          },
          cancel: function(inEvent) {
            var e2 = this.prepareEvent(inEvent);
            dispatcher.cancel(e2);
            this.deactivateMouse();
          },
          deactivateMouse: function() {
            pointermap.delete(this.POINTER_ID);
          }
        };
        var captureInfo = dispatcher.captureInfo;
        var findTarget = targeting.findTarget.bind(targeting);
        var allShadows = targeting.allShadows.bind(targeting);
        var pointermap$1 = dispatcher.pointermap;
        var DEDUP_TIMEOUT = 2500;
        var ATTRIB = "touch-action";
        var INSTALLER;
        var UP = 1;
        var DOWN = 2;
        var LEFT = 4;
        var RIGHT = 8;
        var AUTO = UP | DOWN | LEFT | RIGHT;
        var touchEvents = {
          events: [
            "touchstart",
            "touchmove",
            "touchforcechange",
            "touchend",
            "touchcancel"
          ],
          register: function(target) {
            INSTALLER.enableOnSubtree(target);
          },
          unregister: function() {
          },
          elementAdded: function(el) {
            var a2 = el.getAttribute(ATTRIB);
            var st = this.touchActionToScrollType(a2);
            if (typeof st === "number") {
              el._scrollType = st;
              dispatcher.listen(el, this.events);
              allShadows(el).forEach(function(s3) {
                s3._scrollType = st;
                dispatcher.listen(s3, this.events);
              }, this);
            }
          },
          elementRemoved: function(el) {
            if (pointermap$1.size > 0) {
              var evts = this.events;
              el.addEventListener("touchend", function() {
                el._scrollType = void 0;
                dispatcher.unlisten(el, evts);
              });
            } else {
              el._scrollType = void 0;
              dispatcher.unlisten(el, this.events);
            }
            allShadows(el).forEach(function(s3) {
              s3._scrollType = void 0;
              dispatcher.unlisten(s3, this.events);
            }, this);
          },
          elementChanged: function(el, oldValue) {
            var a2 = el.getAttribute(ATTRIB);
            var st = this.touchActionToScrollType(a2);
            var oldSt = this.touchActionToScrollType(oldValue);
            if (typeof st === "number" && typeof oldSt === "number") {
              el._scrollType = st;
              allShadows(el).forEach(function(s3) {
                s3._scrollType = st;
              }, this);
            } else if (typeof oldSt === "number") {
              this.elementRemoved(el);
            } else if (typeof st === "number") {
              this.elementAdded(el);
            }
          },
          scrollTypes: {
            UP: function(s3) {
              return s3.includes("pan-y") || s3.includes("pan-up") ? UP : 0;
            },
            DOWN: function(s3) {
              return s3.includes("pan-y") || s3.includes("pan-down") ? DOWN : 0;
            },
            LEFT: function(s3) {
              return s3.includes("pan-x") || s3.includes("pan-left") ? LEFT : 0;
            },
            RIGHT: function(s3) {
              return s3.includes("pan-x") || s3.includes("pan-right") ? RIGHT : 0;
            }
          },
          touchActionToScrollType: function(touchAction) {
            if (!touchAction) {
              return;
            }
            if (touchAction === "auto") {
              return AUTO;
            }
            if (touchAction === "none") {
              return 0;
            }
            var s3 = touchAction.split(" ");
            var st = this.scrollTypes;
            return st.UP(s3) | st.DOWN(s3) | st.LEFT(s3) | st.RIGHT(s3);
          },
          POINTER_TYPE: "touch",
          firstTouch: null,
          isPrimaryTouch: function(inTouch) {
            return this.firstTouch === inTouch.identifier;
          },
          setPrimaryTouch: function(inTouch) {
            if (pointermap$1.size === 0 || pointermap$1.size === 1 && pointermap$1.has(1)) {
              this.firstTouch = inTouch.identifier;
              this.firstXY = { X: inTouch.clientX, Y: inTouch.clientY };
              this.scrolling = false;
            }
          },
          removePrimaryPointer: function(inPointer) {
            if (inPointer.isPrimary) {
              this.firstTouch = null;
              this.firstXY = null;
            }
          },
          typeToButtons: function(type) {
            var ret = 0;
            if (type === "touchstart" || type === "touchmove" || type === "touchforcechange") {
              ret = 1;
            }
            return ret;
          },
          touchToPointer: function(inTouch) {
            var cte = this.currentTouchEvent;
            var e2 = dispatcher.cloneEvent(inTouch);
            var id2 = e2.pointerId = inTouch.identifier + 2;
            e2.target = captureInfo[id2] || findTarget(e2);
            e2.bubbles = true;
            e2.cancelable = true;
            e2.button = 0;
            e2.buttons = this.typeToButtons(cte.type);
            e2.width = (inTouch.radiusX || inTouch.webkitRadiusX || 0) * 2;
            e2.height = (inTouch.radiusY || inTouch.webkitRadiusY || 0) * 2;
            e2.pressure = inTouch.force !== void 0 ? inTouch.force : inTouch.webkitForce !== void 0 ? inTouch.webkitForce : void 0;
            e2.isPrimary = this.isPrimaryTouch(inTouch);
            if (inTouch.altitudeAngle) {
              var tan = Math.tan(inTouch.altitudeAngle);
              var radToDeg = 180 / Math.PI;
              e2.tiltX = Math.atan(Math.cos(inTouch.azimuthAngle) / tan) * radToDeg;
              e2.tiltY = Math.atan(Math.sin(inTouch.azimuthAngle) / tan) * radToDeg;
            } else {
              e2.tiltX = 0;
              e2.tiltY = 0;
            }
            if (inTouch.touchType === "stylus") {
              e2.pointerType = "pen";
            } else {
              e2.pointerType = this.POINTER_TYPE;
            }
            e2.altKey = cte.altKey;
            e2.ctrlKey = cte.ctrlKey;
            e2.metaKey = cte.metaKey;
            e2.shiftKey = cte.shiftKey;
            var self2 = this;
            e2.preventDefault = function() {
              self2.scrolling = false;
              self2.firstXY = null;
              cte.preventDefault();
            };
            return e2;
          },
          processTouches: function(inEvent, inFunction) {
            var tl = inEvent.changedTouches;
            this.currentTouchEvent = inEvent;
            for (var i2 = 0, t2; i2 < tl.length; i2++) {
              t2 = tl[i2];
              inFunction.call(this, this.touchToPointer(t2));
            }
          },
          // For single axis scrollers, determines whether the element should emit
          // pointer events or behave as a scroller
          shouldScroll: function(inEvent) {
            if (this.firstXY) {
              var ret;
              var st = inEvent.currentTarget._scrollType;
              if (st === 0) {
                ret = false;
              } else if (st === AUTO) {
                ret = true;
              } else {
                var t2 = inEvent.changedTouches[0];
                var dy = t2.clientY - this.firstXY.Y;
                var dya = Math.abs(dy);
                var dx = t2.clientX - this.firstXY.X;
                var dxa = Math.abs(dx);
                var up = st & UP;
                var down = st & DOWN;
                var left = st & LEFT;
                var right = st & RIGHT;
                if (left && right) {
                  ret = dxa > dya;
                } else if (left) {
                  ret = dxa > dya && dx > 0;
                } else if (right) {
                  ret = dxa > dya && dx < 0;
                }
                if (!ret) {
                  if (up && down) {
                    ret = dxa < dya;
                  } else if (up) {
                    ret = dxa < dya && dy > 0;
                  } else if (down) {
                    ret = dxa < dya && dy < 0;
                  }
                }
              }
              this.firstXY = null;
              return ret;
            }
          },
          findTouch: function(inTL, inId) {
            for (var i2 = 0, l2 = inTL.length, t2; i2 < l2 && (t2 = inTL[i2]); i2++) {
              if (t2.identifier === inId) {
                return true;
              }
            }
          },
          // In some instances, a touchstart can happen without a touchend. This
          // leaves the pointermap in a broken state.
          // Therefore, on every touchstart, we remove the touches that did not fire a
          // touchend event.
          // To keep state globally consistent, we fire a
          // pointercancel for this "abandoned" touch
          vacuumTouches: function(inEvent) {
            var tl = inEvent.touches;
            if (pointermap$1.size >= tl.length) {
              var d2 = [];
              pointermap$1.forEach(function(value, key) {
                if (key !== 1 && !this.findTouch(tl, key - 2)) {
                  var p = value.out;
                  d2.push(p);
                }
              }, this);
              d2.forEach(this.cancelOut, this);
            }
          },
          touchstart: function(inEvent) {
            this.vacuumTouches(inEvent);
            this.setPrimaryTouch(inEvent.changedTouches[0]);
            this.dedupSynthMouse(inEvent);
            if (!this.scrolling) {
              this.processTouches(inEvent, this.overDown);
            }
          },
          overDown: function(inPointer) {
            pointermap$1.set(inPointer.pointerId, {
              target: inPointer.target,
              out: inPointer,
              outTarget: inPointer.target
            });
            dispatcher.enterOver(inPointer);
            dispatcher.down(inPointer);
          },
          // Called when pressure or tilt changes without the x/y changing
          touchforcechange: function(inEvent) {
            this.touchmove(inEvent);
          },
          touchmove: function(inEvent) {
            if (!this.scrolling) {
              if (this.shouldScroll(inEvent)) {
                this.scrolling = true;
                this.touchcancel(inEvent);
              } else {
                if (inEvent.type !== "touchforcechange") {
                  inEvent.preventDefault();
                }
                this.processTouches(inEvent, this.moveOverOut);
              }
            }
          },
          moveOverOut: function(inPointer) {
            var event = inPointer;
            var pointer = pointermap$1.get(event.pointerId);
            if (!pointer) {
              return;
            }
            var outEvent = pointer.out;
            var outTarget = pointer.outTarget;
            dispatcher.move(event);
            if (outEvent && outTarget !== event.target) {
              outEvent.relatedTarget = event.target;
              event.relatedTarget = outTarget;
              outEvent.target = outTarget;
              if (event.target) {
                dispatcher.leaveOut(outEvent);
                dispatcher.enterOver(event);
              } else {
                event.target = outTarget;
                event.relatedTarget = null;
                this.cancelOut(event);
              }
            }
            pointer.out = event;
            pointer.outTarget = event.target;
          },
          touchend: function(inEvent) {
            this.dedupSynthMouse(inEvent);
            this.processTouches(inEvent, this.upOut);
          },
          upOut: function(inPointer) {
            if (!this.scrolling) {
              dispatcher.up(inPointer);
              dispatcher.leaveOut(inPointer);
            }
            this.cleanUpPointer(inPointer);
          },
          touchcancel: function(inEvent) {
            this.processTouches(inEvent, this.cancelOut);
          },
          cancelOut: function(inPointer) {
            dispatcher.cancel(inPointer);
            dispatcher.leaveOut(inPointer);
            this.cleanUpPointer(inPointer);
          },
          cleanUpPointer: function(inPointer) {
            pointermap$1.delete(inPointer.pointerId);
            this.removePrimaryPointer(inPointer);
          },
          // prevent synth mouse events from creating pointer events
          dedupSynthMouse: function(inEvent) {
            var lts = mouseEvents.lastTouches;
            var t2 = inEvent.changedTouches[0];
            if (this.isPrimaryTouch(t2)) {
              var lt = { x: t2.clientX, y: t2.clientY };
              lts.push(lt);
              var fn = function(lts2, lt2) {
                var i2 = lts2.indexOf(lt2);
                if (i2 > -1) {
                  lts2.splice(i2, 1);
                }
              }.bind(null, lts, lt);
              setTimeout(fn, DEDUP_TIMEOUT);
            }
          }
        };
        INSTALLER = new Installer(
          touchEvents.elementAdded,
          touchEvents.elementRemoved,
          touchEvents.elementChanged,
          touchEvents
        );
        var pointermap$2 = dispatcher.pointermap;
        var HAS_BITMAP_TYPE = window.MSPointerEvent && typeof window.MSPointerEvent.MSPOINTER_TYPE_MOUSE === "number";
        var msEvents = {
          events: [
            "MSPointerDown",
            "MSPointerMove",
            "MSPointerUp",
            "MSPointerOut",
            "MSPointerOver",
            "MSPointerCancel",
            "MSGotPointerCapture",
            "MSLostPointerCapture"
          ],
          register: function(target) {
            dispatcher.listen(target, this.events);
          },
          unregister: function(target) {
            dispatcher.unlisten(target, this.events);
          },
          POINTER_TYPES: [
            "",
            "unavailable",
            "touch",
            "pen",
            "mouse"
          ],
          prepareEvent: function(inEvent) {
            var e2 = inEvent;
            if (HAS_BITMAP_TYPE) {
              e2 = dispatcher.cloneEvent(inEvent);
              e2.pointerType = this.POINTER_TYPES[inEvent.pointerType];
            }
            return e2;
          },
          cleanup: function(id2) {
            pointermap$2.delete(id2);
          },
          MSPointerDown: function(inEvent) {
            pointermap$2.set(inEvent.pointerId, inEvent);
            var e2 = this.prepareEvent(inEvent);
            dispatcher.down(e2);
          },
          MSPointerMove: function(inEvent) {
            var e2 = this.prepareEvent(inEvent);
            dispatcher.move(e2);
          },
          MSPointerUp: function(inEvent) {
            var e2 = this.prepareEvent(inEvent);
            dispatcher.up(e2);
            this.cleanup(inEvent.pointerId);
          },
          MSPointerOut: function(inEvent) {
            var e2 = this.prepareEvent(inEvent);
            dispatcher.leaveOut(e2);
          },
          MSPointerOver: function(inEvent) {
            var e2 = this.prepareEvent(inEvent);
            dispatcher.enterOver(e2);
          },
          MSPointerCancel: function(inEvent) {
            var e2 = this.prepareEvent(inEvent);
            dispatcher.cancel(e2);
            this.cleanup(inEvent.pointerId);
          },
          MSLostPointerCapture: function(inEvent) {
            var e2 = dispatcher.makeEvent("lostpointercapture", inEvent);
            dispatcher.dispatchEvent(e2);
          },
          MSGotPointerCapture: function(inEvent) {
            var e2 = dispatcher.makeEvent("gotpointercapture", inEvent);
            dispatcher.dispatchEvent(e2);
          }
        };
        function applyPolyfill() {
          if (!window.PointerEvent) {
            window.PointerEvent = PointerEvent2;
            if (window.navigator.msPointerEnabled) {
              var tp = window.navigator.msMaxTouchPoints;
              Object.defineProperty(window.navigator, "maxTouchPoints", {
                value: tp,
                enumerable: true
              });
              dispatcher.registerSource("ms", msEvents);
            } else {
              Object.defineProperty(window.navigator, "maxTouchPoints", {
                value: 0,
                enumerable: true
              });
              dispatcher.registerSource("mouse", mouseEvents);
              if (window.ontouchstart !== void 0) {
                dispatcher.registerSource("touch", touchEvents);
              }
            }
            dispatcher.register(document);
          }
        }
        var n2 = window.navigator;
        var s2;
        var r2;
        var h;
        function assertActive(id2) {
          if (!dispatcher.pointermap.has(id2)) {
            var error = new Error("NotFoundError");
            error.name = "NotFoundError";
            throw error;
          }
        }
        function assertConnected(elem) {
          var parent = elem.parentNode;
          while (parent && parent !== elem.ownerDocument) {
            parent = parent.parentNode;
          }
          if (!parent) {
            var error = new Error("InvalidStateError");
            error.name = "InvalidStateError";
            throw error;
          }
        }
        function inActiveButtonState(id2) {
          var p = dispatcher.pointermap.get(id2);
          return p.buttons !== 0;
        }
        if (n2.msPointerEnabled) {
          s2 = function(pointerId) {
            assertActive(pointerId);
            assertConnected(this);
            if (inActiveButtonState(pointerId)) {
              dispatcher.setCapture(pointerId, this, true);
              this.msSetPointerCapture(pointerId);
            }
          };
          r2 = function(pointerId) {
            assertActive(pointerId);
            dispatcher.releaseCapture(pointerId, true);
            this.msReleasePointerCapture(pointerId);
          };
        } else {
          s2 = function setPointerCapture(pointerId) {
            assertActive(pointerId);
            assertConnected(this);
            if (inActiveButtonState(pointerId)) {
              dispatcher.setCapture(pointerId, this);
            }
          };
          r2 = function releasePointerCapture(pointerId) {
            assertActive(pointerId);
            dispatcher.releaseCapture(pointerId);
          };
        }
        h = function hasPointerCapture(pointerId) {
          return !!dispatcher.captureInfo[pointerId];
        };
        function applyPolyfill$1() {
          if (window.Element && !window.Element.prototype.setPointerCapture) {
            Object.defineProperties(window.Element.prototype, {
              "setPointerCapture": {
                value: s2
              },
              "releasePointerCapture": {
                value: r2
              },
              "hasPointerCapture": {
                value: h
              }
            });
          }
        }
        applyAttributeStyles();
        applyPolyfill();
        applyPolyfill$1();
        var pointerevents = {
          dispatcher,
          Installer,
          PointerEvent: PointerEvent2,
          PointerMap,
          targetFinding: targeting
        };
        return pointerevents;
      });
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component71(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component71.prototype.isReactComponent = {};
          Component71.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component71.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component71.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component71.prototype;
          function PureComponent(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component71.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef11() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName2 = innerType.displayName || innerType.name || "";
            return functionName2 !== "" ? wrapperName + "(" + functionName2 + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty3.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty3.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement6(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty3.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps8 = type.defaultProps;
              for (propName in defaultProps8) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps8[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config2, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              var defaultProps8;
              if (element.type && element.type.defaultProps) {
                defaultProps8 = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty3.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps8 !== void 0) {
                    props[propName] = defaultProps8[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object3) {
            return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array4, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray3(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array4, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array4.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray3(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator4 = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator4.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func3, context2) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func3.call(context2, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext5(defaultValue) {
            var context2 = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context2.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context2
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context2
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context2.Provider;
                  },
                  set: function(_Provider) {
                    context2.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context2._currentValue;
                  },
                  set: function(_currentValue) {
                    context2._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context2._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context2._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context2._threadCount;
                  },
                  set: function(_threadCount) {
                    context2._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context2.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context2.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context2.Consumer = Consumer;
            }
            {
              context2._currentRenderer = null;
              context2._currentRenderer2 = null;
            }
            return context2;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps8;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps8;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps8 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef6(render2) {
            {
              if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render2 !== "function") {
                error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
              } else {
                if (render2.length !== 0 && render2.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render2 != null) {
                if (render2.defaultProps != null || render2.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render2.name && !render2.displayName) {
                    render2.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare3) {
            {
              if (!isValidElementType2(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare3 === void 0 ? null : compare3
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext3(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState2(initialState13) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState13);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef3(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect2(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create4, deps);
          }
          function useInsertionEffect(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create4, deps);
          }
          function useLayoutEffect2(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create4, deps);
          }
          function useCallback2(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo3(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create4, deps);
          }
          function useImperativeHandle(ref, create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create4, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct2) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct2) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component72) {
            var prototype = Component72.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty3);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray3(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator4 = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator4.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys3 = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys3.length; i2++) {
                var key = keys3[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType2(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray3(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement6.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task3) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel4 = new MessageChannel();
                  channel4.port1.onmessage = callback;
                  channel4.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task3);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue2 = ReactCurrentActQueue.current;
                  if (queue2 !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue2);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue2 = ReactCurrentActQueue.current;
              if (queue2 !== null) {
                try {
                  flushActQueue(queue2);
                  enqueueTask(function() {
                    if (queue2.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue2) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue2.length; i2++) {
                    var callback = queue2[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue2.length = 0;
                } catch (error2) {
                  queue2 = queue2.slice(i2 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children3 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children3;
          exports.Component = Component71;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext5;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef11;
          exports.forwardRef = forwardRef6;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback2;
          exports.useContext = useContext3;
          exports.useDebugValue = useDebugValue2;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect2;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect2;
          exports.useMemo = useMemo3;
          exports.useReducer = useReducer;
          exports.useRef = useRef3;
          exports.useState = useState2;
          exports.useSyncExternalStore = useSyncExternalStore3;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push2(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last2 = heap.pop();
            if (last2 !== first) {
              heap[0] = last2;
              siftDown(heap, last2, 0);
            }
            return first;
          }
          function siftUp(heap, node, i2) {
            var index = i2;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare3(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i2) {
            var index = i2;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare3(left, node) < 0) {
                if (rightIndex < length && compare3(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare3(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare3(a2, b2) {
            var diff2 = a2.sortIndex - b2.sortIndex;
            return diff2 !== 0 ? diff2 : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task3, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer2 = peek(timerQueue);
            while (timer2 !== null) {
              if (timer2.callback === null) {
                pop(timerQueue);
              } else if (timer2.startTime <= currentTime) {
                pop(timerQueue);
                timer2.sortIndex = timer2.expirationTime;
                push2(taskQueue, timer2);
              } else {
                return;
              }
              timer2 = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay3 = options.delay;
              if (typeof delay3 === "number" && delay3 > 0) {
                startTime2 = currentTime + delay3;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask2 = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask2.sortIndex = startTime2;
              push2(timerQueue, newTask2);
              if (peek(taskQueue) === null && newTask2 === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask2.sortIndex = expirationTime;
              push2(taskQueue, newTask2);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask2;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task3) {
            task3.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel4 = new MessageChannel();
            var port = channel4.port2;
            channel4.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React195 = require_react();
          var Scheduler2 = require_scheduler();
          var ReactSharedInternals = React195.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty3.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty3.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct2) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct2) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component71) {
            var prototype = Component71.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName2 = innerType.displayName || innerType.name || "";
            return functionName2 !== "" ? wrapperName + "(" + functionName2 + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName2 = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName2 !== "" ? wrapperName + "(" + functionName2 + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context2 = type;
                return getContextName$1(context2) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current2 = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current2 === null) {
                return null;
              }
              var owner = current2._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current2 === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current2);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current2 = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current2 = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current2;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString5(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set4 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set4.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e2) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString5(value);
                }
              } else if (node.value !== toString5(value)) {
                node.value = toString5(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString5(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString5(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString5(value)) {
                node.defaultValue = toString5(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React195.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString5(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray3(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray3(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString5(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString5(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray3(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString5(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString5(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func3) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func3(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func3;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string5) {
              return string5.replace(hyphenPattern, function(_2, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty3.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty3.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b2) {
            if (isInsideEventHandler) {
              return fn(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM2) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e2) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func3, context2, a2, b2, c2, d2, e2, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func3.apply(context2, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func3, context2, a2, b2, c2, d2, e2, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func3.apply(context2, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func3, context2, a2, b2, c2, d2, e2, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func3, context2, a2, b2, c2, d2, e2, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key) {
            return key._reactInternals;
          }
          function has2(key) {
            return key._reactInternals !== void 0;
          }
          function set3(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current3 = fiber.alternate;
                if (current3 !== null) {
                  suspenseState = current3.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler2.unstable_scheduleCallback;
          var cancelCallback = Scheduler2.unstable_cancelCallback;
          var shouldYield = Scheduler2.unstable_shouldYield;
          var requestPaint = Scheduler2.unstable_requestPaint;
          var now = Scheduler2.unstable_now;
          var getCurrentPriorityLevel = Scheduler2.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler2.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler2.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler2.unstable_NormalPriority;
          var LowPriority = Scheduler2.unstable_LowPriority;
          var IdlePriority = Scheduler2.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler2.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler2.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map2 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map2.set(lane, label);
                lane *= 2;
              }
              return map2;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x2) {
            var asUint = x2 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set4, subset) {
            return (set4 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set4, subset) {
            return set4 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler2.unstable_scheduleCallback(Scheduler2.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM2 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM2) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM2) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is2(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual2(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty3.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e2) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM2) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent3(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent3(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent3(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent3(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent3(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent3(nodeA);
              nodeB = getParent3(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html2) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop5() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop5;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement6(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty3.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string5 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string5, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement6(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string5 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string5, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data2 = nextNode.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_PENDING_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has3 = Function.call.bind(hasOwnProperty3);
              for (var typeSpecName in typeSpecs) {
                if (has3(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push2(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component71, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component71)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context2 = {};
              for (var key in contextTypes) {
                context2[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context2, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context2);
              }
              return context2;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context2, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push2(contextStackCursor, context2, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component71 = node.type;
                    if (isContextProvider(Component71)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue2 = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue2.length; i2++) {
                  var callback = queue2[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id2 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id2.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id2 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id2;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id2) {
            return 1 << getBitLength(id2) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set4) {
              var array4 = [];
              set4.forEach(function(value) {
                array4.push(value);
              });
              return array4.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component71, baseProps) {
            if (Component71 && Component71.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps8 = Component71.defaultProps;
              for (var propName in defaultProps8) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps8[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context2, nextValue) {
            {
              push2(valueCursor, context2._currentValue, providerFiber);
              context2._currentValue = nextValue;
              {
                if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context2._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context2, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context2._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context2, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context2, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context2, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context2) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update3 = createUpdate(NoTimestamp, lane);
                      update3.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update3.next = update3;
                        } else {
                          update3.next = pending.next;
                          pending.next = update3;
                        }
                        sharedQueue.pending = update3;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context2) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context2._currentValue;
            if (lastFullyObservedContext === context2) ;
            else {
              var contextItem = {
                context: context2,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue2) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue2];
            } else {
              concurrentQueues.push(queue2);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue2 = concurrentQueues[i2];
                var lastInterleavedUpdate = queue2.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue2.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue2.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue2.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue2, update3, lane) {
            var interleaved = queue2.interleaved;
            if (interleaved === null) {
              update3.next = update3;
              pushConcurrentUpdateQueue(queue2);
            } else {
              update3.next = interleaved.next;
              interleaved.next = update3;
            }
            queue2.interleaved = update3;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue2, update3, lane) {
            var interleaved = queue2.interleaved;
            if (interleaved === null) {
              update3.next = update3;
              pushConcurrentUpdateQueue(queue2);
            } else {
              update3.next = interleaved.next;
              interleaved.next = update3;
            }
            queue2.interleaved = update3;
          }
          function enqueueConcurrentClassUpdate(fiber, queue2, update3, lane) {
            var interleaved = queue2.interleaved;
            if (interleaved === null) {
              update3.next = update3;
              pushConcurrentUpdateQueue(queue2);
            } else {
              update3.next = interleaved.next;
              interleaved.next = update3;
            }
            queue2.interleaved = update3;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue2 = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue2;
          }
          function cloneUpdateQueue(current3, workInProgress2) {
            var queue2 = workInProgress2.updateQueue;
            var currentQueue = current3.updateQueue;
            if (queue2 === currentQueue) {
              var clone2 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone2;
            }
          }
          function createUpdate(eventTime, lane) {
            var update3 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update3;
          }
          function enqueueUpdate(fiber, update3, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update3.next = update3;
              } else {
                update3.next = pending.next;
                pending.next = update3;
              }
              sharedQueue.pending = update3;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update3, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue2 = workInProgress2.updateQueue;
            var current3 = workInProgress2.alternate;
            if (current3 !== null) {
              var currentQueue = current3.updateQueue;
              if (queue2 === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue2.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update3 = firstBaseUpdate;
                  do {
                    var clone2 = {
                      eventTime: update3.eventTime,
                      lane: update3.lane,
                      tag: update3.tag,
                      payload: update3.payload,
                      callback: update3.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone2;
                    } else {
                      newLast.next = clone2;
                      newLast = clone2;
                    }
                    update3 = update3.next;
                  } while (update3 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue2 = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue2;
                return;
              }
            }
            var lastBaseUpdate = queue2.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue2.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue2.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue2, update3, prevState, nextProps, instance) {
            switch (update3.tag) {
              case ReplaceState: {
                var payload = update3.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update3.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue2 = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue2.shared;
            }
            var firstBaseUpdate = queue2.firstBaseUpdate;
            var lastBaseUpdate = queue2.lastBaseUpdate;
            var pendingQueue = queue2.shared.pending;
            if (pendingQueue !== null) {
              queue2.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current3 = workInProgress2.alternate;
              if (current3 !== null) {
                var currentQueue = current3.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue2.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update3 = firstBaseUpdate;
              do {
                var updateLane = update3.lane;
                var updateEventTime = update3.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone2 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update3.tag,
                    payload: update3.payload,
                    callback: update3.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone2;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update3.tag,
                      payload: update3.payload,
                      callback: update3.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue2, update3, newState, props, instance);
                  var callback = update3.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update3.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue2.effects;
                    if (effects === null) {
                      queue2.effects = [update3];
                    } else {
                      effects.push(update3);
                    }
                  }
                }
                update3 = update3.next;
                if (update3 === null) {
                  pendingQueue = queue2.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update3 = _firstPendingUpdate;
                    queue2.lastBaseUpdate = _lastPendingUpdate;
                    queue2.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue2.baseState = newBaseState;
              queue2.firstBaseUpdate = newFirstBaseUpdate;
              queue2.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue2.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue2.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context2) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context2);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect3 = effects[i2];
                var callback = effect3.callback;
                if (callback !== null) {
                  effect3.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React195.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update3 = createUpdate(eventTime, lane);
              update3.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update3.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update3, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update3 = createUpdate(eventTime, lane);
              update3.tag = ReplaceState;
              update3.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update3.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update3, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update3 = createUpdate(eventTime, lane);
              update3.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update3.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update3, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray3(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set3(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context2 = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context2 = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context2);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context2);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context2);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current3, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current3, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current3, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current3 !== null && current3.ref !== null && typeof current3.ref === "function" && current3.ref._stringRef === stringRef) {
                  return current3.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone2 = createWorkInProgress(fiber, pendingProps);
              clone2.index = 0;
              clone2.sibling = null;
              return clone2;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current3 = newFiber.alternate;
              if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current3, textContent, lanes) {
              if (current3 === null || current3.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current3, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current3, element.props.children, lanes, element.key);
              }
              if (current3 !== null) {
                if (current3.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current3, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current3.type) {
                  var existing = useFiber(current3, element.props);
                  existing.ref = coerceRef(returnFiber, current3, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current3, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current3, portal, lanes) {
              if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current3, fragment, lanes, key) {
              if (current3 === null || current3.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray3(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray3(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray3(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray3(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current3, workInProgress2) {
            if (current3 !== null && workInProgress2.child !== current3.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (c2 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context2 = requiredContext(contextStackCursor$1.current);
            return context2;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context2 = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context2, fiber.type);
            if (context2 === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout2 = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray3(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current3, workInProgress2, Component71, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current3 !== null && current3.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component71(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component71(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current3 !== null && (current3.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current3.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current3, workInProgress2, lanes) {
            workInProgress2.updateQueue = current3.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current3.lanes = removeLanes(current3.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue2 = hook.queue;
                if (queue2 !== null) {
                  queue2.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current3 = currentlyRenderingFiber$1.alternate;
              if (current3 !== null) {
                nextCurrentHook = current3.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState13;
            if (init !== void 0) {
              initialState13 = init(initialArg);
            } else {
              initialState13 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState13;
            var queue2 = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState13
            };
            hook.queue = queue2;
            var dispatch = queue2.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue2);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue2 = hook.queue;
            if (queue2 === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue2.lastRenderedReducer = reducer;
            var current3 = currentHook;
            var baseQueue = current3.baseQueue;
            var pendingQueue = queue2.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current3.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current3.baseQueue = baseQueue = pendingQueue;
              queue2.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current3.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update3 = first;
              do {
                var updateLane = update3.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone2 = {
                    lane: updateLane,
                    action: update3.action,
                    hasEagerState: update3.hasEagerState,
                    eagerState: update3.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone2;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone2;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update3.action,
                      hasEagerState: update3.hasEagerState,
                      eagerState: update3.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update3.hasEagerState) {
                    newState = update3.eagerState;
                  } else {
                    var action = update3.action;
                    newState = reducer(newState, action);
                  }
                }
                update3 = update3.next;
              } while (update3 !== null && update3 !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue2.lastRenderedState = newState;
            }
            var lastInterleaved = queue2.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue2.lanes = NoLanes;
            }
            var dispatch = queue2.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue2 = hook.queue;
            if (queue2 === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue2.lastRenderedReducer = reducer;
            var dispatch = queue2.dispatch;
            var lastRenderPhaseUpdate = queue2.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue2.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update3 = firstRenderPhaseUpdate;
              do {
                var action = update3.action;
                newState = reducer(newState, action);
                update3 = update3.next;
              } while (update3 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue2.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check3 = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check3];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check3];
              } else {
                stores.push(check3);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState13) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState13 === "function") {
              initialState13 = initialState13();
            }
            hook.memoizedState = hook.baseState = initialState13;
            var queue2 = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState13
            };
            hook.queue = queue2;
            var dispatch = queue2.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue2);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState13) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState13) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create4, destroy, deps) {
            var effect3 = {
              tag,
              create: create4,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect3.next = effect3;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect3.next = effect3;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect3;
                effect3.next = firstEffect;
                componentUpdateQueue.lastEffect = effect3;
              }
            }
            return effect3;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create4, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create4, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create4, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create4, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create4, destroy, nextDeps);
          }
          function mountEffect(create4, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create4, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create4, deps);
            }
          }
          function updateEffect(create4, deps) {
            return updateEffectImpl(Passive, Passive$1, create4, deps);
          }
          function mountInsertionEffect(create4, deps) {
            return mountEffectImpl(Update, Insertion, create4, deps);
          }
          function updateInsertionEffect(create4, deps) {
            return updateEffectImpl(Update, Insertion, create4, deps);
          }
          function mountLayoutEffect(create4, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout2, create4, deps);
          }
          function updateLayoutEffect(create4, deps) {
            return updateEffectImpl(Update, Layout2, create4, deps);
          }
          function imperativeHandleEffect(create4, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create4();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create4();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create4, deps) {
            {
              if (typeof create4 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create4 !== null ? typeof create4 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout2, imperativeHandleEffect.bind(null, create4, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create4, deps) {
            {
              if (typeof create4 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create4 !== null ? typeof create4 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout2, imperativeHandleEffect.bind(null, create4, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id2;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id2 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id2 += "H" + localId.toString(32);
              }
              id2 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id2 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id2;
            return id2;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id2 = hook.memoizedState;
            return id2;
          }
          function dispatchReducerAction(fiber, queue2, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update3 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue2, update3);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue2, update3, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue2, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue2, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update3 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue2, update3);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue2.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue2.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update3.hasEagerState = true;
                    update3.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue2, update3, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue2, update3, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue2, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue2, update3) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue2.pending;
            if (pending === null) {
              update3.next = update3;
            } else {
              update3.next = pending.next;
              pending.next = update3;
            }
            queue2.pending = update3;
          }
          function entangleTransitionUpdate(root2, queue2, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue2.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue2.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState13) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState13);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState13) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState13);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState13) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState13);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState13) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState13);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context2) {
                warnInvalidContextAccess();
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState13) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState13);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context2) {
                warnInvalidContextAccess();
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState13) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState13);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context2) {
                warnInvalidContextAccess();
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState13) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState13);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler2.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError2 = showErrorDialog(boundary, errorInfo);
              if (logError2 === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e2) {
              setTimeout(function() {
                throw e2;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update3 = createUpdate(NoTimestamp, lane);
            update3.tag = CaptureUpdate;
            update3.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update3.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update3;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update3 = createUpdate(NoTimestamp, lane);
            update3.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update3.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update3.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update3.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update3;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update3 = createUpdate(NoTimestamp, SyncLane);
                    update3.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update3, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update3 = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update3);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2) {
            if (current3 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current3, workInProgress2, Component71, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component71.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component71)
                  );
                }
              }
            }
            var render3 = Component71.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current3, workInProgress2, render3, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current3, workInProgress2, render3, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current3 !== null && !didReceiveUpdate) {
              bailoutHooks(current3, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current3, workInProgress2, Component71, nextProps, renderLanes2) {
            if (current3 === null) {
              var type = Component71.type;
              if (isSimpleFunctionComponent(type) && Component71.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component71.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current3, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component71.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component71.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current3.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current3, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare3 = Component71.compare;
              compare3 = compare3 !== null ? compare3 : shallowEqual2;
              if (compare3(prevProps, nextProps) && current3.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current3, workInProgress2, Component71, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current3 !== null) {
              var prevProps = current3.memoizedProps;
              if (shallowEqual2(prevProps, nextProps) && current3.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current3.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current3, renderLanes2)) {
                  workInProgress2.lanes = current3.lanes;
                  return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                } else if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current3, workInProgress2, Component71, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current3, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current3 !== null ? current3.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current3, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current3, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current3, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current3, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current3 === null && ref !== null || current3 !== null && current3.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current3, workInProgress2, Component71, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component71.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component71)
                  );
                }
              }
            }
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component71, true);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current3, workInProgress2, Component71, nextProps, context2, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current3, workInProgress2, Component71, nextProps, context2, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current3 !== null && !didReceiveUpdate) {
              bailoutHooks(current3, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current3, workInProgress2, Component71, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update3 = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update3);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component71.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component71)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component71)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current3, workInProgress2);
              constructClassInstance(workInProgress2, Component71, nextProps);
              mountClassInstance(workInProgress2, Component71, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current3 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component71, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current3, workInProgress2, Component71, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current3, workInProgress2, Component71, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current3, workInProgress2, Component71, shouldUpdate, hasContext, renderLanes2) {
            markRef(current3, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component71, false);
              }
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component71.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current3 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component71, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current3, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current3 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current3, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
              }
              reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current3, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current3 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current3 !== null ? current3.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current3, workInProgress2);
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current3, workInProgress2) {
            if (current3 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component71 = init(payload);
            workInProgress2.type = Component71;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component71);
            var resolvedProps = resolveDefaultProps(Component71, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component71);
                  workInProgress2.type = Component71 = resolveFunctionForHotReloading(Component71);
                }
                child = updateFunctionComponent(null, workInProgress2, Component71, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component71 = resolveClassForHotReloading(Component71);
                }
                child = updateClassComponent(null, workInProgress2, Component71, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component71 = resolveForwardRefForHotReloading(Component71);
                }
                child = updateForwardRef(null, workInProgress2, Component71, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component71.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component71)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component71,
                  resolveDefaultProps(Component71.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component71 !== null && typeof Component71 === "object" && Component71.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component71 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component71, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component71)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component71, nextProps);
            mountClassInstance(workInProgress2, Component71, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component71, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component71, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component71, false);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component71.prototype && typeof Component71.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component71) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component71, props, context2, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component71) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component71) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component71)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component71, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component71, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component71, props, context2, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component71);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component71) {
            {
              if (Component71) {
                if (Component71.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component71.displayName || Component71.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component71.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component71) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component71.contextType === "object" && Component71.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component71) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current3, workInProgress2, renderLanes2) {
            if (current3 !== null) {
              var suspenseState = current3.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current3, renderLanes2) {
            return removeLanes(current3.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current3, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current3)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current3 === null || current3.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current3 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current3.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current3, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current3, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current3.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current3, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current3, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current3, offscreenProps) {
            return createWorkInProgress(current3, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current3, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current3.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current3, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current3.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current3, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current3, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current3,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current3.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current3, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current3, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current3.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current3);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current3.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current3, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray3(childSlot);
              var isIterable2 = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable2) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray3(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current3, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current3 !== null && (current3.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current3, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current3 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current3, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context2 = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context2, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context2, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current3, workInProgress2, renderLanes2) {
            var context2 = workInProgress2.type;
            {
              if (context2._context === void 0) {
                if (context2 !== context2.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context2 = context2._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render3 = newProps.children;
            {
              if (typeof render3 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render3(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current3, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current3 !== null) {
                current3.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2) {
            if (current3 !== null) {
              workInProgress2.dependencies = current3.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current3, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current3, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current3.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current3];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current3);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current3, renderLanes2) {
            var updateLanes = current3.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component71 = workInProgress2.type;
                if (isContextProvider(Component71)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context2 = workInProgress2.type._context;
                pushProvider(workInProgress2, context2, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current3.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
          }
          function beginWork(current3, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current3 !== null) {
                return remountFiber(current3, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current3 !== null) {
              var oldProps = current3.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current3.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current3, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2);
                }
                if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current3, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current3, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component71 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component71 ? unresolvedProps : resolveDefaultProps(Component71, unresolvedProps);
                return updateFunctionComponent(current3, workInProgress2, Component71, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current3, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current3, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current3, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current3, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current3, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current3, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current3, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current3, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current3, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current3, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current3, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current3, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current3, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current3, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current3, workInProgress2) {
            };
            updateHostComponent$1 = function(current3, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current3.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current3, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current3, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current3 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current3, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component71 = workInProgress2.type;
                if (isContextProvider(Component71)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current3 === null || current3.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current3 !== null) {
                      var prevState = current3.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current3, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current3 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current3, workInProgress2, type, newProps, rootContainerInstance);
                  if (current3.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current3 && workInProgress2.stateNode != null) {
                  var oldText = current3.memoizedProps;
                  updateHostText$1(current3, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current3 === null || current3.memoizedState !== null && current3.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current3, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current3 !== null && current3.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current3 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current3, workInProgress2);
                if (current3 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context2 = workInProgress2.type._context;
                popProvider(context2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current3 === null || (current3.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current3 !== null) {
                  var _prevState = current3.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current3, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component71 = workInProgress2.type;
                if (isContextProvider(Component71)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context2 = workInProgress2.type._context;
                popProvider(context2, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current3, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context2 = interruptedWork.type._context;
                popProvider(context2, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current3, instance) {
            instance.props = current3.memoizedProps;
            instance.state = current3.memoizedState;
            if (current3.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current3);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current3, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout2, current3);
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current3, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current3, instance);
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current3, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current3, nearestMountedAncestor) {
            try {
              commitAttachRef(current3);
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current3, nearestMountedAncestor) {
            var ref = current3.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current3.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current3);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current3, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current3));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current3, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current3, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current3 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current3 !== null) {
                    var prevProps = current3.memoizedProps;
                    var prevState = current3.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect3 = firstEffect;
              do {
                if ((effect3.tag & flags) === flags) {
                  var destroy = effect3.destroy;
                  effect3.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout2) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout2) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect3 = effect3.next;
              } while (effect3 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect3 = firstEffect;
              do {
                if ((effect3.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout2) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create4 = effect3.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect3.destroy = create4();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout2) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect3.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect3.tag & Layout2) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect3.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect3 = effect3.next;
              } while (effect3 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id2 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id2, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current3, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current3 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current3.memoizedProps : resolveDefaultProps(finishedWork.type, current3.memoizedProps);
                        var prevState = current3.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current3 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current3 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect3 = firstEffect;
                      do {
                        var _effect = effect3, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout2) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect3 = effect3.next;
                      } while (effect3 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current3 = finishedWork.alternate;
              if (current3 !== null) {
                var prevState = current3.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current3 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current3 !== null) {
                    safelyDetachRef(current3, current3.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current3 !== null) {
                    safelyDetachRef(current3, current3.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current3 !== null ? current3.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current3 !== null ? current3.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current3 !== null) {
                      var prevRootState = current3.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current3 !== null && current3.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current3 = fiber.alternate;
                  var wasHidden = current3 !== null && current3.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current3 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current3, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current3, nearestMountedAncestor) {
            switch (current3.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current3.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current3, nearestMountedAncestor);
                  recordPassiveEffectDuration(current3);
                } else {
                  commitHookEffectListUnmount(Passive$1, current3, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout2 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout2 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor2 = Symbol.for;
            COMPONENT_TYPE = symbolFor2("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor2("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor2("selector.role");
            TEST_NAME_TYPE = symbolFor2("selector.test_id");
            TEXT_TYPE = symbolFor2("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil2 = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current3 = root2.current;
            current3.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check3 = checks[i2];
                      var getSnapshot = check3.getSnapshot;
                      var renderedValue = check3.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b2, c2, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b2, c2, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current3 = interruptedWork.alternate;
                unwindInterruptedWork(current3, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current3 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current3 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current3, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current3, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current3, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update3 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update3, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update3 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update3, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil2(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current3 = firstChild;
              var subtreeRoot = null;
              while (current3 !== null) {
                var primarySubtreeFlag = current3.subtreeFlags & fiberFlags;
                if (current3 !== subtreeRoot && current3.child !== null && primarySubtreeFlag !== NoFlags) {
                  current3 = current3.child;
                } else {
                  if ((current3.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current3);
                  }
                  if (current3.sibling !== null) {
                    current3 = current3.sibling;
                  } else {
                    current3 = subtreeRoot = current3.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current2;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current3, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current3, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current3, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current3, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current2;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update3) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update3.staleFamilies, updatedFamilies = update3.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e2) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component71) {
            var prototype = Component71.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component71) {
            if (typeof Component71 === "function") {
              return shouldConstruct$1(Component71) ? ClassComponent : FunctionComponent;
            } else if (Component71 !== void 0 && Component71 !== null) {
              var $$typeof = Component71.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current3, pendingProps) {
            var workInProgress2 = current3.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current3.tag, pendingProps, current3.key, current3.mode);
              workInProgress2.elementType = current3.elementType;
              workInProgress2.type = current3.type;
              workInProgress2.stateNode = current3.stateNode;
              {
                workInProgress2._debugSource = current3._debugSource;
                workInProgress2._debugOwner = current3._debugOwner;
                workInProgress2._debugHookTypes = current3._debugHookTypes;
              }
              workInProgress2.alternate = current3;
              current3.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current3.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current3.flags & StaticMask;
            workInProgress2.childLanes = current3.childLanes;
            workInProgress2.lanes = current3.lanes;
            workInProgress2.child = current3.child;
            workInProgress2.memoizedProps = current3.memoizedProps;
            workInProgress2.memoizedState = current3.memoizedState;
            workInProgress2.updateQueue = current3.updateQueue;
            var currentDependencies = current3.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current3.sibling;
            workInProgress2.index = current3.index;
            workInProgress2.ref = current3.ref;
            {
              workInProgress2.selfBaseDuration = current3.selfBaseDuration;
              workInProgress2.treeBaseDuration = current3.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current3._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current3.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current3.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current3.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current3 = workInProgress2.alternate;
            if (current3 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current3.childLanes;
              workInProgress2.lanes = current3.lanes;
              workInProgress2.child = current3.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current3.memoizedProps;
              workInProgress2.memoizedState = current3.memoizedState;
              workInProgress2.updateQueue = current3.updateQueue;
              workInProgress2.type = current3.type;
              var currentDependencies = current3.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current3.selfBaseDuration;
                workInProgress2.treeBaseDuration = current3.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal3(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component71 = fiber.type;
              if (isContextProvider(Component71)) {
                return processChildContext(fiber, Component71, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys3 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys3);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current2;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current3 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current3);
            var update3 = createUpdate(eventTime, lane);
            update3.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current3, update3, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context2 = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context2;
            } else {
              container.pendingContext = context2;
            }
            {
              if (isRendering && current2 !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current2) || "Unknown");
              }
            }
            var update3 = createUpdate(eventTime, lane);
            update3.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update3.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update3, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray3(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray3(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray3(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray3(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray3(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id2) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id2 > 0) {
                currentHook2 = currentHook2.next;
                id2--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id2, path, value) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id2, path) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current2;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode10(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render2(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has2(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal3(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM2 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode10;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render2;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports.createRoot = m2.createRoot;
        exports.hydrateRoot = m2.hydrateRoot;
      } else {
        i2 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c2, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c2, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c2, h, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c2, h, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object3) {
            if (typeof object3 === "object" && object3 !== null) {
              var $$typeof = object3.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object3.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object3) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object3) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer2(object3) {
            return typeOf(object3) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object3) {
            return typeOf(object3) === REACT_PROVIDER_TYPE;
          }
          function isElement(object3) {
            return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object3) {
            return typeOf(object3) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object3) {
            return typeOf(object3) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object3) {
            return typeOf(object3) === REACT_LAZY_TYPE;
          }
          function isMemo(object3) {
            return typeOf(object3) === REACT_MEMO_TYPE;
          }
          function isPortal(object3) {
            return typeOf(object3) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object3) {
            return typeOf(object3) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object3) {
            return typeOf(object3) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object3) {
            return typeOf(object3) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object3) {
            return typeOf(object3) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/shallowequal/index.js
  var require_shallowequal = __commonJS({
    "node_modules/shallowequal/index.js"(exports, module) {
      module.exports = function shallowEqual2(objA, objB, compare3, compareContext) {
        var ret = compare3 ? compare3.call(compareContext, objA, objB) : void 0;
        if (ret !== void 0) {
          return !!ret;
        }
        if (objA === objB) {
          return true;
        }
        if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
        for (var idx = 0; idx < keysA.length; idx++) {
          var key = keysA[idx];
          if (!bHasOwnProperty(key)) {
            return false;
          }
          var valueA = objA[key];
          var valueB = objB[key];
          ret = compare3 ? compare3.call(compareContext, valueA, valueB, key) : void 0;
          if (ret === false || ret === void 0 && valueA !== valueB) {
            return false;
          }
        }
        return true;
      };
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object3) {
            if (typeof object3 === "object" && object3 !== null) {
              var $$typeof = object3.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object3.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object3) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object3) || typeOf(object3) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object3) {
            return typeOf(object3) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer2(object3) {
            return typeOf(object3) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object3) {
            return typeOf(object3) === REACT_PROVIDER_TYPE;
          }
          function isElement(object3) {
            return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object3) {
            return typeOf(object3) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object3) {
            return typeOf(object3) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object3) {
            return typeOf(object3) === REACT_LAZY_TYPE;
          }
          function isMemo(object3) {
            return typeOf(object3) === REACT_MEMO_TYPE;
          }
          function isPortal(object3) {
            return typeOf(object3) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object3) {
            return typeOf(object3) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object3) {
            return typeOf(object3) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object3) {
            return typeOf(object3) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is2();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty4 = Object.defineProperty;
      var getOwnPropertyNames2 = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor3 = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys3 = getOwnPropertyNames2(sourceComponent);
          if (getOwnPropertySymbols) {
            keys3 = keys3.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i2 = 0; i2 < keys3.length; ++i2) {
            var key = keys3[i2];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor3(sourceComponent, key);
              try {
                defineProperty4(targetComponent, key, descriptor);
              } catch (e2) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
  var require_use_sync_external_store_shim_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React195 = require_react();
          var ReactSharedInternals = React195.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          function is2(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          var useState2 = React195.useState, useEffect2 = React195.useEffect, useLayoutEffect2 = React195.useLayoutEffect, useDebugValue2 = React195.useDebugValue;
          var didWarnOld18Alpha = false;
          var didWarnUncachedGetSnapshot = false;
          function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
            {
              if (!didWarnOld18Alpha) {
                if (React195.startTransition !== void 0) {
                  didWarnOld18Alpha = true;
                  error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
                }
              }
            }
            var value = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedValue = getSnapshot();
                if (!objectIs(value, cachedValue)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var _useState = useState2({
              inst: {
                value,
                getSnapshot
              }
            }), inst = _useState[0].inst, forceUpdate = _useState[1];
            useLayoutEffect2(function() {
              inst.value = value;
              inst.getSnapshot = getSnapshot;
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            }, [subscribe, value, getSnapshot]);
            useEffect2(function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
              var handleStoreChange = function() {
                if (checkIfSnapshotChanged(inst)) {
                  forceUpdate({
                    inst
                  });
                }
              };
              return subscribe(handleStoreChange);
            }, [subscribe]);
            useDebugValue2(value);
            return value;
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
            return getSnapshot();
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var isServerEnvironment = !canUseDOM2;
          var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore3;
          var useSyncExternalStore$2 = React195.useSyncExternalStore !== void 0 ? React195.useSyncExternalStore : shim;
          exports.useSyncExternalStore = useSyncExternalStore$2;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS({
    "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_use_sync_external_store_shim_development();
      }
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
  var require_with_selector_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React195 = require_react();
          var shim = require_shim();
          function is2(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          var useSyncExternalStore3 = shim.useSyncExternalStore;
          var useRef3 = React195.useRef, useEffect2 = React195.useEffect, useMemo3 = React195.useMemo, useDebugValue2 = React195.useDebugValue;
          function useSyncExternalStoreWithSelector3(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
            var instRef = useRef3(null);
            var inst;
            if (instRef.current === null) {
              inst = {
                hasValue: false,
                value: null
              };
              instRef.current = inst;
            } else {
              inst = instRef.current;
            }
            var _useMemo = useMemo3(function() {
              var hasMemo = false;
              var memoizedSnapshot;
              var memoizedSelection;
              var memoizedSelector = function(nextSnapshot) {
                if (!hasMemo) {
                  hasMemo = true;
                  memoizedSnapshot = nextSnapshot;
                  var _nextSelection = selector(nextSnapshot);
                  if (isEqual !== void 0) {
                    if (inst.hasValue) {
                      var currentSelection = inst.value;
                      if (isEqual(currentSelection, _nextSelection)) {
                        memoizedSelection = currentSelection;
                        return currentSelection;
                      }
                    }
                  }
                  memoizedSelection = _nextSelection;
                  return _nextSelection;
                }
                var prevSnapshot = memoizedSnapshot;
                var prevSelection = memoizedSelection;
                if (objectIs(prevSnapshot, nextSnapshot)) {
                  return prevSelection;
                }
                var nextSelection = selector(nextSnapshot);
                if (isEqual !== void 0 && isEqual(prevSelection, nextSelection)) {
                  return prevSelection;
                }
                memoizedSnapshot = nextSnapshot;
                memoizedSelection = nextSelection;
                return nextSelection;
              };
              var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
              var getSnapshotWithSelector = function() {
                return memoizedSelector(getSnapshot());
              };
              var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              };
              return [getSnapshotWithSelector, getServerSnapshotWithSelector];
            }, [getSnapshot, getServerSnapshot, selector, isEqual]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
            var value = useSyncExternalStore3(subscribe, getSelection, getServerSelection);
            useEffect2(function() {
              inst.hasValue = true;
              inst.value = value;
            }, [value]);
            useDebugValue2(value);
            return value;
          }
          exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector3;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/use-sync-external-store/shim/with-selector.js
  var require_with_selector = __commonJS({
    "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_with_selector_development();
      }
    }
  });

  // node_modules/is-mobile/index.js
  var require_is_mobile = __commonJS({
    "node_modules/is-mobile/index.js"(exports, module) {
      "use strict";
      module.exports = isMobile8;
      module.exports.isMobile = isMobile8;
      module.exports.default = isMobile8;
      var mobileRE = /(android|bb\d+|meego).+mobile|armv7l|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|samsungbrowser.*mobile|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;
      var notMobileRE = /CrOS/;
      var tabletRE = /android|ipad|playbook|silk/i;
      function isMobile8(opts) {
        if (!opts) opts = {};
        let ua = opts.ua;
        if (!ua && typeof navigator !== "undefined") ua = navigator.userAgent;
        if (ua && ua.headers && typeof ua.headers["user-agent"] === "string") {
          ua = ua.headers["user-agent"];
        }
        if (typeof ua !== "string") return false;
        let result = mobileRE.test(ua) && !notMobileRE.test(ua) || !!opts.tablet && tabletRE.test(ua);
        if (!result && opts.tablet && opts.featureDetect && navigator && navigator.maxTouchPoints > 1 && ua.indexOf("Macintosh") !== -1 && ua.indexOf("Safari") !== -1) {
          result = true;
        }
        return result;
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object3) {
            if (typeof object3 === "object" && object3 !== null) {
              var $$typeof = object3.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object3.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object3) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object3) || typeOf(object3) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object3) {
            return typeOf(object3) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer2(object3) {
            return typeOf(object3) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object3) {
            return typeOf(object3) === REACT_PROVIDER_TYPE;
          }
          function isElement(object3) {
            return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object3) {
            return typeOf(object3) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object3) {
            return typeOf(object3) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object3) {
            return typeOf(object3) === REACT_LAZY_TYPE;
          }
          function isMemo(object3) {
            return typeOf(object3) === REACT_MEMO_TYPE;
          }
          function isPortal(object3) {
            return typeOf(object3) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object3) {
            return typeOf(object3) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object3) {
            return typeOf(object3) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object3) {
            return typeOf(object3) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty3 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject2(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i2 = 0; i2 < 10; i2++) {
            test2["_" + String.fromCharCode(i2)] = i2;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
            return test2[n2];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject2(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from2 = Object(arguments[s2]);
          for (var key in from2) {
            if (hasOwnProperty3.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              if (propIsEnumerable.call(from2, symbols[i2])) {
                to[symbols[i2]] = from2[symbols[i2]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has2 = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has2;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is3();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has2 = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is2(x2, y2) {
          if (x2 === y2) {
            return x2 !== 0 || 1 / x2 === 1 / y2;
          } else {
            return x2 !== x2 && y2 !== y2;
          }
        }
        function PropTypeError(message, data2) {
          this.message = message;
          this.data = data2 && typeof data2 === "object" ? data2 : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate2) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate2(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate2(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate2);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate2(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i2 = 0; i2 < propValue.length; i2++) {
              var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate2);
        }
        function createElementTypeChecker() {
          function validate2(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate2);
        }
        function createElementTypeTypeChecker() {
          function validate2(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate2);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate2(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate2);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate2(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i2 = 0; i2 < expectedValues.length; i2++) {
              if (is2(propValue, expectedValues[i2])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate2);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate2(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has2(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate2);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker = arrayOfTypeCheckers[i2];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate2(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
              var checker2 = arrayOfTypeCheckers[i3];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate2);
        }
        function createNodeChecker() {
          function validate2(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate2);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate2(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate2);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate2(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has2(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate2);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator4 = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator4.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator4.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol2(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol2(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is3();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/@ls1intum/apollon/lib/es6/packages/diagram-type.js
  var UMLDiagramType = {
    ClassDiagram: "ClassDiagram",
    ObjectDiagram: "ObjectDiagram",
    ActivityDiagram: "ActivityDiagram",
    UseCaseDiagram: "UseCaseDiagram",
    CommunicationDiagram: "CommunicationDiagram",
    ComponentDiagram: "ComponentDiagram",
    DeploymentDiagram: "DeploymentDiagram",
    PetriNet: "PetriNet",
    ReachabilityGraph: "ReachabilityGraph",
    SyntaxTree: "SyntaxTree",
    Flowchart: "Flowchart",
    BPMN: "BPMN"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/index.js
  var ActivityElementType = {
    Activity: "Activity",
    ActivityActionNode: "ActivityActionNode",
    ActivityFinalNode: "ActivityFinalNode",
    ActivityForkNode: "ActivityForkNode",
    ActivityForkNodeHorizontal: "ActivityForkNodeHorizontal",
    ActivityInitialNode: "ActivityInitialNode",
    ActivityMergeNode: "ActivityMergeNode",
    ActivityObjectNode: "ActivityObjectNode"
  };
  var ActivityRelationshipType = {
    ActivityControlFlow: "ActivityControlFlow"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/index.js
  var ClassElementType = {
    Package: "Package",
    Class: "Class",
    AbstractClass: "AbstractClass",
    Interface: "Interface",
    Enumeration: "Enumeration",
    ClassAttribute: "ClassAttribute",
    ClassMethod: "ClassMethod"
  };
  var ClassRelationshipType = {
    ClassBidirectional: "ClassBidirectional",
    ClassUnidirectional: "ClassUnidirectional",
    ClassInheritance: "ClassInheritance",
    ClassRealization: "ClassRealization",
    ClassDependency: "ClassDependency",
    ClassAggregation: "ClassAggregation",
    ClassComposition: "ClassComposition"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/index.js
  var ComponentElementType = {
    Component: "Component",
    Subsystem: "Subsystem",
    ComponentInterface: "ComponentInterface"
  };
  var ComponentRelationshipType = {
    ComponentInterfaceProvided: "ComponentInterfaceProvided",
    ComponentInterfaceRequired: "ComponentInterfaceRequired",
    ComponentDependency: "ComponentDependency"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/index.js
  var DeploymentElementType = {
    DeploymentNode: "DeploymentNode",
    DeploymentComponent: "DeploymentComponent",
    DeploymentArtifact: "DeploymentArtifact",
    DeploymentInterface: "DeploymentInterface"
  };
  var DeploymentRelationshipType = {
    DeploymentAssociation: "DeploymentAssociation",
    DeploymentInterfaceProvided: "DeploymentInterfaceProvided",
    DeploymentInterfaceRequired: "DeploymentInterfaceRequired",
    DeploymentDependency: "DeploymentDependency"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-object-diagram/index.js
  var ObjectElementType = {
    ObjectName: "ObjectName",
    ObjectAttribute: "ObjectAttribute",
    ObjectMethod: "ObjectMethod"
  };
  var ObjectRelationshipType = {
    ObjectLink: "ObjectLink"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/index.js
  var UseCaseElementType = {
    UseCase: "UseCase",
    UseCaseActor: "UseCaseActor",
    UseCaseSystem: "UseCaseSystem"
  };
  var UseCaseRelationshipType = {
    UseCaseAssociation: "UseCaseAssociation",
    UseCaseGeneralization: "UseCaseGeneralization",
    UseCaseInclude: "UseCaseInclude",
    UseCaseExtend: "UseCaseExtend"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/index.js
  var PetriNetElementType = {
    PetriNetPlace: "PetriNetPlace",
    PetriNetTransition: "PetriNetTransition"
  };
  var PetriNetRelationshipType = {
    PetriNetArc: "PetriNetArc"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-communication-diagram/index.js
  var CommunicationRelationshipType = {
    CommunicationLink: "CommunicationLink"
  };
  var CommunicationElementType = {
    CommunicationLinkMessage: "CommunicationLinkMessage"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/index.js
  var SyntaxTreeElementType = {
    SyntaxTreeTerminal: "SyntaxTreeTerminal",
    SyntaxTreeNonterminal: "SyntaxTreeNonterminal"
  };
  var SyntaxTreeRelationshipType = {
    SyntaxTreeLink: "SyntaxTreeLink"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/index.js
  var FlowchartElementType = {
    FlowchartTerminal: "FlowchartTerminal",
    FlowchartProcess: "FlowchartProcess",
    FlowchartDecision: "FlowchartDecision",
    FlowchartInputOutput: "FlowchartInputOutput",
    FlowchartFunctionCall: "FlowchartFunctionCall"
  };
  var FlowchartRelationshipType = {
    FlowchartFlowline: "FlowchartFlowline"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/color-legend/index.js
  var ColorLegendElementType = {
    ColorLegend: "ColorLegend"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-reachability-graph/index.js
  var ReachabilityGraphElementType = {
    ReachabilityGraphMarking: "ReachabilityGraphMarking"
  };
  var ReachabilityGraphRelationshipType = {
    ReachabilityGraphArc: "ReachabilityGraphArc"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/index.js
  var BPMNElementType = {
    BPMNTask: "BPMNTask",
    BPMNSubprocess: "BPMNSubprocess",
    BPMNTransaction: "BPMNTransaction",
    BPMNCallActivity: "BPMNCallActivity",
    BPMNAnnotation: "BPMNAnnotation",
    BPMNStartEvent: "BPMNStartEvent",
    BPMNIntermediateEvent: "BPMNIntermediateEvent",
    BPMNEndEvent: "BPMNEndEvent",
    BPMNGateway: "BPMNGateway",
    BPMNDataObject: "BPMNDataObject",
    BPMNDataStore: "BPMNDataStore",
    BPMNPool: "BPMNPool",
    BPMNSwimlane: "BPMNSwimlane",
    BPMNGroup: "BPMNGroup"
  };
  var BPMNRelationshipType = {
    BPMNFlow: "BPMNFlow"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-element-type.js
  var UMLElementType = {
    ...ClassElementType,
    ...ObjectElementType,
    ...ActivityElementType,
    ...UseCaseElementType,
    ...CommunicationElementType,
    ...ComponentElementType,
    ...DeploymentElementType,
    ...PetriNetElementType,
    ...ReachabilityGraphElementType,
    ...SyntaxTreeElementType,
    ...FlowchartElementType,
    ...ColorLegendElementType,
    ...BPMNElementType
  };
  var UMLElementsForDiagram = {
    ...{
      [UMLDiagramType.ClassDiagram]: ClassElementType,
      [UMLDiagramType.ObjectDiagram]: ObjectElementType,
      [UMLDiagramType.ActivityDiagram]: ActivityElementType,
      [UMLDiagramType.UseCaseDiagram]: UseCaseElementType,
      [UMLDiagramType.CommunicationDiagram]: CommunicationElementType,
      [UMLDiagramType.ComponentDiagram]: ComponentElementType,
      [UMLDiagramType.DeploymentDiagram]: DeploymentElementType,
      [UMLDiagramType.PetriNet]: PetriNetElementType,
      [UMLDiagramType.ReachabilityGraph]: ReachabilityGraphElementType,
      [UMLDiagramType.SyntaxTree]: SyntaxTreeElementType,
      [UMLDiagramType.Flowchart]: FlowchartElementType,
      [UMLDiagramType.BPMN]: BPMNElementType
    },
    ...ColorLegendElementType
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-relationship-type.js
  var UMLRelationshipType = {
    ...ClassRelationshipType,
    ...ObjectRelationshipType,
    ...ActivityRelationshipType,
    ...UseCaseRelationshipType,
    ...CommunicationRelationshipType,
    ...ComponentRelationshipType,
    ...DeploymentRelationshipType,
    ...PetriNetRelationshipType,
    ...ReachabilityGraphRelationshipType,
    ...SyntaxTreeRelationshipType,
    ...FlowchartRelationshipType,
    ...BPMNRelationshipType
  };
  var DefaultUMLRelationshipType = {
    [UMLDiagramType.ClassDiagram]: ClassRelationshipType.ClassBidirectional,
    [UMLDiagramType.ObjectDiagram]: ObjectRelationshipType.ObjectLink,
    [UMLDiagramType.ActivityDiagram]: ActivityRelationshipType.ActivityControlFlow,
    [UMLDiagramType.UseCaseDiagram]: UseCaseRelationshipType.UseCaseAssociation,
    [UMLDiagramType.CommunicationDiagram]: CommunicationRelationshipType.CommunicationLink,
    [UMLDiagramType.ComponentDiagram]: ComponentRelationshipType.ComponentInterfaceProvided,
    [UMLDiagramType.DeploymentDiagram]: DeploymentRelationshipType.DeploymentAssociation,
    [UMLDiagramType.PetriNet]: PetriNetRelationshipType.PetriNetArc,
    [UMLDiagramType.ReachabilityGraph]: ReachabilityGraphRelationshipType.ReachabilityGraphArc,
    [UMLDiagramType.SyntaxTree]: SyntaxTreeRelationshipType.SyntaxTreeLink,
    [UMLDiagramType.Flowchart]: FlowchartRelationshipType.FlowchartFlowline,
    [UMLDiagramType.BPMN]: BPMNRelationshipType.BPMNFlow
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/editor/editor-types.js
  var Locale;
  (function(Locale2) {
    Locale2["en"] = "en";
    Locale2["de"] = "de";
  })(Locale || (Locale = {}));
  var ApollonMode;
  (function(ApollonMode2) {
    ApollonMode2["Modelling"] = "Modelling";
    ApollonMode2["Exporting"] = "Exporting";
    ApollonMode2["Assessment"] = "Assessment";
  })(ApollonMode || (ApollonMode = {}));

  // node_modules/@ls1intum/apollon/lib/es6/apollon-editor.js
  var import_pepjs = __toESM(require_pep());
  var import_react200 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // node_modules/@ls1intum/apollon/lib/es6/utils/fx/assign.js
  var assign = (target, source) => {
    for (const key in source) {
      if (Array.isArray(source[key])) {
        if (key === "selectedBy" && target[key] === void 0) {
          target[key] = [...assign({ ...target, selectedBy: [] }[key], source[key])];
        } else {
          target[key] = [...assign(target[key], source[key])];
        }
      } else if (typeof source[key] === "object") {
        if (source[key] == null) {
          target[key] = null;
        } else {
          target[key] = { ...target[key], ...assign(target[key], source[key]) };
        }
      } else if (source[key] !== void 0) {
        if (target === void 0) {
          target = {};
        }
        target[key] = source[key];
      }
    }
    return target;
  };

  // node_modules/@ls1intum/apollon/lib/es6/utils/geometry/point.js
  var Point = class _Point {
    constructor(x2 = 0, y2 = 0) {
      this.x = x2;
      this.y = y2;
    }
    get length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    normalize() {
      return new _Point(this.x / this.length, this.y / this.length);
    }
    add(x2, y2) {
      if (x2 instanceof _Point) {
        return new _Point(this.x + x2.x, this.y + x2.y);
      }
      if (typeof y2 === "number") {
        return new _Point(this.x + x2, this.y + y2);
      }
      return this.clone();
    }
    subtract(x2, y2) {
      if (x2 instanceof _Point) {
        return new _Point(this.x - x2.x, this.y - x2.y);
      }
      if (typeof y2 === "number") {
        return new _Point(this.x - x2, this.y - y2);
      }
      return this.clone();
    }
    round(radix = 10) {
      return new _Point(Math.round(this.x / radix) * radix, Math.round(this.y / radix) * radix);
    }
    scale(factor) {
      return new _Point(this.x * factor, this.y * factor);
    }
    clone() {
      return new _Point(this.x, this.y);
    }
  };

  // node_modules/uuid/dist/esm-browser/rng.js
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }

  // node_modules/uuid/dist/esm-browser/stringify.js
  var byteToHex = [];
  for (let i2 = 0; i2 < 256; ++i2) {
    byteToHex.push((i2 + 256).toString(16).slice(1));
  }
  function unsafeStringify(arr, offset = 0) {
    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
  }

  // node_modules/uuid/dist/esm-browser/native.js
  var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
  var native_default = {
    randomUUID
  };

  // node_modules/uuid/dist/esm-browser/v4.js
  function v4(options, buf, offset) {
    if (native_default.randomUUID && !buf && !options) {
      return native_default.randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i2 = 0; i2 < 16; ++i2) {
        buf[offset + i2] = rnds[i2];
      }
      return buf;
    }
    return unsafeStringify(rnds);
  }
  var v4_default = v4;

  // node_modules/@ls1intum/apollon/lib/es6/utils/uuid.js
  var uuid = v4_default;

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/uml-element-port.js
  var Direction;
  (function(Direction2) {
    Direction2["Up"] = "Up";
    Direction2["Right"] = "Right";
    Direction2["Down"] = "Down";
    Direction2["Left"] = "Left";
    Direction2["Upright"] = "Upright";
    Direction2["Upleft"] = "Upleft";
    Direction2["Downright"] = "Downright";
    Direction2["Downleft"] = "Downleft";
    Direction2["Topright"] = "Topright";
    Direction2["Topleft"] = "Topleft";
    Direction2["Bottomright"] = "Bottomright";
    Direction2["Bottomleft"] = "Bottomleft";
  })(Direction || (Direction = {}));
  function getOppositeDirection(direction) {
    switch (direction) {
      case Direction.Down:
        return Direction.Up;
      case Direction.Left:
        return Direction.Right;
      case Direction.Right:
        return Direction.Left;
      case Direction.Up:
        return Direction.Down;
      case Direction.Upright:
        return Direction.Upleft;
      case Direction.Downright:
        return Direction.Downleft;
      case Direction.Upleft:
        return Direction.Upright;
      case Direction.Downleft:
        return Direction.Downright;
      case Direction.Topright:
        return Direction.Topleft;
      case Direction.Bottomright:
        return Direction.Bottomleft;
      case Direction.Topleft:
        return Direction.Topright;
      case Direction.Bottomleft:
        return Direction.Bottomright;
      default:
        throw Error(`Could not determine opposite direction for direction of ${direction}`);
    }
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/uml-element.js
  var getPortsForElement = (element) => {
    return {
      [Direction.Up]: new Point(element.bounds.width / 2, 0),
      [Direction.Right]: new Point(element.bounds.width, element.bounds.height / 2),
      [Direction.Down]: new Point(element.bounds.width / 2, element.bounds.height),
      [Direction.Left]: new Point(0, element.bounds.height / 2),
      [Direction.Upright]: new Point(element.bounds.width, element.bounds.height / 4),
      [Direction.Downright]: new Point(element.bounds.width, 3 * element.bounds.height / 4),
      [Direction.Upleft]: new Point(0, element.bounds.height / 4),
      [Direction.Downleft]: new Point(0, 3 * element.bounds.height / 4),
      [Direction.Topright]: new Point(3 * element.bounds.width / 4, 0),
      [Direction.Bottomright]: new Point(3 * element.bounds.width / 4, element.bounds.height),
      [Direction.Topleft]: new Point(element.bounds.width / 4, 0),
      [Direction.Bottomleft]: new Point(element.bounds.width / 4, element.bounds.height)
    };
  };
  var UMLElement = class {
    constructor(values) {
      this.id = uuid();
      this.name = "";
      this.bounds = { x: 0, y: 0, width: 160, height: 100 };
      this.owner = null;
      this.resizeFrom = "bottomRight";
      assign(this, values);
    }
    /**
     * Clones an instance of `UMLElement`
     *
     * @param override - Override existing properties.
     */
    clone(override) {
      const Constructor = this.constructor;
      const values = { ...this, ...override, id: uuid() };
      return new Constructor(values);
    }
    /** Serializes an `UMLElement` to an `Apollon.UMLElement` */
    serialize(children) {
      return {
        id: this.id,
        name: this.name,
        type: this.type,
        owner: this.owner,
        bounds: this.bounds,
        highlight: this.highlight,
        fillColor: this.fillColor,
        strokeColor: this.strokeColor,
        textColor: this.textColor,
        assessmentNote: this.assessmentNote
      };
    }
    /** Deserializes an `Apollon.UMLElement` to an `UMLElement` */
    deserialize(values, children) {
      this.id = values.id;
      this.name = values.name;
      this.type = values.type;
      this.owner = values.owner || null;
      this.bounds = { ...values.bounds };
      this.highlight = values.highlight;
      this.fillColor = values.fillColor;
      this.strokeColor = values.strokeColor;
      this.textColor = values.textColor;
      this.assessmentNote = values.assessmentNote;
    }
  };
  UMLElement.features = {
    connectable: true,
    droppable: false,
    hoverable: true,
    movable: true,
    resizable: true,
    selectable: true,
    updatable: true,
    alternativePortVisualization: false
  };
  UMLElement.supportedRelationships = [];
  UMLElement.isUMLElement = (element) => element.type in UMLElementType;

  // node_modules/@ls1intum/apollon/lib/es6/utils/geometry/boundary.js
  function computeBoundingBox(points) {
    if (points.length === 0) {
      return { x: 0, y: 0, width: 0, height: 0 };
    }
    const firstPoint = points[0];
    let minX = firstPoint.x;
    let minY = firstPoint.y;
    let maxX = firstPoint.x;
    let maxY = firstPoint.y;
    for (const p of points) {
      if (p.x < minX)
        minX = p.x;
      if (p.y < minY)
        minY = p.y;
      if (p.x > maxX)
        maxX = p.x;
      if (p.y > maxY)
        maxY = p.y;
    }
    return {
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY
    };
  }
  function computeBoundingBoxForElements(elements) {
    if (!elements.length) {
      return { x: 0, y: 0, width: 0, height: 0 };
    }
    const boundaries = elements.map((element) => ({ ...element.bounds }));
    const x2 = Math.min(...boundaries.map((bounds) => bounds.x));
    const y2 = Math.min(...boundaries.map((bounds) => bounds.y));
    const width = Math.max(...boundaries.map((bounds) => bounds.x + bounds.width)) - x2;
    const height = Math.max(...boundaries.map((bounds) => bounds.y + bounds.height)) - y2;
    return { x: x2, y: y2, width, height };
  }
  function computeDimension(scale, value, isCircle) {
    if (isCircle && scale === 1) {
      return value * scale;
    } else {
      return Math.round(value * scale / 10) * 10;
    }
  }
  var areBoundsIntersecting = (bounds, intersectingBounds) => {
    const cornerPoints = [
      { x: bounds.x, y: bounds.y },
      { x: bounds.x + bounds.width, y: bounds.y },
      { x: bounds.x + bounds.width, y: bounds.y + bounds.height },
      { x: bounds.x, y: bounds.y + bounds.height }
    ];
    const intersectingBoundsStartX = Math.min(intersectingBounds.x, intersectingBounds.x + intersectingBounds.width);
    const intersectingBoundsEndX = Math.max(intersectingBounds.x, intersectingBounds.x + intersectingBounds.width);
    const intersectingBoundsStartY = Math.min(intersectingBounds.y, intersectingBounds.y + intersectingBounds.height);
    const intersectingBoundsEndY = Math.max(intersectingBounds.y, intersectingBounds.y + intersectingBounds.height);
    return cornerPoints.some((point) => intersectingBoundsStartX <= point.x && point.x <= intersectingBoundsEndX && intersectingBoundsStartY <= point.y && point.y <= intersectingBoundsEndY);
  };

  // node_modules/@ls1intum/apollon/lib/es6/utils/svg/text.js
  var Text = class {
  };
  Text.size = (layer, value, styles) => {
    const svg = layer.layer;
    if (!svg) {
      return { width: 0, height: 0 };
    }
    const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
    Object.assign(text.style, {
      ...styles,
      visibility: "hidden"
    });
    text.appendChild(document.createTextNode(value));
    svg.appendChild(text);
    const bounds = text.getBBox();
    svg.removeChild(text);
    return { width: bounds.width, height: bounds.height };
  };

  // node_modules/@ls1intum/apollon/lib/es6/utils/name-bounds.js
  function calculateNameBounds(element, layer) {
    const radix = 10;
    const nameBounds = {
      x: element.bounds.x,
      y: element.bounds.y,
      width: Math.round((Text.size(layer, element.name, { fontWeight: "bold" }).width + 20) / radix) * radix,
      height: Math.round((Text.size(layer, element.name, { fontWeight: "bold" }).height + 20) / radix) * radix
    };
    return computeBoundingBoxForElements([element, { bounds: nameBounds }]);
  }

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-action-node/uml-activity-action-node.js
  var UMLActivityActionNode = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = ActivityElementType.ActivityActionNode;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };
  UMLActivityActionNode.supportedRelationships = [ActivityRelationshipType.ActivityControlFlow];

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-final-node/uml-activity-final-node.js
  var UMLActivityFinalNode = class extends UMLElement {
    constructor(values) {
      super(values);
      this.type = ActivityElementType.ActivityFinalNode;
      this.bounds = { ...this.bounds, width: 50, height: 50 };
      assign(this, values);
    }
    render(canvas) {
      return [this];
    }
  };
  UMLActivityFinalNode.supportedRelationships = [ActivityRelationshipType.ActivityControlFlow];
  UMLActivityFinalNode.features = { ...UMLElement.features, resizable: false, updatable: false };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-fork-node/uml-activity-fork-node.js
  var UMLActivityForkNode = class _UMLActivityForkNode extends UMLElement {
    constructor(values) {
      super(values);
      this.type = ActivityElementType.ActivityForkNode;
      this.bounds = {
        ...this.bounds
      };
      this.bounds.height = values && values.bounds && values.bounds.height || _UMLActivityForkNode.defaultHeight;
      this.bounds.width = _UMLActivityForkNode.defaultWidth;
    }
    render(layer) {
      this.bounds.height = Math.max(this.bounds.height, _UMLActivityForkNode.defaultHeight);
      return [this];
    }
  };
  UMLActivityForkNode.supportedRelationships = [ActivityRelationshipType.ActivityControlFlow];
  UMLActivityForkNode.features = { ...UMLElement.features, updatable: false };
  UMLActivityForkNode.defaultWidth = 20;
  UMLActivityForkNode.defaultHeight = 60;

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-fork-node-horizontal/uml-activity-fork-node-horizontal.js
  var UMLActivityForkNodeHorizontal = class _UMLActivityForkNodeHorizontal extends UMLElement {
    constructor(values) {
      super(values);
      this.type = ActivityElementType.ActivityForkNodeHorizontal;
      this.bounds = {
        ...this.bounds
      };
      this.bounds.width = values && values.bounds && values.bounds.width || _UMLActivityForkNodeHorizontal.defaultWidth;
      this.bounds.height = _UMLActivityForkNodeHorizontal.defaultHeight;
    }
    render(layer) {
      this.bounds.width = Math.max(this.bounds.width, _UMLActivityForkNodeHorizontal.defaultWidth);
      return [this];
    }
  };
  UMLActivityForkNodeHorizontal.supportedRelationships = [ActivityRelationshipType.ActivityControlFlow];
  UMLActivityForkNodeHorizontal.features = { ...UMLElement.features, updatable: false };
  UMLActivityForkNodeHorizontal.defaultWidth = 60;
  UMLActivityForkNodeHorizontal.defaultHeight = 20;

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-initial-node/uml-activity-initial-node.js
  var UMLActivityInitialNode = class extends UMLElement {
    constructor(values) {
      super(values);
      this.type = ActivityElementType.ActivityInitialNode;
      this.bounds = { ...this.bounds, width: 50, height: 50 };
      assign(this, values);
    }
    render(canvas) {
      return [this];
    }
  };
  UMLActivityInitialNode.supportedRelationships = [ActivityRelationshipType.ActivityControlFlow];
  UMLActivityInitialNode.features = { ...UMLElement.features, resizable: false, updatable: false };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-merge-node/uml-activity-merge-node.js
  var UMLActivityMergeNode = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = ActivityElementType.ActivityMergeNode;
      this.bounds = { ...this.bounds };
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };
  UMLActivityMergeNode.supportedRelationships = [ActivityRelationshipType.ActivityControlFlow];

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-object-node/uml-activity-object-node.js
  var UMLActivityObjectNode = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = ActivityElementType.ActivityObjectNode;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };
  UMLActivityObjectNode.supportedRelationships = [ActivityRelationshipType.ActivityControlFlow];

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-container/uml-container.js
  var UMLContainer = class extends UMLElement {
    constructor(values) {
      super();
      this.ownedElements = [];
      assign(this, values);
    }
    /**
     * reorders children -> default, do nothing
     */
    reorderChildren(children) {
      return children.map((child) => child.id);
    }
    /** Serializes an `UMLElement` to an `Apollon.UMLElement` */
    serialize(children) {
      return {
        ...super.serialize(children),
        type: this.type
      };
    }
    deserialize(values, children = []) {
      super.deserialize(values);
      this.ownedElements = children.map((child) => child.id);
    }
  };
  UMLContainer.features = { ...UMLElement.features, droppable: true };
  UMLContainer.isUMLContainer = (element) => "ownedElements" in element;

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-package/uml-package.js
  var UMLPackage = class extends UMLContainer {
    render(layer, children = [], calculateWithoutChildren) {
      const calculatedNamedBounds = calculateNameBounds(this, layer);
      const absoluteElements = children.map((element) => {
        element.bounds.x += this.bounds.x;
        element.bounds.y += this.bounds.y;
        return element;
      });
      let bounds = computeBoundingBoxForElements([{ bounds: calculatedNamedBounds }, ...absoluteElements]);
      if (calculateWithoutChildren) {
        bounds = calculatedNamedBounds;
      }
      const relativeElements = absoluteElements.map((element) => {
        element.bounds.x -= this.bounds.x;
        element.bounds.y -= this.bounds.y;
        return element;
      });
      const deltaX = bounds.x - this.bounds.x;
      const deltaY = bounds.y - this.bounds.y;
      relativeElements.forEach((child) => {
        child.bounds.x -= deltaX;
        child.bounds.y -= deltaY;
      });
      this.bounds = bounds;
      return [this, ...relativeElements];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity/uml-activity.js
  var UMLActivity = class extends UMLPackage {
    constructor() {
      super(...arguments);
      this.type = ActivityElementType.Activity;
    }
  };
  UMLActivity.supportedRelationships = [ActivityRelationshipType.ActivityControlFlow];

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier-member.js
  var UMLClassifierMember = class extends UMLElement {
    constructor(values) {
      super(values);
      this.bounds = { ...this.bounds, height: computeDimension(1, 30) };
      assign(this, values);
    }
    render(layer) {
      const radix = 10;
      const width = Text.size(layer, this.name).width + 20;
      this.bounds.width = Math.max(this.bounds.width, Math.round(width / radix) * radix);
      return [this];
    }
  };
  UMLClassifierMember.features = {
    ...UMLElement.features,
    hoverable: false,
    selectable: false,
    movable: false,
    resizable: false,
    connectable: false,
    droppable: false,
    updatable: false
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier-attribute.js
  var UMLClassifierAttribute = class extends UMLClassifierMember {
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier-method.js
  var UMLClassifierMethod = class extends UMLClassifierMember {
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier.js
  var UMLClassifier = class _UMLClassifier extends UMLContainer {
    get headerHeight() {
      return this.stereotype ? _UMLClassifier.stereotypeHeaderHeight : _UMLClassifier.nonStereotypeHeaderHeight;
    }
    constructor(values) {
      super();
      this.italic = false;
      this.underline = false;
      this.stereotype = null;
      this.deviderPosition = 0;
      this.hasAttributes = false;
      this.hasMethods = false;
      assign(this, values);
    }
    serialize(children = []) {
      return {
        ...super.serialize(children),
        type: this.type,
        attributes: children.filter((x2) => x2 instanceof UMLClassifierAttribute).map((x2) => x2.id),
        methods: children.filter((x2) => x2 instanceof UMLClassifierMethod).map((x2) => x2.id)
      };
    }
    render(layer, children = []) {
      const attributes = children.filter((x2) => x2 instanceof UMLClassifierAttribute);
      const methods = children.filter((x2) => x2 instanceof UMLClassifierMethod);
      this.hasAttributes = attributes.length > 0;
      this.hasMethods = methods.length > 0;
      const radix = 10;
      this.bounds.width = [this, ...attributes, ...methods].reduce((current2, child, index) => Math.max(current2, Math.round((Text.size(layer, child.name, index === 0 ? { fontWeight: "bold" } : void 0).width + 20) / radix) * radix), Math.round(this.bounds.width / radix) * radix);
      let y2 = this.headerHeight;
      for (const attribute of attributes) {
        attribute.bounds.x = 0.5;
        attribute.bounds.y = y2 + 0.5;
        attribute.bounds.width = this.bounds.width - 1;
        y2 += attribute.bounds.height;
      }
      this.deviderPosition = y2;
      for (const method of methods) {
        method.bounds.x = 0.5;
        method.bounds.y = y2 + 0.5;
        method.bounds.width = this.bounds.width - 1;
        y2 += method.bounds.height;
      }
      this.bounds.height = y2;
      return [this, ...attributes, ...methods];
    }
  };
  UMLClassifier.features = {
    ...UMLContainer.features,
    droppable: false,
    resizable: "WIDTH"
  };
  UMLClassifier.stereotypeHeaderHeight = 50;
  UMLClassifier.nonStereotypeHeaderHeight = 40;

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-abstract-class/uml-abstract-class.js
  var UMLAbstractClass = class extends UMLClassifier {
    constructor() {
      super(...arguments);
      this.type = ClassElementType.AbstractClass;
      this.italic = true;
      this.stereotype = "abstract";
    }
    reorderChildren(children) {
      const attributes = children.filter((x2) => x2.type === ClassElementType.ClassAttribute);
      const methods = children.filter((x2) => x2.type === ClassElementType.ClassMethod);
      return [...attributes.map((element) => element.id), ...methods.map((element) => element.id)];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-attribute/uml-class-attribute.js
  var UMLClassAttribute = class extends UMLClassifierAttribute {
    constructor() {
      super(...arguments);
      this.type = ClassElementType.ClassAttribute;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-method/uml-class-method.js
  var UMLClassMethod = class extends UMLClassifierMethod {
    constructor() {
      super(...arguments);
      this.type = ClassElementType.ClassMethod;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-package/uml-class-package.js
  var UMLClassPackage = class extends UMLPackage {
    constructor() {
      super(...arguments);
      this.type = ClassElementType.Package;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class/uml-class.js
  var UMLClass = class extends UMLClassifier {
    constructor() {
      super(...arguments);
      this.type = ClassElementType.Class;
    }
    reorderChildren(children) {
      const attributes = children.filter((x2) => x2.type === ClassElementType.ClassAttribute);
      const methods = children.filter((x2) => x2.type === ClassElementType.ClassMethod);
      return [...attributes.map((element) => element.id), ...methods.map((element) => element.id)];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-enumeration/uml-enumeration.js
  var UMLEnumeration = class extends UMLClassifier {
    constructor() {
      super(...arguments);
      this.type = ClassElementType.Enumeration;
      this.stereotype = "enumeration";
    }
    reorderChildren(children) {
      const attributes = children.filter((x2) => x2.type === ClassElementType.ClassAttribute);
      const methods = children.filter((x2) => x2.type === ClassElementType.ClassMethod);
      return [...attributes.map((element) => element.id), ...methods.map((element) => element.id)];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-interface/uml-interface.js
  var UMLInterface = class extends UMLClassifier {
    constructor() {
      super(...arguments);
      this.type = ClassElementType.Interface;
      this.stereotype = "interface";
    }
    reorderChildren(children) {
      const attributes = children.filter((x2) => x2.type === ClassElementType.ClassAttribute);
      const methods = children.filter((x2) => x2.type === ClassElementType.ClassMethod);
      return [...attributes.map((element) => element.id), ...methods.map((element) => element.id)];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-interface/uml-interface.js
  var UMLInterface2 = class extends UMLElement {
    constructor(values) {
      super(values);
      this.bounds = { ...this.bounds, width: 20, height: 20 };
      assign(this, values);
    }
    render(layer) {
      return [this];
    }
  };
  UMLInterface2.features = { ...UMLElement.features, resizable: false, alternativePortVisualization: true };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component-interface/uml-component-interface.js
  var UMLComponentInterface = class extends UMLInterface2 {
    constructor() {
      super(...arguments);
      this.type = ComponentElementType.ComponentInterface;
    }
  };
  UMLComponentInterface.supportedRelationships = [
    ComponentRelationshipType.ComponentInterfaceProvided,
    ComponentRelationshipType.ComponentInterfaceRequired
  ];

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-artifact/uml-deployment-artifact.js
  var UMLDeploymentArtifact = class extends UMLElement {
    constructor(values) {
      super();
      this.type = DeploymentElementType.DeploymentArtifact;
      this.bounds = { ...this.bounds, height: 40 };
      assign(this, values);
      this.bounds.height = values && values.bounds && values.bounds.height || 40;
    }
    render(layer) {
      this.bounds.height = Math.max(this.bounds.height, 40);
      this.bounds = calculateNameBounds(this, layer);
      return [this];
    }
  };
  UMLDeploymentArtifact.supportedRelationships = [
    DeploymentRelationshipType.DeploymentAssociation,
    DeploymentRelationshipType.DeploymentDependency,
    DeploymentRelationshipType.DeploymentInterfaceProvided,
    DeploymentRelationshipType.DeploymentInterfaceRequired
  ];

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-node/uml-deployment-node.js
  var UMLDeploymentNode = class extends UMLPackage {
    constructor(values) {
      super();
      this.type = DeploymentElementType.DeploymentNode;
      this.stereotype = "node";
      this.displayStereotype = true;
      assign(this, values);
    }
    serialize() {
      return {
        ...super.serialize(),
        type: this.type,
        stereotype: this.stereotype,
        displayStereotype: this.displayStereotype
      };
    }
    deserialize(values, children) {
      const assert = (v2) => v2.type === DeploymentElementType.DeploymentNode;
      if (!assert(values)) {
        return;
      }
      super.deserialize(values, children);
      this.stereotype = values.stereotype;
      this.displayStereotype = values.displayStereotype;
    }
  };
  UMLDeploymentNode.supportedRelationships = [
    DeploymentRelationshipType.DeploymentAssociation,
    DeploymentRelationshipType.DeploymentDependency,
    DeploymentRelationshipType.DeploymentInterfaceProvided,
    DeploymentRelationshipType.DeploymentInterfaceRequired
  ];

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-object-diagram/uml-object-attribute/uml-object-attribute.js
  var UMLObjectAttribute = class extends UMLClassifierAttribute {
    constructor() {
      super(...arguments);
      this.type = ObjectElementType.ObjectAttribute;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-object-diagram/uml-object-method/uml-object-method.js
  var UMLObjectMethod = class extends UMLClassifierMethod {
    constructor() {
      super(...arguments);
      this.type = ObjectElementType.ObjectMethod;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-object-diagram/uml-object-name/uml-object-name.js
  var UMLObjectName = class extends UMLClassifier {
    constructor() {
      super(...arguments);
      this.type = ObjectElementType.ObjectName;
      this.underline = true;
    }
    reorderChildren(children) {
      const attributes = children.filter((x2) => x2.type === ObjectElementType.ObjectAttribute);
      const methods = children.filter((x2) => x2.type === ObjectElementType.ObjectMethod);
      return [...attributes.map((element) => element.id), ...methods.map((element) => element.id)];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-actor/uml-use-case-actor.js
  var UMLUseCaseActor = class extends UMLElement {
    constructor(values) {
      super(values);
      this.type = UseCaseElementType.UseCaseActor;
      this.bounds = { ...this.bounds, width: 90, height: 140 };
      assign(this, values);
    }
    render(canvas) {
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-system/uml-use-case-system.js
  var UMLUseCaseSystem = class extends UMLPackage {
    constructor() {
      super(...arguments);
      this.type = UseCaseElementType.UseCaseSystem;
    }
  };
  UMLUseCaseSystem.features = { ...UMLContainer.features, connectable: false };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case/uml-use-case.js
  var UMLUseCase = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = UseCaseElementType.UseCase;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-interface/uml-component-interface.js
  var UMLDeploymentInterface = class extends UMLInterface2 {
    constructor() {
      super(...arguments);
      this.type = DeploymentElementType.DeploymentInterface;
    }
  };
  UMLDeploymentInterface.supportedRelationships = [
    DeploymentRelationshipType.DeploymentInterfaceProvided,
    DeploymentRelationshipType.DeploymentInterfaceRequired
  ];

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/uml-petri-net-transition/uml-petri-net-transition.js
  var UMLPetriNetTransition = class _UMLPetriNetTransition extends UMLElement {
    constructor(values) {
      super(values);
      this.type = PetriNetElementType.PetriNetTransition;
      this.bounds = {
        ...this.bounds
      };
      this.bounds.height = values && values.bounds && values.bounds.height || _UMLPetriNetTransition.defaultHeight;
      this.bounds.width = values && values.bounds && values.bounds.width || _UMLPetriNetTransition.defaultWidth;
    }
    render(layer) {
      this.bounds.height = Math.max(this.bounds.height, _UMLPetriNetTransition.defaultHeight);
      this.bounds.width = Math.max(this.bounds.width, _UMLPetriNetTransition.defaultWidth);
      return [this];
    }
  };
  UMLPetriNetTransition.features = { ...UMLElement.features };
  UMLPetriNetTransition.defaultWidth = 20;
  UMLPetriNetTransition.defaultHeight = 60;

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/uml-petri-net-place/uml-petri-net-place.js
  var UMLPetriNetPlace = class _UMLPetriNetPlace extends UMLElement {
    constructor(values) {
      super(values);
      this.highlight = void 0;
      this.type = PetriNetElementType.PetriNetPlace;
      this.bounds = { ...this.bounds, width: 60, height: 60 };
      assign(this, values);
      this.amountOfTokens = values?.amountOfTokens || values?.amountOfTokens === 0 ? values.amountOfTokens : 0;
      this.capacity = values?.capacity || values?.capacity === 0 ? values.capacity : _UMLPetriNetPlace.defaultCapacity;
    }
    serialize(children) {
      return {
        ...super.serialize(),
        type: this.type,
        amountOfTokens: this.amountOfTokens,
        capacity: !isFinite(this.capacity) ? this.capacity.toString() : this.capacity
      };
    }
    deserialize(values, children) {
      const assert = (v2) => v2.type === PetriNetElementType.PetriNetPlace;
      if (!assert(values)) {
        return;
      }
      super.deserialize(values, children);
      this.amountOfTokens = values.amountOfTokens;
      this.capacity = values.capacity === Number.POSITIVE_INFINITY.toString() ? Number.POSITIVE_INFINITY : values.capacity;
    }
    render(canvas) {
      return [this];
    }
  };
  UMLPetriNetPlace.features = { ...UMLElement.features, resizable: false };
  UMLPetriNetPlace.defaultCapacity = Number.POSITIVE_INFINITY;

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-reachability-graph/uml-reachability-graph-marking/uml-reachability-graph-marking.js
  var UMLReachabilityGraphMarking = class extends UMLElement {
    constructor(values) {
      super(values);
      this.type = ReachabilityGraphElementType.ReachabilityGraphMarking;
      this.isInitialMarking = values?.isInitialMarking || false;
    }
    serialize(children) {
      return {
        ...super.serialize(),
        type: this.type,
        isInitialMarking: this.isInitialMarking
      };
    }
    deserialize(values, children) {
      const assert = (v2) => v2.type === ReachabilityGraphElementType.ReachabilityGraphMarking;
      if (!assert(values)) {
        return;
      }
      super.deserialize(values, children);
      this.isInitialMarking = values.isInitialMarking;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-communication-diagram/uml-communication-link/uml-communiction-link-message.js
  var CommunicationLinkMessage = class extends UMLElement {
    constructor(values) {
      super(values);
      this.type = CommunicationElementType.CommunicationLinkMessage;
      this.direction = values?.direction || "target";
    }
    /**
     * Needs to be implemented, because it is a abstract method of {@link UMLElement}
     * Does not do anything -> CommunicationLinkMessage is aligned in parent {@link UMLCommunicationLink}
     * @param canvas
     */
    render(canvas) {
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-component/uml-component.js
  var UMLComponent = class extends UMLPackage {
    constructor() {
      super(...arguments);
      this.stereotype = "component";
      this.displayStereotype = true;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-component/uml-component.js
  var UMLDeploymentComponent = class extends UMLComponent {
    constructor(values) {
      super();
      this.type = DeploymentElementType.DeploymentComponent;
      assign(this, values);
    }
    serialize() {
      return {
        ...super.serialize(),
        type: this.type,
        displayStereotype: this.displayStereotype
      };
    }
    deserialize(values, children) {
      const assert = (v2) => v2.type === DeploymentElementType.DeploymentComponent;
      if (!assert(values)) {
        return;
      }
      super.deserialize(values, children);
      this.displayStereotype = values.displayStereotype;
    }
  };
  UMLDeploymentComponent.supportedRelationships = [
    DeploymentRelationshipType.DeploymentAssociation,
    DeploymentRelationshipType.DeploymentDependency,
    DeploymentRelationshipType.DeploymentInterfaceProvided,
    DeploymentRelationshipType.DeploymentInterfaceRequired
  ];

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component/uml-component-component.js
  var UMLComponentComponent = class extends UMLComponent {
    constructor(values) {
      super();
      this.type = ComponentElementType.Component;
      assign(this, values);
    }
    serialize() {
      return {
        ...super.serialize(),
        type: this.type,
        displayStereotype: this.displayStereotype
      };
    }
    deserialize(values, children) {
      const assert = (v2) => v2.type === ComponentElementType.Component;
      if (!assert(values)) {
        return;
      }
      super.deserialize(values, children);
      this.displayStereotype = values.displayStereotype;
    }
  };
  UMLComponentComponent.supportedRelationships = [
    ComponentRelationshipType.ComponentDependency,
    ComponentRelationshipType.ComponentInterfaceProvided,
    ComponentRelationshipType.ComponentInterfaceRequired
  ];

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component-subsystem/uml-component-subsystem.js
  var UMLSubsystem = class extends UMLPackage {
    constructor(values) {
      super();
      this.stereotype = "subsystem";
      this.displayStereotype = true;
      this.type = ComponentElementType.Subsystem;
      assign(this, values);
    }
    serialize() {
      return {
        ...super.serialize(),
        type: this.type,
        stereotype: this.stereotype,
        displayStereotype: this.displayStereotype
      };
    }
    deserialize(values, children) {
      const assert = (v2) => v2.type === ComponentElementType.Subsystem;
      if (!assert(values)) {
        return;
      }
      super.deserialize(values, children);
      this.stereotype = values.stereotype;
      this.displayStereotype = values.displayStereotype;
    }
  };
  UMLSubsystem.supportedRelationships = [
    ComponentRelationshipType.ComponentDependency,
    ComponentRelationshipType.ComponentInterfaceProvided,
    ComponentRelationshipType.ComponentInterfaceRequired
  ];

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/syntax-tree-terminal/syntax-tree-terminal.js
  var SyntaxTreeTerminal = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = SyntaxTreeElementType.SyntaxTreeTerminal;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/syntax-tree-nonterminal/syntax-tree-nonterminal.js
  var SyntaxTreeNonterminal = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = SyntaxTreeElementType.SyntaxTreeNonterminal;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-terminal/flowchart-terminal.js
  var FlowchartTerminal = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = FlowchartElementType.FlowchartTerminal;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-function-call/flowchart-function-call.js
  var FlowchartFunctionCall = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = FlowchartElementType.FlowchartFunctionCall;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-decision/flowchart-decision.js
  var FlowchartDecision = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = FlowchartElementType.FlowchartDecision;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-process/flowchart-process.js
  var FlowchartProcess = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = FlowchartElementType.FlowchartProcess;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-input-output/flowchart-input-output.js
  var FlowchartInputOutput = class extends UMLElement {
    constructor() {
      super(...arguments);
      this.type = FlowchartElementType.FlowchartInputOutput;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/color-legend/color-legend.js
  var ColorLegend = class extends UMLElement {
    constructor(values) {
      super(values && !values.bounds ? { ...values, bounds: { x: 0, y: 0, width: 160, height: 50 } } : values);
      this.type = ColorLegendElementType.ColorLegend;
    }
    render(canvas) {
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-task/bpmn-task.js
  var BPMNTask = class _BPMNTask extends UMLContainer {
    constructor(values) {
      super(values);
      this.type = BPMNElementType.BPMNTask;
      assign(this, values);
      this.taskType = values?.taskType || _BPMNTask.defaultTaskType;
      this.marker = values?.marker || _BPMNTask.defaultMarker;
    }
    serialize(children) {
      return {
        ...super.serialize(),
        type: this.type,
        taskType: this.taskType,
        marker: this.marker
      };
    }
    deserialize(values, children) {
      super.deserialize(values, children);
      this.taskType = values.taskType || _BPMNTask.defaultTaskType;
      this.marker = values.marker || _BPMNTask.defaultMarker;
    }
    render(canvas) {
      return [this];
    }
  };
  BPMNTask.defaultTaskType = "default";
  BPMNTask.defaultMarker = "none";

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-subprocess/bpmn-subprocess.js
  var BPMNSubprocess = class extends UMLContainer {
    constructor() {
      super(...arguments);
      this.type = BPMNElementType.BPMNSubprocess;
    }
    render(canvas) {
      this.bounds = calculateNameBounds(this, canvas);
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-start-event/bpmn-start-event.js
  var BPMNStartEvent = class _BPMNStartEvent extends UMLContainer {
    constructor(values) {
      super(values);
      this.type = BPMNElementType.BPMNStartEvent;
      this.bounds = { ...this.bounds, width: 40, height: 40 };
      assign(this, values);
      this.eventType = values?.eventType || _BPMNStartEvent.defaultEventType;
    }
    serialize(children) {
      return {
        ...super.serialize(),
        type: this.type,
        eventType: this.eventType
      };
    }
    deserialize(values, children) {
      super.deserialize(values, children);
      this.eventType = values.eventType || _BPMNStartEvent.defaultEventType;
    }
    render(canvas) {
      return [this];
    }
  };
  BPMNStartEvent.supportedRelationships = [BPMNRelationshipType.BPMNFlow];
  BPMNStartEvent.features = { ...UMLContainer.features, resizable: false };
  BPMNStartEvent.defaultEventType = "default";

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-intermediate-event/bpmn-intermediate-event.js
  var BPMNIntermediateEvent = class _BPMNIntermediateEvent extends UMLContainer {
    constructor(values) {
      super(values);
      this.type = BPMNElementType.BPMNIntermediateEvent;
      this.bounds = { ...this.bounds, width: 40, height: 40 };
      assign(this, values);
      this.eventType = values?.eventType || _BPMNIntermediateEvent.defaultEventType;
    }
    serialize(children) {
      return {
        ...super.serialize(),
        type: this.type,
        eventType: this.eventType
      };
    }
    deserialize(values, children) {
      super.deserialize(values, children);
      this.eventType = values.eventType || _BPMNIntermediateEvent.defaultEventType;
    }
    render(canvas) {
      return [this];
    }
  };
  BPMNIntermediateEvent.supportedRelationships = [BPMNRelationshipType.BPMNFlow];
  BPMNIntermediateEvent.features = { ...UMLContainer.features, resizable: false };
  BPMNIntermediateEvent.defaultEventType = "default";

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-end-event/bpmn-end-event.js
  var BPMNEndEvent = class _BPMNEndEvent extends UMLContainer {
    constructor(values) {
      super(values);
      this.type = BPMNElementType.BPMNEndEvent;
      this.bounds = { ...this.bounds, width: 40, height: 40 };
      assign(this, values);
      this.eventType = values?.eventType || _BPMNEndEvent.defaultEventType;
    }
    serialize(children) {
      return {
        ...super.serialize(),
        type: this.type,
        eventType: this.eventType
      };
    }
    deserialize(values, children) {
      super.deserialize(values, children);
      this.eventType = values.eventType || _BPMNEndEvent.defaultEventType;
    }
    render(canvas) {
      return [this];
    }
  };
  BPMNEndEvent.supportedRelationships = [BPMNRelationshipType.BPMNFlow];
  BPMNEndEvent.features = { ...UMLContainer.features, resizable: false };
  BPMNEndEvent.defaultEventType = "default";

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-gateway/bpmn-gateway.js
  var BPMNGateway = class _BPMNGateway extends UMLContainer {
    constructor(values) {
      super(values);
      this.type = BPMNElementType.BPMNGateway;
      this.bounds = { ...this.bounds, width: 40, height: 40 };
      assign(this, values);
      this.gatewayType = values?.gatewayType || _BPMNGateway.defaultGatewayType;
    }
    serialize(children) {
      return {
        ...super.serialize(),
        type: this.type,
        gatewayType: this.gatewayType
      };
    }
    deserialize(values, children) {
      super.deserialize(values, children);
      this.gatewayType = values.gatewayType || _BPMNGateway.defaultGatewayType;
    }
    render(canvas) {
      return [this];
    }
  };
  BPMNGateway.features = { ...UMLContainer.features, resizable: false };
  BPMNGateway.defaultGatewayType = "exclusive";

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-transaction/bpmn-transaction.js
  var BPMNTransaction = class extends UMLContainer {
    constructor() {
      super(...arguments);
      this.type = BPMNElementType.BPMNTransaction;
    }
    render(canvas) {
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-call-activity/bpmn-call-activity.js
  var BPMNCallActivity = class extends UMLContainer {
    constructor() {
      super(...arguments);
      this.type = BPMNElementType.BPMNCallActivity;
    }
    render(canvas) {
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-annotation/bpmn-annotation.js
  var BPMNAnnotation = class extends UMLContainer {
    constructor() {
      super(...arguments);
      this.type = BPMNElementType.BPMNAnnotation;
    }
    render(canvas) {
      return [this];
    }
  };
  BPMNAnnotation.features = { ...UMLContainer.features };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-data-object/bpmn-data-object.js
  var BPMNDataObject = class extends UMLContainer {
    constructor() {
      super(...arguments);
      this.type = BPMNElementType.BPMNDataObject;
    }
    render(canvas) {
      return [this];
    }
  };
  BPMNDataObject.features = { ...UMLContainer.features, resizable: false };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-pool/bpmn-pool.js
  var BPMNPool = class _BPMNPool extends UMLPackage {
    constructor() {
      super(...arguments);
      this.type = BPMNElementType.BPMNPool;
      this.hasSwimlanes = (children) => children.length > 0 && children.every((child) => child.type === BPMNElementType.BPMNSwimlane);
    }
    render(layer, children = [], calculateWithoutChildren) {
      if (this.bounds.width < _BPMNPool.MIN_WIDTH) {
        this.bounds.width = _BPMNPool.MIN_WIDTH;
      }
      const hasSwimlanes = this.hasSwimlanes(children);
      if (!hasSwimlanes) {
        return [this, ...children];
      }
      const calculatedContainerPoolHeight = children.reduce((acc, element) => acc + element.bounds.height, 0);
      const repositionedChildren = children.reverse().map((element, index) => {
        if (element.type !== BPMNElementType.BPMNSwimlane) {
          return element;
        }
        element.bounds.x = _BPMNPool.HEADER_WIDTH;
        element.bounds.y = index > 0 ? children[index - 1].bounds.y + children[index - 1].bounds.height : 0;
        element.bounds.width = this.bounds.width - _BPMNPool.HEADER_WIDTH;
        element.resizeFrom = "bottomRight";
        return element;
      });
      if (hasSwimlanes) {
        this.bounds.height = calculatedContainerPoolHeight < _BPMNPool.MIN_HEIGHT ? _BPMNPool.MIN_HEIGHT : calculatedContainerPoolHeight;
      }
      return [this, ...repositionedChildren];
    }
  };
  BPMNPool.MIN_WIDTH = 80;
  BPMNPool.MIN_HEIGHT = 80;
  BPMNPool.HEADER_WIDTH = 40;
  BPMNPool.features = {
    ...UMLElement.features,
    droppable: true,
    movable: true,
    resizable: true,
    connectable: true
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-swimlane/bpmn-swimlane.js
  var BPMNSwimlane = class _BPMNSwimlane extends UMLContainer {
    constructor() {
      super(...arguments);
      this.type = BPMNElementType.BPMNSwimlane;
    }
    render(layer, children = []) {
      if (this.bounds.height < _BPMNSwimlane.MIN_HEIGHT) {
        this.bounds.height = _BPMNSwimlane.MIN_HEIGHT;
      }
      return [this, ...children];
    }
  };
  BPMNSwimlane.DEFAULT_HEIGHT = 80;
  BPMNSwimlane.MIN_HEIGHT = 80;
  BPMNSwimlane.features = {
    ...UMLElement.features,
    droppable: true,
    movable: false,
    connectable: false,
    updatable: false,
    resizable: "HEIGHT"
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-group/bpmn-group.js
  var BPMNGroup = class extends UMLPackage {
    constructor() {
      super(...arguments);
      this.type = BPMNElementType.BPMNGroup;
    }
    render(canvas, children = []) {
      return [this, ...children];
    }
  };
  BPMNGroup.features = {
    ...UMLPackage.features,
    connectable: false
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-data-store/bpmn-data-store.js
  var BPMNDataStore = class extends UMLContainer {
    constructor() {
      super(...arguments);
      this.type = BPMNElementType.BPMNDataStore;
    }
    render(canvas) {
      return [this];
    }
  };
  BPMNDataStore.features = { ...UMLContainer.features, resizable: false };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-elements.js
  var UMLElements = {
    [UMLElementType.Package]: UMLClassPackage,
    [UMLElementType.Class]: UMLClass,
    [UMLElementType.AbstractClass]: UMLAbstractClass,
    [UMLElementType.Interface]: UMLInterface,
    [UMLElementType.Enumeration]: UMLEnumeration,
    [UMLElementType.ClassAttribute]: UMLClassAttribute,
    [UMLElementType.ClassMethod]: UMLClassMethod,
    [UMLElementType.ObjectName]: UMLObjectName,
    [UMLElementType.ObjectAttribute]: UMLObjectAttribute,
    [UMLElementType.ObjectMethod]: UMLObjectMethod,
    [UMLElementType.Activity]: UMLActivity,
    [UMLElementType.ActivityInitialNode]: UMLActivityInitialNode,
    [UMLElementType.ActivityFinalNode]: UMLActivityFinalNode,
    [UMLElementType.ActivityActionNode]: UMLActivityActionNode,
    [UMLElementType.ActivityObjectNode]: UMLActivityObjectNode,
    [UMLElementType.ActivityForkNode]: UMLActivityForkNode,
    [UMLElementType.ActivityForkNodeHorizontal]: UMLActivityForkNodeHorizontal,
    [UMLElementType.ActivityMergeNode]: UMLActivityMergeNode,
    [UMLElementType.UseCase]: UMLUseCase,
    [UMLElementType.UseCaseActor]: UMLUseCaseActor,
    [UMLElementType.UseCaseSystem]: UMLUseCaseSystem,
    [UMLElementType.Component]: UMLComponentComponent,
    [UMLElementType.Subsystem]: UMLSubsystem,
    [UMLElementType.ComponentInterface]: UMLComponentInterface,
    [UMLElementType.DeploymentNode]: UMLDeploymentNode,
    [UMLElementType.DeploymentComponent]: UMLDeploymentComponent,
    [UMLElementType.DeploymentArtifact]: UMLDeploymentArtifact,
    [UMLElementType.DeploymentInterface]: UMLDeploymentInterface,
    [UMLElementType.PetriNetPlace]: UMLPetriNetPlace,
    [UMLElementType.PetriNetTransition]: UMLPetriNetTransition,
    [UMLElementType.ReachabilityGraphMarking]: UMLReachabilityGraphMarking,
    [UMLElementType.CommunicationLinkMessage]: CommunicationLinkMessage,
    [UMLElementType.SyntaxTreeTerminal]: SyntaxTreeTerminal,
    [UMLElementType.SyntaxTreeNonterminal]: SyntaxTreeNonterminal,
    [UMLElementType.FlowchartTerminal]: FlowchartTerminal,
    [UMLElementType.FlowchartFunctionCall]: FlowchartFunctionCall,
    [UMLElementType.FlowchartProcess]: FlowchartProcess,
    [UMLElementType.FlowchartDecision]: FlowchartDecision,
    [UMLElementType.FlowchartInputOutput]: FlowchartInputOutput,
    [UMLElementType.ColorLegend]: ColorLegend,
    [UMLElementType.BPMNTask]: BPMNTask,
    [UMLElementType.BPMNSubprocess]: BPMNSubprocess,
    [UMLElementType.BPMNTransaction]: BPMNTransaction,
    [UMLElementType.BPMNCallActivity]: BPMNCallActivity,
    [UMLElementType.BPMNAnnotation]: BPMNAnnotation,
    [UMLElementType.BPMNStartEvent]: BPMNStartEvent,
    [UMLElementType.BPMNIntermediateEvent]: BPMNIntermediateEvent,
    [UMLElementType.BPMNEndEvent]: BPMNEndEvent,
    [UMLElementType.BPMNGateway]: BPMNGateway,
    [UMLElementType.BPMNDataObject]: BPMNDataObject,
    [UMLElementType.BPMNDataStore]: BPMNDataStore,
    [UMLElementType.BPMNPool]: BPMNPool,
    [UMLElementType.BPMNSwimlane]: BPMNSwimlane,
    [UMLElementType.BPMNGroup]: BPMNGroup
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-relationship/connection.js
  var Connection = class _Connection {
    static computePath(source, target, options) {
      const sourcePortPosition = getPortsForElement(source.element)[source.direction].add(source.element.bounds.x, source.element.bounds.y);
      const targetPortPosition = getPortsForElement(target.element)[target.direction].add(target.element.bounds.x, target.element.bounds.y);
      if (options.isStraight) {
        if (sourcePortPosition.x === targetPortPosition.x && sourcePortPosition.y === targetPortPosition.y) {
          targetPortPosition.x += 1;
          targetPortPosition.y += 1;
        }
        return [sourcePortPosition, targetPortPosition];
      }
      if (options.isVariable) {
        const straightPath = _Connection.tryFindStraightPath(source, target);
        if (straightPath !== null) {
          if (straightPath[0].x === straightPath[1].x && straightPath[0].y === straightPath[1].y) {
            straightPath[1].x += 1;
            straightPath[1].y += 1;
          }
          return straightPath;
        }
      }
      const ENTITY_MARGIN = 40;
      const sourceMarginRect = enlargeRect(source.element.bounds, ENTITY_MARGIN);
      const targetMarginRect = enlargeRect(target.element.bounds, ENTITY_MARGIN);
      const sourceMarginRect1px = enlargeRect(source.element.bounds, ENTITY_MARGIN - 1);
      const targetMarginRect1px = enlargeRect(target.element.bounds, ENTITY_MARGIN - 1);
      let startPointOnMarginBox = sourcePortPosition.clone();
      switch (source.direction) {
        case Direction.Up:
        case Direction.Topright:
        case Direction.Topleft:
          startPointOnMarginBox = startPointOnMarginBox.add(0, -ENTITY_MARGIN);
          break;
        case Direction.Right:
        case Direction.Upright:
        case Direction.Downright:
          startPointOnMarginBox = startPointOnMarginBox.add(ENTITY_MARGIN, 0);
          break;
        case Direction.Down:
        case Direction.Bottomright:
        case Direction.Bottomleft:
          startPointOnMarginBox = startPointOnMarginBox.add(0, ENTITY_MARGIN);
          break;
        case Direction.Left:
        case Direction.Upleft:
        case Direction.Downleft:
          startPointOnMarginBox = startPointOnMarginBox.add(-ENTITY_MARGIN, 0);
          break;
      }
      let endPointOnMarginBox = targetPortPosition.clone();
      switch (target.direction) {
        case Direction.Up:
        case Direction.Topright:
        case Direction.Topleft:
          endPointOnMarginBox = endPointOnMarginBox.add(0, -ENTITY_MARGIN);
          break;
        case Direction.Right:
        case Direction.Upright:
        case Direction.Downright:
          endPointOnMarginBox = endPointOnMarginBox.add(ENTITY_MARGIN, 0);
          break;
        case Direction.Down:
        case Direction.Bottomright:
        case Direction.Bottomleft:
          endPointOnMarginBox = endPointOnMarginBox.add(0, ENTITY_MARGIN);
          break;
        case Direction.Left:
        case Direction.Upleft:
        case Direction.Downleft:
          endPointOnMarginBox = endPointOnMarginBox.add(-ENTITY_MARGIN, 0);
          break;
      }
      const sourceCornerClosestToEndPoint = findClosestPoint(getCorners(sourceMarginRect), endPointOnMarginBox);
      const targetCornerClosestToClosestSourceCorner = findClosestPoint(getCorners(targetMarginRect), sourceCornerClosestToEndPoint);
      const sourceCornerQueue = determineCornerQueue(sourceMarginRect, source.direction, startPointOnMarginBox, sourceCornerClosestToEndPoint);
      const targetCornerQueue = determineCornerQueue(targetMarginRect, target.direction, endPointOnMarginBox, targetCornerClosestToClosestSourceCorner);
      const pathFromStart = [sourcePortPosition, startPointOnMarginBox];
      const pathFromEnd = [targetPortPosition, endPointOnMarginBox];
      let currentStartPoint = { ...startPointOnMarginBox };
      let currentEndPoint = { ...endPointOnMarginBox };
      while (true) {
        const startAndEndPointCanBeConnected = !lineSegmentIntersectsRect(currentStartPoint, currentEndPoint, sourceMarginRect1px) && !lineSegmentIntersectsRect(currentStartPoint, currentEndPoint, targetMarginRect1px);
        if (startAndEndPointCanBeConnected) {
          const currentStartAxis = getAxisForPathSegment(pathFromStart.slice(-2));
          const currentEndAxis = getAxisForPathSegment(pathFromEnd.slice(-2));
          if (currentStartAxis === "HORIZONTAL" && currentEndAxis === "HORIZONTAL") {
            const middleX = (currentStartPoint.x + currentEndPoint.x) / 2;
            pathFromStart.push({ x: middleX, y: currentStartPoint.y }, { x: middleX, y: currentEndPoint.y });
          } else if (currentStartAxis === "VERTICAL" && currentEndAxis === "VERTICAL") {
            const middleY = (currentStartPoint.y + currentEndPoint.y) / 2;
            pathFromStart.push({ x: currentStartPoint.x, y: middleY }, { x: currentEndPoint.x, y: middleY });
          } else if (currentStartAxis === "HORIZONTAL" && currentEndAxis === "VERTICAL") {
            pathFromStart.push({ x: currentEndPoint.x, y: currentStartPoint.y });
          } else {
            pathFromStart.push({ x: currentStartPoint.x, y: currentEndPoint.y });
          }
          break;
        }
        const nextSourceCorner = sourceCornerQueue.shift();
        if (nextSourceCorner !== void 0) {
          pathFromStart.push(nextSourceCorner);
          currentStartPoint = nextSourceCorner;
        } else {
          const nextTargetCorner = targetCornerQueue.shift();
          if (nextTargetCorner !== void 0) {
            pathFromEnd.push(nextTargetCorner);
            currentEndPoint = nextTargetCorner;
          } else {
            return [sourcePortPosition, startPointOnMarginBox, endPointOnMarginBox, targetPortPosition];
          }
        }
      }
      const pathToEnd = pathFromEnd.reverse();
      const path = [...pathFromStart, ...pathToEnd];
      return beautifyPath(path);
    }
    static tryFindStraightPath(source, target) {
      const OVERLAP_THRESHOLD = 40;
      const sourceHandleEdge = determineHandleEdge(source.direction);
      const targetHandleEdge = determineHandleEdge(target.direction);
      if (sourceHandleEdge === Direction.Right && targetHandleEdge === Direction.Left && target.element.bounds.x >= source.element.bounds.x + source.element.bounds.width) {
        const overlapY = computeOverlap([source.element.bounds.y, source.element.bounds.y + Math.max(OVERLAP_THRESHOLD, source.element.bounds.height)], [target.element.bounds.y, target.element.bounds.y + Math.max(OVERLAP_THRESHOLD, target.element.bounds.height)]);
        if (overlapY !== null && overlapY[1] - overlapY[0] >= OVERLAP_THRESHOLD) {
          const middleY = (overlapY[0] + overlapY[1]) / 2;
          const start = { x: source.element.bounds.x + source.element.bounds.width, y: middleY };
          const end = { x: target.element.bounds.x, y: middleY };
          return [start, end];
        }
      }
      if (sourceHandleEdge === Direction.Left && targetHandleEdge === Direction.Right && source.element.bounds.x >= target.element.bounds.x + target.element.bounds.width) {
        const overlapY = computeOverlap([source.element.bounds.y, source.element.bounds.y + Math.max(OVERLAP_THRESHOLD, source.element.bounds.height)], [target.element.bounds.y, target.element.bounds.y + Math.max(OVERLAP_THRESHOLD, target.element.bounds.height)]);
        if (overlapY !== null && overlapY[1] - overlapY[0] >= OVERLAP_THRESHOLD) {
          const middleY = (overlapY[0] + overlapY[1]) / 2;
          const start = { x: source.element.bounds.x, y: middleY };
          const end = { x: target.element.bounds.x + target.element.bounds.width, y: middleY };
          return [start, end];
        }
      }
      if (sourceHandleEdge === Direction.Down && targetHandleEdge === Direction.Up && target.element.bounds.y >= source.element.bounds.y + source.element.bounds.height) {
        const overlapX = computeOverlap([source.element.bounds.x, source.element.bounds.x + source.element.bounds.width], [target.element.bounds.x, target.element.bounds.x + target.element.bounds.width]);
        if (overlapX !== null && overlapX[1] - overlapX[0] >= OVERLAP_THRESHOLD) {
          const middleX = (overlapX[0] + overlapX[1]) / 2;
          const start = { x: middleX, y: source.element.bounds.y + source.element.bounds.height };
          const end = { x: middleX, y: target.element.bounds.y };
          return [start, end];
        }
      }
      if (sourceHandleEdge === Direction.Up && targetHandleEdge === Direction.Down && source.element.bounds.y >= target.element.bounds.y + target.element.bounds.height) {
        const overlapX = computeOverlap([source.element.bounds.x, source.element.bounds.x + source.element.bounds.width], [target.element.bounds.x, target.element.bounds.x + target.element.bounds.width]);
        if (overlapX !== null && overlapX[1] - overlapX[0] >= OVERLAP_THRESHOLD) {
          const middleX = (overlapX[0] + overlapX[1]) / 2;
          const start = { x: middleX, y: source.element.bounds.y };
          const end = { x: middleX, y: target.element.bounds.y + target.element.bounds.height };
          return [start, end];
        }
      }
      return null;
    }
  };
  function findClosestPoint(candidates, target) {
    let minDistance = Infinity;
    let closestPoint = candidates[0];
    for (const candidate of candidates) {
      const distance = distanceBetweenPoints(target, candidate);
      if (distance < minDistance) {
        minDistance = distance;
        closestPoint = candidate;
      }
    }
    return closestPoint;
  }
  function distanceBetweenPoints(p1, p2) {
    const dx = Math.abs(p1.x - p2.x);
    const dy = Math.abs(p1.y - p2.y);
    return Math.sqrt(dx ** 2 + dy ** 2);
  }
  function computePathLength(path) {
    let pathLength = 0;
    for (let i2 = 1; i2 < path.length; i2++) {
      pathLength += distanceBetweenPoints(path[i2], path[i2 - 1]);
    }
    return pathLength;
  }
  function beautifyPath(path) {
    if (path.length <= 1) {
      return path;
    }
    path = removeConsecutiveIdenticalPoints(path);
    path = mergeConsecutiveSameAxisDeltas(path);
    path = flattenWaves(path);
    path = removeTransitNodes(path);
    return path;
  }
  function removeConsecutiveIdenticalPoints(path) {
    const newPath = [];
    for (const point of path) {
      const previousPoint = newPath[newPath.length - 1];
      if (!previousPoint || !pointsAreEqual(point, previousPoint)) {
        newPath.push(point);
      }
    }
    return newPath;
  }
  function removeTransitNodes(path) {
    for (let i2 = 0; i2 < path.length - 2; i2++) {
      const p = path[i2];
      const q2 = path[i2 + 1];
      const r2 = path[i2 + 2];
      if (isHorizontalLineSegment(p, q2, r2) || isVerticalLineSegment(p, q2, r2)) {
        const pointsBeforeQ = path.slice(0, i2 + 1);
        const pointsAfterQ = path.slice(i2 + 2);
        const pathWithoutQ = [...pointsBeforeQ, ...pointsAfterQ];
        return removeTransitNodes(pathWithoutQ);
      }
    }
    return path;
  }
  function isHorizontalLineSegment(p, q2, r2) {
    return areAlmostEqual(p.y, q2.y) && areAlmostEqual(q2.y, r2.y) && (p.x >= q2.x && q2.x >= r2.x || p.x <= q2.x && q2.x <= r2.x);
  }
  function isVerticalLineSegment(p, q2, r2) {
    return areAlmostEqual(p.x, q2.x) && areAlmostEqual(q2.x, r2.x) && (p.y <= q2.y && q2.y <= r2.y || p.y >= q2.y && q2.y >= r2.y);
  }
  function mergeConsecutiveSameAxisDeltas(path) {
    const deltas = computePathDeltas(path);
    if (deltas.length <= 1) {
      return path;
    }
    const newDeltas = [];
    for (const delta of deltas) {
      const previousDelta = newDeltas[newDeltas.length - 1];
      if (!previousDelta) {
        newDeltas.push(delta);
      } else if (previousDelta.dx === 0 && delta.dx === 0 || previousDelta.dy === 0 && delta.dy === 0) {
        newDeltas[newDeltas.length - 1] = {
          dx: previousDelta.dx + delta.dx,
          dy: previousDelta.dy + delta.dy
        };
      } else {
        newDeltas.push(delta);
      }
    }
    return createPathFromDeltas(path[0], newDeltas);
  }
  function computePathDeltas(path) {
    const deltas = [];
    for (let i2 = 0; i2 < path.length - 1; i2++) {
      const p = path[i2];
      const q2 = path[i2 + 1];
      const dx = q2.x - p.x;
      const dy = q2.y - p.y;
      deltas.push({ dx, dy });
    }
    return deltas;
  }
  function createPathFromDeltas(start, deltas) {
    const points = [start];
    let current2 = start;
    for (const { dx, dy } of deltas) {
      const x2 = current2.x + dx;
      const y2 = current2.y + dy;
      current2 = { x: x2, y: y2 };
      points.push(current2);
    }
    return points;
  }
  function flattenWaves(path) {
    if (path.length < 4) {
      return path;
    }
    const deltas = computePathDeltas(path);
    const simplifiedDeltas = simplifyDeltas(deltas);
    const start = path[0];
    const simplifiedPath = createPathFromDeltas(start, simplifiedDeltas);
    return simplifiedPath;
  }
  function simplifyDeltas(deltas) {
    for (let i2 = 0; i2 < deltas.length - 3; i2++) {
      const d1 = deltas[i2];
      const d2 = deltas[i2 + 1];
      const d3 = deltas[i2 + 2];
      const d4 = deltas[i2 + 3];
      if (d1.dy === 0 && d2.dx === 0 && d3.dy === 0 && Math.sign(d1.dx) === Math.sign(d3.dx) && Math.sign(d2.dy) === Math.sign(d4.dy)) {
        return simplifyDeltas([
          ...deltas.slice(0, i2),
          { dx: d1.dx + d3.dx, dy: 0 },
          { dx: 0, dy: d2.dy },
          ...deltas.slice(i2 + 3)
        ]);
      }
      if (d1.dx === 0 && d2.dy === 0 && d3.dx === 0 && Math.sign(d1.dy) === Math.sign(d3.dy) && Math.sign(d2.dx) === Math.sign(d4.dx)) {
        return simplifyDeltas([
          ...deltas.slice(0, i2),
          { dx: 0, dy: d1.dy + d3.dy },
          { dx: d2.dx, dy: 0 },
          ...deltas.slice(i2 + 3)
        ]);
      }
    }
    return deltas;
  }
  function isAlmostZero(value) {
    return Math.abs(value) < 1e-6;
  }
  function areAlmostEqual(a2, b2) {
    return isAlmostZero(a2 - b2);
  }
  function pointsAreEqual(p, q2) {
    const dx = Math.abs(p.x - q2.x);
    const dy = Math.abs(p.y - q2.y);
    return isAlmostZero(dx) && isAlmostZero(dy);
  }
  function getCorners(rect) {
    return [getTopLeftCorner(rect), getTopRightCorner(rect), getBottomRightCorner(rect), getBottomLeftCorner(rect)];
  }
  function getTopLeftCorner(rect) {
    return {
      x: rect.x,
      y: rect.y
    };
  }
  function getTopRightCorner(rect) {
    return {
      x: rect.x + rect.width,
      y: rect.y
    };
  }
  function getBottomLeftCorner(rect) {
    return {
      x: rect.x,
      y: rect.y + rect.height
    };
  }
  function getBottomRightCorner(rect) {
    return {
      x: rect.x + rect.width,
      y: rect.y + rect.height
    };
  }
  function enlargeRect(rect, padding) {
    return {
      x: rect.x - padding,
      y: rect.y - padding,
      width: rect.width + 2 * padding,
      height: rect.height + 2 * padding
    };
  }
  function determineCornerQueue(rect, edge, pointOnOuterEdge, destinationCorner) {
    let clockwiseCornerQueue;
    let counterClockwiseCornerQueue;
    const tl = getTopLeftCorner(rect);
    const tr = getTopRightCorner(rect);
    const bl = getBottomLeftCorner(rect);
    const br = getBottomRightCorner(rect);
    switch (edge) {
      case Direction.Up:
      case Direction.Topright:
      case Direction.Topleft:
        clockwiseCornerQueue = [tr, br, bl, tl];
        counterClockwiseCornerQueue = [tl, bl, br, tr];
        break;
      case Direction.Right:
      case Direction.Upright:
      case Direction.Downright:
        clockwiseCornerQueue = [br, bl, tl, tr];
        counterClockwiseCornerQueue = [tr, tl, bl, br];
        break;
      case Direction.Down:
      case Direction.Bottomright:
      case Direction.Bottomleft:
        clockwiseCornerQueue = [bl, tl, tr, br];
        counterClockwiseCornerQueue = [br, tr, tl, bl];
        break;
      case Direction.Left:
      case Direction.Upleft:
      case Direction.Downleft:
        clockwiseCornerQueue = [tl, tr, br, bl];
        counterClockwiseCornerQueue = [bl, br, tr, tl];
        break;
      default:
        throw Error("Unreachable code");
    }
    if (destinationCorner !== null) {
      for (let i2 = 0; i2 < 4; i2++) {
        if (pointsAreEqual(clockwiseCornerQueue[i2], destinationCorner)) {
          clockwiseCornerQueue = clockwiseCornerQueue.slice(0, i2 + 1);
          break;
        }
      }
      for (let i2 = 0; i2 < 4; i2++) {
        if (pointsAreEqual(counterClockwiseCornerQueue[i2], destinationCorner)) {
          counterClockwiseCornerQueue = counterClockwiseCornerQueue.slice(0, i2 + 1);
          break;
        }
      }
    }
    const clockwisePathLength = computePathLength([pointOnOuterEdge, ...clockwiseCornerQueue]);
    const counterClockwisePathLength = computePathLength([pointOnOuterEdge, ...counterClockwiseCornerQueue]);
    return clockwisePathLength < counterClockwisePathLength ? clockwiseCornerQueue : counterClockwiseCornerQueue;
  }
  function lineSegmentIntersectsRect(p, q2, rect) {
    if (lineSegmentLiesWithinRect(p, q2, rect)) {
      return true;
    }
    const topLeftCorner = getTopLeftCorner(rect);
    const topRightCorner = getTopRightCorner(rect);
    const bottomLeftCorner = getBottomLeftCorner(rect);
    const bottomRightCorner = getBottomRightCorner(rect);
    return lineSegmentsIntersect(p, q2, topLeftCorner, topRightCorner) || lineSegmentsIntersect(p, q2, topRightCorner, bottomRightCorner) || lineSegmentsIntersect(p, q2, topLeftCorner, bottomLeftCorner) || lineSegmentsIntersect(p, q2, bottomLeftCorner, bottomRightCorner);
  }
  function lineSegmentLiesWithinRect(p, q2, rect) {
    return p.x > rect.x && p.x < rect.x + rect.height && p.y > rect.y && p.y < rect.y + rect.height;
  }
  function lineSegmentsIntersect(p1, q1, p2, q2) {
    const o1 = getOrientation(p1, q1, p2);
    const o2 = getOrientation(p1, q1, q2);
    const o3 = getOrientation(p2, q2, p1);
    const o4 = getOrientation(p2, q2, q1);
    if (o1 !== o2 && o3 !== o4) {
      return true;
    }
    if (o1 === 0 && liesOnSegment(p1, p2, q1)) {
      return true;
    }
    if (o2 === 0 && liesOnSegment(p1, q2, q1)) {
      return true;
    }
    if (o3 === 0 && liesOnSegment(p2, p1, q2)) {
      return true;
    }
    if (o4 === 0 && liesOnSegment(p2, q1, q2)) {
      return true;
    }
    return false;
  }
  function getOrientation(p, q2, r2) {
    const val = (q2.y - p.y) * (r2.x - q2.x) - (q2.x - p.x) * (r2.y - q2.y);
    if (isAlmostZero(val)) {
      return 0;
    }
    return val > 0 ? 1 : 2;
  }
  function liesOnSegment(p, q2, r2) {
    return q2.x <= Math.max(p.x, r2.x) && q2.x >= Math.min(p.x, r2.x) && q2.y <= Math.max(p.y, r2.y) && q2.y >= Math.min(p.y, r2.y);
  }
  function computeOverlap(range1, range2) {
    const [from1, to1] = range1;
    const [from2, to2] = range2;
    const largerFrom = Math.max(from1, from2);
    const smallerTo = Math.min(to1, to2);
    return largerFrom <= smallerTo ? [largerFrom, smallerTo] : null;
  }
  function getAxisForPathSegment(pathSegment) {
    const [p, q2] = pathSegment;
    const dx = q2.x - p.x;
    const dy = q2.y - p.y;
    if (dx === 0 && dy !== 0) {
      return "VERTICAL";
    }
    if (dx !== 0 && dy === 0) {
      return "HORIZONTAL";
    }
    return null;
  }
  function determineHandleEdge(handle) {
    switch (handle) {
      case Direction.Left:
      case Direction.Upleft:
      case Direction.Downleft:
        return Direction.Left;
      case Direction.Right:
      case Direction.Upright:
      case Direction.Downright:
        return Direction.Right;
      case Direction.Down:
      case Direction.Bottomleft:
      case Direction.Bottomright:
        return Direction.Down;
      case Direction.Up:
      case Direction.Topleft:
      case Direction.Topright:
        return Direction.Up;
      default:
        break;
    }
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-relationship/uml-relationship.js
  var UMLRelationship = class extends UMLElement {
    constructor(values) {
      super();
      this.path = [
        { x: 0, y: 0 },
        { x: 200, y: 100 }
      ];
      this.source = {
        direction: Direction.Up,
        element: ""
      };
      this.target = {
        direction: Direction.Up,
        element: ""
      };
      assign(this, values);
    }
    serialize() {
      return {
        ...super.serialize(),
        type: this.type,
        path: this.path,
        source: this.source,
        target: this.target,
        isManuallyLayouted: this.isManuallyLayouted
      };
    }
    deserialize(values, children) {
      const assert = (v2) => v2.type in UMLRelationshipType;
      if (!assert(values)) {
        return;
      }
      super.deserialize(values);
      this.type = values.type;
      this.path = values.path;
      this.source = values.source;
      this.target = values.target;
      this.isManuallyLayouted = values.isManuallyLayouted;
    }
    render(canvas, source, target) {
      if (!source || !target) {
        return [this];
      }
      const { straight, variable } = this.constructor.features;
      const path = Connection.computePath({ element: source, direction: this.source.direction }, { element: target, direction: this.target.direction }, { isStraight: straight, isVariable: variable });
      const x2 = Math.min(...path.map((point) => point.x));
      const y2 = Math.min(...path.map((point) => point.y));
      const width = Math.max(Math.max(...path.map((point) => point.x)) - x2, 1);
      const height = Math.max(Math.max(...path.map((point) => point.y)) - y2, 1);
      this.bounds = { x: x2, y: y2, width, height };
      this.path = path.map((point) => ({ x: point.x - x2, y: point.y - y2 }));
      return [this];
    }
    /**
     * Clones an instance of `UMLRelationship`
     *
     * @param override - Override existing properties.
     */
    cloneRelationship(override) {
      const Constructor = this.constructor;
      const values = { ...this, ...override, id: uuid() };
      return new Constructor(values);
    }
  };
  UMLRelationship.features = {
    connectable: false,
    droppable: false,
    hoverable: true,
    movable: false,
    reconnectable: true,
    resizable: false,
    selectable: true,
    updatable: true,
    straight: false,
    variable: true,
    alternativePortVisualization: false
  };
  UMLRelationship.isUMLRelationship = (element) => {
    return element.type in UMLRelationshipType;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-diagram/uml-diagram.js
  var DIAGRAM_MARGIN = 40;
  var UMLDiagram = class extends UMLContainer {
    constructor(values) {
      super();
      this.type = UMLDiagramType.ClassDiagram;
      this.ownedRelationships = [];
      this.bounds = { ...this.bounds, width: 0, height: 0 };
      assign(this, values);
    }
    render(canvas, children = []) {
      const size = children.reduce((max2, element) => ({
        width: Math.max(Math.abs(element.bounds.x), Math.abs(element.bounds.x + element.bounds.width), max2.width),
        height: Math.max(Math.abs(element.bounds.y), Math.abs(element.bounds.y + element.bounds.height), max2.height)
      }), { width: 0, height: 0 });
      this.bounds = {
        x: -size.width - DIAGRAM_MARGIN,
        y: -size.height - DIAGRAM_MARGIN,
        width: size.width * 2 + DIAGRAM_MARGIN,
        height: size.height * 2 + DIAGRAM_MARGIN
      };
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-relationship/uml-relationship-centered-description.js
  var UMLRelationshipCenteredDescription = class extends UMLRelationship {
    render(canvas, source, target) {
      super.render(canvas, source, target);
      if (this.name) {
        const pathBounds = this.bounds;
        let descriptionPosition = new Point(0, 0);
        let direction = "v";
        const path = this.path.map((point) => new Point(point.x, point.y));
        let distance = path.reduce((length, point, i2, points) => i2 + 1 < points.length ? length + points[i2 + 1].subtract(point).length : length, 0) / 2;
        for (let index = 0; index < path.length - 1; index++) {
          const vector = path[index + 1].subtract(path[index]);
          if (vector.length > distance) {
            const norm = vector.normalize();
            direction = Math.abs(norm.x) > Math.abs(norm.y) ? "h" : "v";
            descriptionPosition = path[index].add(norm.scale(distance));
            break;
          }
          distance -= vector.length;
        }
        descriptionPosition = descriptionPosition.add(pathBounds.x, pathBounds.y);
        const descriptionSize = Text.size(canvas, this.name);
        const descriptionBoundingBox = {
          bounds: {
            x: direction === "v" ? descriptionPosition.x + 5 : descriptionPosition.x - descriptionSize.width / 2,
            y: "v" ? descriptionPosition.y - DIAGRAM_MARGIN : descriptionPosition.y,
            width: descriptionSize.width,
            height: descriptionSize.height
          }
        };
        this.bounds = computeBoundingBoxForElements([this, descriptionBoundingBox]);
        const horizontalTranslation = pathBounds.x - this.bounds.x;
        const verticalTranslation = pathBounds.y - this.bounds.y;
        this.path.forEach((point) => {
          point.x += horizontalTranslation;
          point.y += verticalTranslation;
        });
      }
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-control-flow/uml-activity-control-flow.js
  var UMLActivityControlFlow = class extends UMLRelationshipCenteredDescription {
    constructor() {
      super(...arguments);
      this.type = ActivityRelationshipType.ActivityControlFlow;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-association/uml-association-component.js
  var import_react2 = __toESM(require_react());

  // node_modules/styled-components/dist/styled-components.browser.esm.js
  var import_react_is = __toESM(require_react_is());
  var import_react = __toESM(require_react());
  var import_shallowequal = __toESM(require_shallowequal());

  // node_modules/@emotion/stylis/dist/stylis.browser.esm.js
  function stylis_min(W2) {
    function M2(d2, c2, e2, h, a2) {
      for (var m2 = 0, b2 = 0, v2 = 0, n2 = 0, q2, g2, x2 = 0, K2 = 0, k2, u2 = k2 = q2 = 0, l2 = 0, r2 = 0, I2 = 0, t2 = 0, B3 = e2.length, J2 = B3 - 1, y2, f = "", p = "", F3 = "", G3 = "", C2; l2 < B3; ) {
        g2 = e2.charCodeAt(l2);
        l2 === J2 && 0 !== b2 + n2 + v2 + m2 && (0 !== b2 && (g2 = 47 === b2 ? 10 : 47), n2 = v2 = m2 = 0, B3++, J2++);
        if (0 === b2 + n2 + v2 + m2) {
          if (l2 === J2 && (0 < r2 && (f = f.replace(N2, "")), 0 < f.trim().length)) {
            switch (g2) {
              case 32:
              case 9:
              case 59:
              case 13:
              case 10:
                break;
              default:
                f += e2.charAt(l2);
            }
            g2 = 59;
          }
          switch (g2) {
            case 123:
              f = f.trim();
              q2 = f.charCodeAt(0);
              k2 = 1;
              for (t2 = ++l2; l2 < B3; ) {
                switch (g2 = e2.charCodeAt(l2)) {
                  case 123:
                    k2++;
                    break;
                  case 125:
                    k2--;
                    break;
                  case 47:
                    switch (g2 = e2.charCodeAt(l2 + 1)) {
                      case 42:
                      case 47:
                        a: {
                          for (u2 = l2 + 1; u2 < J2; ++u2) {
                            switch (e2.charCodeAt(u2)) {
                              case 47:
                                if (42 === g2 && 42 === e2.charCodeAt(u2 - 1) && l2 + 2 !== u2) {
                                  l2 = u2 + 1;
                                  break a;
                                }
                                break;
                              case 10:
                                if (47 === g2) {
                                  l2 = u2 + 1;
                                  break a;
                                }
                            }
                          }
                          l2 = u2;
                        }
                    }
                    break;
                  case 91:
                    g2++;
                  case 40:
                    g2++;
                  case 34:
                  case 39:
                    for (; l2++ < J2 && e2.charCodeAt(l2) !== g2; ) {
                    }
                }
                if (0 === k2) break;
                l2++;
              }
              k2 = e2.substring(t2, l2);
              0 === q2 && (q2 = (f = f.replace(ca, "").trim()).charCodeAt(0));
              switch (q2) {
                case 64:
                  0 < r2 && (f = f.replace(N2, ""));
                  g2 = f.charCodeAt(1);
                  switch (g2) {
                    case 100:
                    case 109:
                    case 115:
                    case 45:
                      r2 = c2;
                      break;
                    default:
                      r2 = O2;
                  }
                  k2 = M2(c2, r2, k2, g2, a2 + 1);
                  t2 = k2.length;
                  0 < A && (r2 = X2(O2, f, I2), C2 = H2(3, k2, r2, c2, D2, z2, t2, g2, a2, h), f = r2.join(""), void 0 !== C2 && 0 === (t2 = (k2 = C2.trim()).length) && (g2 = 0, k2 = ""));
                  if (0 < t2) switch (g2) {
                    case 115:
                      f = f.replace(da, ea);
                    case 100:
                    case 109:
                    case 45:
                      k2 = f + "{" + k2 + "}";
                      break;
                    case 107:
                      f = f.replace(fa, "$1 $2");
                      k2 = f + "{" + k2 + "}";
                      k2 = 1 === w2 || 2 === w2 && L2("@" + k2, 3) ? "@-webkit-" + k2 + "@" + k2 : "@" + k2;
                      break;
                    default:
                      k2 = f + k2, 112 === h && (k2 = (p += k2, ""));
                  }
                  else k2 = "";
                  break;
                default:
                  k2 = M2(c2, X2(c2, f, I2), k2, h, a2 + 1);
              }
              F3 += k2;
              k2 = I2 = r2 = u2 = q2 = 0;
              f = "";
              g2 = e2.charCodeAt(++l2);
              break;
            case 125:
            case 59:
              f = (0 < r2 ? f.replace(N2, "") : f).trim();
              if (1 < (t2 = f.length)) switch (0 === u2 && (q2 = f.charCodeAt(0), 45 === q2 || 96 < q2 && 123 > q2) && (t2 = (f = f.replace(" ", ":")).length), 0 < A && void 0 !== (C2 = H2(1, f, c2, d2, D2, z2, p.length, h, a2, h)) && 0 === (t2 = (f = C2.trim()).length) && (f = "\0\0"), q2 = f.charCodeAt(0), g2 = f.charCodeAt(1), q2) {
                case 0:
                  break;
                case 64:
                  if (105 === g2 || 99 === g2) {
                    G3 += f + e2.charAt(l2);
                    break;
                  }
                default:
                  58 !== f.charCodeAt(t2 - 1) && (p += P(f, q2, g2, f.charCodeAt(2)));
              }
              I2 = r2 = u2 = q2 = 0;
              f = "";
              g2 = e2.charCodeAt(++l2);
          }
        }
        switch (g2) {
          case 13:
          case 10:
            47 === b2 ? b2 = 0 : 0 === 1 + q2 && 107 !== h && 0 < f.length && (r2 = 1, f += "\0");
            0 < A * Y2 && H2(0, f, c2, d2, D2, z2, p.length, h, a2, h);
            z2 = 1;
            D2++;
            break;
          case 59:
          case 125:
            if (0 === b2 + n2 + v2 + m2) {
              z2++;
              break;
            }
          default:
            z2++;
            y2 = e2.charAt(l2);
            switch (g2) {
              case 9:
              case 32:
                if (0 === n2 + m2 + b2) switch (x2) {
                  case 44:
                  case 58:
                  case 9:
                  case 32:
                    y2 = "";
                    break;
                  default:
                    32 !== g2 && (y2 = " ");
                }
                break;
              case 0:
                y2 = "\\0";
                break;
              case 12:
                y2 = "\\f";
                break;
              case 11:
                y2 = "\\v";
                break;
              case 38:
                0 === n2 + b2 + m2 && (r2 = I2 = 1, y2 = "\f" + y2);
                break;
              case 108:
                if (0 === n2 + b2 + m2 + E2 && 0 < u2) switch (l2 - u2) {
                  case 2:
                    112 === x2 && 58 === e2.charCodeAt(l2 - 3) && (E2 = x2);
                  case 8:
                    111 === K2 && (E2 = K2);
                }
                break;
              case 58:
                0 === n2 + b2 + m2 && (u2 = l2);
                break;
              case 44:
                0 === b2 + v2 + n2 + m2 && (r2 = 1, y2 += "\r");
                break;
              case 34:
              case 39:
                0 === b2 && (n2 = n2 === g2 ? 0 : 0 === n2 ? g2 : n2);
                break;
              case 91:
                0 === n2 + b2 + v2 && m2++;
                break;
              case 93:
                0 === n2 + b2 + v2 && m2--;
                break;
              case 41:
                0 === n2 + b2 + m2 && v2--;
                break;
              case 40:
                if (0 === n2 + b2 + m2) {
                  if (0 === q2) switch (2 * x2 + 3 * K2) {
                    case 533:
                      break;
                    default:
                      q2 = 1;
                  }
                  v2++;
                }
                break;
              case 64:
                0 === b2 + v2 + n2 + m2 + u2 + k2 && (k2 = 1);
                break;
              case 42:
              case 47:
                if (!(0 < n2 + m2 + v2)) switch (b2) {
                  case 0:
                    switch (2 * g2 + 3 * e2.charCodeAt(l2 + 1)) {
                      case 235:
                        b2 = 47;
                        break;
                      case 220:
                        t2 = l2, b2 = 42;
                    }
                    break;
                  case 42:
                    47 === g2 && 42 === x2 && t2 + 2 !== l2 && (33 === e2.charCodeAt(t2 + 2) && (p += e2.substring(t2, l2 + 1)), y2 = "", b2 = 0);
                }
            }
            0 === b2 && (f += y2);
        }
        K2 = x2;
        x2 = g2;
        l2++;
      }
      t2 = p.length;
      if (0 < t2) {
        r2 = c2;
        if (0 < A && (C2 = H2(2, p, r2, d2, D2, z2, t2, h, a2, h), void 0 !== C2 && 0 === (p = C2).length)) return G3 + p + F3;
        p = r2.join(",") + "{" + p + "}";
        if (0 !== w2 * E2) {
          2 !== w2 || L2(p, 2) || (E2 = 0);
          switch (E2) {
            case 111:
              p = p.replace(ha, ":-moz-$1") + p;
              break;
            case 112:
              p = p.replace(Q2, "::-webkit-input-$1") + p.replace(Q2, "::-moz-$1") + p.replace(Q2, ":-ms-input-$1") + p;
          }
          E2 = 0;
        }
      }
      return G3 + p + F3;
    }
    function X2(d2, c2, e2) {
      var h = c2.trim().split(ia);
      c2 = h;
      var a2 = h.length, m2 = d2.length;
      switch (m2) {
        case 0:
        case 1:
          var b2 = 0;
          for (d2 = 0 === m2 ? "" : d2[0] + " "; b2 < a2; ++b2) {
            c2[b2] = Z2(d2, c2[b2], e2).trim();
          }
          break;
        default:
          var v2 = b2 = 0;
          for (c2 = []; b2 < a2; ++b2) {
            for (var n2 = 0; n2 < m2; ++n2) {
              c2[v2++] = Z2(d2[n2] + " ", h[b2], e2).trim();
            }
          }
      }
      return c2;
    }
    function Z2(d2, c2, e2) {
      var h = c2.charCodeAt(0);
      33 > h && (h = (c2 = c2.trim()).charCodeAt(0));
      switch (h) {
        case 38:
          return c2.replace(F2, "$1" + d2.trim());
        case 58:
          return d2.trim() + c2.replace(F2, "$1" + d2.trim());
        default:
          if (0 < 1 * e2 && 0 < c2.indexOf("\f")) return c2.replace(F2, (58 === d2.charCodeAt(0) ? "" : "$1") + d2.trim());
      }
      return d2 + c2;
    }
    function P(d2, c2, e2, h) {
      var a2 = d2 + ";", m2 = 2 * c2 + 3 * e2 + 4 * h;
      if (944 === m2) {
        d2 = a2.indexOf(":", 9) + 1;
        var b2 = a2.substring(d2, a2.length - 1).trim();
        b2 = a2.substring(0, d2).trim() + b2 + ";";
        return 1 === w2 || 2 === w2 && L2(b2, 1) ? "-webkit-" + b2 + b2 : b2;
      }
      if (0 === w2 || 2 === w2 && !L2(a2, 1)) return a2;
      switch (m2) {
        case 1015:
          return 97 === a2.charCodeAt(10) ? "-webkit-" + a2 + a2 : a2;
        case 951:
          return 116 === a2.charCodeAt(3) ? "-webkit-" + a2 + a2 : a2;
        case 963:
          return 110 === a2.charCodeAt(5) ? "-webkit-" + a2 + a2 : a2;
        case 1009:
          if (100 !== a2.charCodeAt(4)) break;
        case 969:
        case 942:
          return "-webkit-" + a2 + a2;
        case 978:
          return "-webkit-" + a2 + "-moz-" + a2 + a2;
        case 1019:
        case 983:
          return "-webkit-" + a2 + "-moz-" + a2 + "-ms-" + a2 + a2;
        case 883:
          if (45 === a2.charCodeAt(8)) return "-webkit-" + a2 + a2;
          if (0 < a2.indexOf("image-set(", 11)) return a2.replace(ja, "$1-webkit-$2") + a2;
          break;
        case 932:
          if (45 === a2.charCodeAt(4)) switch (a2.charCodeAt(5)) {
            case 103:
              return "-webkit-box-" + a2.replace("-grow", "") + "-webkit-" + a2 + "-ms-" + a2.replace("grow", "positive") + a2;
            case 115:
              return "-webkit-" + a2 + "-ms-" + a2.replace("shrink", "negative") + a2;
            case 98:
              return "-webkit-" + a2 + "-ms-" + a2.replace("basis", "preferred-size") + a2;
          }
          return "-webkit-" + a2 + "-ms-" + a2 + a2;
        case 964:
          return "-webkit-" + a2 + "-ms-flex-" + a2 + a2;
        case 1023:
          if (99 !== a2.charCodeAt(8)) break;
          b2 = a2.substring(a2.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
          return "-webkit-box-pack" + b2 + "-webkit-" + a2 + "-ms-flex-pack" + b2 + a2;
        case 1005:
          return ka.test(a2) ? a2.replace(aa, ":-webkit-") + a2.replace(aa, ":-moz-") + a2 : a2;
        case 1e3:
          b2 = a2.substring(13).trim();
          c2 = b2.indexOf("-") + 1;
          switch (b2.charCodeAt(0) + b2.charCodeAt(c2)) {
            case 226:
              b2 = a2.replace(G2, "tb");
              break;
            case 232:
              b2 = a2.replace(G2, "tb-rl");
              break;
            case 220:
              b2 = a2.replace(G2, "lr");
              break;
            default:
              return a2;
          }
          return "-webkit-" + a2 + "-ms-" + b2 + a2;
        case 1017:
          if (-1 === a2.indexOf("sticky", 9)) break;
        case 975:
          c2 = (a2 = d2).length - 10;
          b2 = (33 === a2.charCodeAt(c2) ? a2.substring(0, c2) : a2).substring(d2.indexOf(":", 7) + 1).trim();
          switch (m2 = b2.charCodeAt(0) + (b2.charCodeAt(7) | 0)) {
            case 203:
              if (111 > b2.charCodeAt(8)) break;
            case 115:
              a2 = a2.replace(b2, "-webkit-" + b2) + ";" + a2;
              break;
            case 207:
            case 102:
              a2 = a2.replace(b2, "-webkit-" + (102 < m2 ? "inline-" : "") + "box") + ";" + a2.replace(b2, "-webkit-" + b2) + ";" + a2.replace(b2, "-ms-" + b2 + "box") + ";" + a2;
          }
          return a2 + ";";
        case 938:
          if (45 === a2.charCodeAt(5)) switch (a2.charCodeAt(6)) {
            case 105:
              return b2 = a2.replace("-items", ""), "-webkit-" + a2 + "-webkit-box-" + b2 + "-ms-flex-" + b2 + a2;
            case 115:
              return "-webkit-" + a2 + "-ms-flex-item-" + a2.replace(ba, "") + a2;
            default:
              return "-webkit-" + a2 + "-ms-flex-line-pack" + a2.replace("align-content", "").replace(ba, "") + a2;
          }
          break;
        case 973:
        case 989:
          if (45 !== a2.charCodeAt(3) || 122 === a2.charCodeAt(4)) break;
        case 931:
        case 953:
          if (true === la.test(d2)) return 115 === (b2 = d2.substring(d2.indexOf(":") + 1)).charCodeAt(0) ? P(d2.replace("stretch", "fill-available"), c2, e2, h).replace(":fill-available", ":stretch") : a2.replace(b2, "-webkit-" + b2) + a2.replace(b2, "-moz-" + b2.replace("fill-", "")) + a2;
          break;
        case 962:
          if (a2 = "-webkit-" + a2 + (102 === a2.charCodeAt(5) ? "-ms-" + a2 : "") + a2, 211 === e2 + h && 105 === a2.charCodeAt(13) && 0 < a2.indexOf("transform", 10)) return a2.substring(0, a2.indexOf(";", 27) + 1).replace(ma, "$1-webkit-$2") + a2;
      }
      return a2;
    }
    function L2(d2, c2) {
      var e2 = d2.indexOf(1 === c2 ? ":" : "{"), h = d2.substring(0, 3 !== c2 ? e2 : 10);
      e2 = d2.substring(e2 + 1, d2.length - 1);
      return R2(2 !== c2 ? h : h.replace(na, "$1"), e2, c2);
    }
    function ea(d2, c2) {
      var e2 = P(c2, c2.charCodeAt(0), c2.charCodeAt(1), c2.charCodeAt(2));
      return e2 !== c2 + ";" ? e2.replace(oa, " or ($1)").substring(4) : "(" + c2 + ")";
    }
    function H2(d2, c2, e2, h, a2, m2, b2, v2, n2, q2) {
      for (var g2 = 0, x2 = c2, w3; g2 < A; ++g2) {
        switch (w3 = S2[g2].call(B2, d2, x2, e2, h, a2, m2, b2, v2, n2, q2)) {
          case void 0:
          case false:
          case true:
          case null:
            break;
          default:
            x2 = w3;
        }
      }
      if (x2 !== c2) return x2;
    }
    function T2(d2) {
      switch (d2) {
        case void 0:
        case null:
          A = S2.length = 0;
          break;
        default:
          if ("function" === typeof d2) S2[A++] = d2;
          else if ("object" === typeof d2) for (var c2 = 0, e2 = d2.length; c2 < e2; ++c2) {
            T2(d2[c2]);
          }
          else Y2 = !!d2 | 0;
      }
      return T2;
    }
    function U2(d2) {
      d2 = d2.prefix;
      void 0 !== d2 && (R2 = null, d2 ? "function" !== typeof d2 ? w2 = 1 : (w2 = 2, R2 = d2) : w2 = 0);
      return U2;
    }
    function B2(d2, c2) {
      var e2 = d2;
      33 > e2.charCodeAt(0) && (e2 = e2.trim());
      V2 = e2;
      e2 = [V2];
      if (0 < A) {
        var h = H2(-1, c2, e2, e2, D2, z2, 0, 0, 0, 0);
        void 0 !== h && "string" === typeof h && (c2 = h);
      }
      var a2 = M2(O2, e2, c2, 0, 0);
      0 < A && (h = H2(-2, a2, e2, e2, D2, z2, a2.length, 0, 0, 0), void 0 !== h && (a2 = h));
      V2 = "";
      E2 = 0;
      z2 = D2 = 1;
      return a2;
    }
    var ca = /^\0+/g, N2 = /[\0\r\f]/g, aa = /: */g, ka = /zoo|gra/, ma = /([,: ])(transform)/g, ia = /,\r+?/g, F2 = /([\t\r\n ])*\f?&/g, fa = /@(k\w+)\s*(\S*)\s*/, Q2 = /::(place)/g, ha = /:(read-only)/g, G2 = /[svh]\w+-[tblr]{2}/, da = /\(\s*(.*)\s*\)/g, oa = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la = /stretch|:\s*\w+\-(?:conte|avail)/, ja = /([^-])(image-set\()/, z2 = 1, D2 = 1, E2 = 0, w2 = 1, O2 = [], S2 = [], A = 0, R2 = null, Y2 = 0, V2 = "";
    B2.use = T2;
    B2.set = U2;
    void 0 !== W2 && U2(W2);
    return B2;
  }
  var stylis_browser_esm_default = stylis_min;

  // node_modules/@emotion/unitless/dist/unitless.browser.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_browser_esm_default = unitlessKeys;

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize(fn) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache[arg] === void 0) cache[arg] = fn(arg);
      return cache[arg];
    };
  }

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = /* @__PURE__ */ memoize(
    function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    }
    /* Z+1 */
  );

  // node_modules/styled-components/dist/styled-components.browser.esm.js
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  function y() {
    return (y = Object.assign || function(e2) {
      for (var t2 = 1; t2 < arguments.length; t2++) {
        var n2 = arguments[t2];
        for (var r2 in n2) Object.prototype.hasOwnProperty.call(n2, r2) && (e2[r2] = n2[r2]);
      }
      return e2;
    }).apply(this, arguments);
  }
  var v = function(e2, t2) {
    for (var n2 = [e2[0]], r2 = 0, o2 = t2.length; r2 < o2; r2 += 1) n2.push(t2[r2], e2[r2 + 1]);
    return n2;
  };
  var g = function(t2) {
    return null !== t2 && "object" == typeof t2 && "[object Object]" === (t2.toString ? t2.toString() : Object.prototype.toString.call(t2)) && !(0, import_react_is.typeOf)(t2);
  };
  var S = Object.freeze([]);
  var w = Object.freeze({});
  function E(e2) {
    return "function" == typeof e2;
  }
  function b(e2) {
    return "string" == typeof e2 && e2 || e2.displayName || e2.name || "Component";
  }
  function _(e2) {
    return e2 && "string" == typeof e2.styledComponentId;
  }
  var N = "undefined" != typeof process && void 0 !== process.env && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
  var C = "undefined" != typeof window && "HTMLElement" in window;
  var I = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process && void 0 !== process.env && (void 0 !== process.env.REACT_APP_SC_DISABLE_SPEEDY && "" !== process.env.REACT_APP_SC_DISABLE_SPEEDY ? "false" !== process.env.REACT_APP_SC_DISABLE_SPEEDY && process.env.REACT_APP_SC_DISABLE_SPEEDY : void 0 !== process.env.SC_DISABLE_SPEEDY && "" !== process.env.SC_DISABLE_SPEEDY ? "false" !== process.env.SC_DISABLE_SPEEDY && process.env.SC_DISABLE_SPEEDY : true));
  var O = true ? { 1: "Cannot create styled-component for component: %s.\n\n", 2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n", 3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n", 4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n", 5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n", 6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n", 7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n', 8: 'ThemeProvider: Please make your "theme" prop an object.\n\n', 9: "Missing document `<head>`\n\n", 10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n", 11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n", 12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n", 13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n", 14: 'ThemeProvider: "theme" prop is required.\n\n', 15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n", 16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n", 17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n" } : {};
  function R() {
    for (var e2 = arguments.length <= 0 ? void 0 : arguments[0], t2 = [], n2 = 1, r2 = arguments.length; n2 < r2; n2 += 1) t2.push(n2 < 0 || arguments.length <= n2 ? void 0 : arguments[n2]);
    return t2.forEach(function(t3) {
      e2 = e2.replace(/%[a-z]/, t3);
    }), e2;
  }
  function D(e2) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++) n2[r2 - 1] = arguments[r2];
    throw false ? new Error("An error occurred. See https://git.io/JUIaE#" + e2 + " for more information." + (n2.length > 0 ? " Args: " + n2.join(", ") : "")) : new Error(R.apply(void 0, [O[e2]].concat(n2)).trim());
  }
  var j = function() {
    function e2(e3) {
      this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e3;
    }
    var t2 = e2.prototype;
    return t2.indexOfGroup = function(e3) {
      for (var t3 = 0, n2 = 0; n2 < e3; n2++) t3 += this.groupSizes[n2];
      return t3;
    }, t2.insertRules = function(e3, t3) {
      if (e3 >= this.groupSizes.length) {
        for (var n2 = this.groupSizes, r2 = n2.length, o2 = r2; e3 >= o2; ) (o2 <<= 1) < 0 && D(16, "" + e3);
        this.groupSizes = new Uint32Array(o2), this.groupSizes.set(n2), this.length = o2;
        for (var s2 = r2; s2 < o2; s2++) this.groupSizes[s2] = 0;
      }
      for (var i2 = this.indexOfGroup(e3 + 1), a2 = 0, c2 = t3.length; a2 < c2; a2++) this.tag.insertRule(i2, t3[a2]) && (this.groupSizes[e3]++, i2++);
    }, t2.clearGroup = function(e3) {
      if (e3 < this.length) {
        var t3 = this.groupSizes[e3], n2 = this.indexOfGroup(e3), r2 = n2 + t3;
        this.groupSizes[e3] = 0;
        for (var o2 = n2; o2 < r2; o2++) this.tag.deleteRule(n2);
      }
    }, t2.getGroup = function(e3) {
      var t3 = "";
      if (e3 >= this.length || 0 === this.groupSizes[e3]) return t3;
      for (var n2 = this.groupSizes[e3], r2 = this.indexOfGroup(e3), o2 = r2 + n2, s2 = r2; s2 < o2; s2++) t3 += this.tag.getRule(s2) + "/*!sc*/\n";
      return t3;
    }, e2;
  }();
  var T = /* @__PURE__ */ new Map();
  var x = /* @__PURE__ */ new Map();
  var k = 1;
  var V = function(e2) {
    if (T.has(e2)) return T.get(e2);
    for (; x.has(k); ) k++;
    var t2 = k++;
    return ((0 | t2) < 0 || t2 > 1 << 30) && D(16, "" + t2), T.set(e2, t2), x.set(t2, e2), t2;
  };
  var B = function(e2) {
    return x.get(e2);
  };
  var z = function(e2, t2) {
    t2 >= k && (k = t2 + 1), T.set(e2, t2), x.set(t2, e2);
  };
  var M = "style[" + N + '][data-styled-version="5.3.11"]';
  var G = new RegExp("^" + N + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)');
  var L = function(e2, t2, n2) {
    for (var r2, o2 = n2.split(","), s2 = 0, i2 = o2.length; s2 < i2; s2++) (r2 = o2[s2]) && e2.registerName(t2, r2);
  };
  var F = function(e2, t2) {
    for (var n2 = (t2.textContent || "").split("/*!sc*/\n"), r2 = [], o2 = 0, s2 = n2.length; o2 < s2; o2++) {
      var i2 = n2[o2].trim();
      if (i2) {
        var a2 = i2.match(G);
        if (a2) {
          var c2 = 0 | parseInt(a2[1], 10), u2 = a2[2];
          0 !== c2 && (z(u2, c2), L(e2, u2, a2[3]), e2.getTag().insertRules(c2, r2)), r2.length = 0;
        } else r2.push(i2);
      }
    }
  };
  var Y = function() {
    return "undefined" != typeof __webpack_nonce__ ? __webpack_nonce__ : null;
  };
  var q = function(e2) {
    var t2 = document.head, n2 = e2 || t2, r2 = document.createElement("style"), o2 = function(e3) {
      for (var t3 = e3.childNodes, n3 = t3.length; n3 >= 0; n3--) {
        var r3 = t3[n3];
        if (r3 && 1 === r3.nodeType && r3.hasAttribute(N)) return r3;
      }
    }(n2), s2 = void 0 !== o2 ? o2.nextSibling : null;
    r2.setAttribute(N, "active"), r2.setAttribute("data-styled-version", "5.3.11");
    var i2 = Y();
    return i2 && r2.setAttribute("nonce", i2), n2.insertBefore(r2, s2), r2;
  };
  var H = function() {
    function e2(e3) {
      var t3 = this.element = q(e3);
      t3.appendChild(document.createTextNode("")), this.sheet = function(e4) {
        if (e4.sheet) return e4.sheet;
        for (var t4 = document.styleSheets, n2 = 0, r2 = t4.length; n2 < r2; n2++) {
          var o2 = t4[n2];
          if (o2.ownerNode === e4) return o2;
        }
        D(17);
      }(t3), this.length = 0;
    }
    var t2 = e2.prototype;
    return t2.insertRule = function(e3, t3) {
      try {
        return this.sheet.insertRule(t3, e3), this.length++, true;
      } catch (e4) {
        return false;
      }
    }, t2.deleteRule = function(e3) {
      this.sheet.deleteRule(e3), this.length--;
    }, t2.getRule = function(e3) {
      var t3 = this.sheet.cssRules[e3];
      return void 0 !== t3 && "string" == typeof t3.cssText ? t3.cssText : "";
    }, e2;
  }();
  var $ = function() {
    function e2(e3) {
      var t3 = this.element = q(e3);
      this.nodes = t3.childNodes, this.length = 0;
    }
    var t2 = e2.prototype;
    return t2.insertRule = function(e3, t3) {
      if (e3 <= this.length && e3 >= 0) {
        var n2 = document.createTextNode(t3), r2 = this.nodes[e3];
        return this.element.insertBefore(n2, r2 || null), this.length++, true;
      }
      return false;
    }, t2.deleteRule = function(e3) {
      this.element.removeChild(this.nodes[e3]), this.length--;
    }, t2.getRule = function(e3) {
      return e3 < this.length ? this.nodes[e3].textContent : "";
    }, e2;
  }();
  var W = function() {
    function e2(e3) {
      this.rules = [], this.length = 0;
    }
    var t2 = e2.prototype;
    return t2.insertRule = function(e3, t3) {
      return e3 <= this.length && (this.rules.splice(e3, 0, t3), this.length++, true);
    }, t2.deleteRule = function(e3) {
      this.rules.splice(e3, 1), this.length--;
    }, t2.getRule = function(e3) {
      return e3 < this.length ? this.rules[e3] : "";
    }, e2;
  }();
  var U = C;
  var J = { isServer: !C, useCSSOMInjection: !I };
  var X = function() {
    function e2(e3, t3, n2) {
      void 0 === e3 && (e3 = w), void 0 === t3 && (t3 = {}), this.options = y({}, J, {}, e3), this.gs = t3, this.names = new Map(n2), this.server = !!e3.isServer, !this.server && C && U && (U = false, function(e4) {
        for (var t4 = document.querySelectorAll(M), n3 = 0, r2 = t4.length; n3 < r2; n3++) {
          var o2 = t4[n3];
          o2 && "active" !== o2.getAttribute(N) && (F(e4, o2), o2.parentNode && o2.parentNode.removeChild(o2));
        }
      }(this));
    }
    e2.registerId = function(e3) {
      return V(e3);
    };
    var t2 = e2.prototype;
    return t2.reconstructWithOptions = function(t3, n2) {
      return void 0 === n2 && (n2 = true), new e2(y({}, this.options, {}, t3), this.gs, n2 && this.names || void 0);
    }, t2.allocateGSInstance = function(e3) {
      return this.gs[e3] = (this.gs[e3] || 0) + 1;
    }, t2.getTag = function() {
      return this.tag || (this.tag = (n2 = (t3 = this.options).isServer, r2 = t3.useCSSOMInjection, o2 = t3.target, e3 = n2 ? new W(o2) : r2 ? new H(o2) : new $(o2), new j(e3)));
      var e3, t3, n2, r2, o2;
    }, t2.hasNameForId = function(e3, t3) {
      return this.names.has(e3) && this.names.get(e3).has(t3);
    }, t2.registerName = function(e3, t3) {
      if (V(e3), this.names.has(e3)) this.names.get(e3).add(t3);
      else {
        var n2 = /* @__PURE__ */ new Set();
        n2.add(t3), this.names.set(e3, n2);
      }
    }, t2.insertRules = function(e3, t3, n2) {
      this.registerName(e3, t3), this.getTag().insertRules(V(e3), n2);
    }, t2.clearNames = function(e3) {
      this.names.has(e3) && this.names.get(e3).clear();
    }, t2.clearRules = function(e3) {
      this.getTag().clearGroup(V(e3)), this.clearNames(e3);
    }, t2.clearTag = function() {
      this.tag = void 0;
    }, t2.toString = function() {
      return function(e3) {
        for (var t3 = e3.getTag(), n2 = t3.length, r2 = "", o2 = 0; o2 < n2; o2++) {
          var s2 = B(o2);
          if (void 0 !== s2) {
            var i2 = e3.names.get(s2), a2 = t3.getGroup(o2);
            if (i2 && a2 && i2.size) {
              var c2 = N + ".g" + o2 + '[id="' + s2 + '"]', u2 = "";
              void 0 !== i2 && i2.forEach(function(e4) {
                e4.length > 0 && (u2 += e4 + ",");
              }), r2 += "" + a2 + c2 + '{content:"' + u2 + '"}/*!sc*/\n';
            }
          }
        }
        return r2;
      }(this);
    }, e2;
  }();
  var Z = /(a)(d)/gi;
  var K = function(e2) {
    return String.fromCharCode(e2 + (e2 > 25 ? 39 : 97));
  };
  function Q(e2) {
    var t2, n2 = "";
    for (t2 = Math.abs(e2); t2 > 52; t2 = t2 / 52 | 0) n2 = K(t2 % 52) + n2;
    return (K(t2 % 52) + n2).replace(Z, "$1-$2");
  }
  var ee = function(e2, t2) {
    for (var n2 = t2.length; n2; ) e2 = 33 * e2 ^ t2.charCodeAt(--n2);
    return e2;
  };
  var te = function(e2) {
    return ee(5381, e2);
  };
  function ne(e2) {
    for (var t2 = 0; t2 < e2.length; t2 += 1) {
      var n2 = e2[t2];
      if (E(n2) && !_(n2)) return false;
    }
    return true;
  }
  var re = te("5.3.11");
  var oe = function() {
    function e2(e3, t2, n2) {
      this.rules = e3, this.staticRulesId = "", this.isStatic = false, this.componentId = t2, this.baseHash = ee(re, t2), this.baseStyle = n2, X.registerId(t2);
    }
    return e2.prototype.generateAndInjectStyles = function(e3, t2, n2) {
      var r2 = this.componentId, o2 = [];
      if (this.baseStyle && o2.push(this.baseStyle.generateAndInjectStyles(e3, t2, n2)), this.isStatic && !n2.hash) if (this.staticRulesId && t2.hasNameForId(r2, this.staticRulesId)) o2.push(this.staticRulesId);
      else {
        var s2 = _e(this.rules, e3, t2, n2).join(""), i2 = Q(ee(this.baseHash, s2) >>> 0);
        if (!t2.hasNameForId(r2, i2)) {
          var a2 = n2(s2, "." + i2, void 0, r2);
          t2.insertRules(r2, i2, a2);
        }
        o2.push(i2), this.staticRulesId = i2;
      }
      else {
        for (var c2 = this.rules.length, u2 = ee(this.baseHash, n2.hash), l2 = "", d2 = 0; d2 < c2; d2++) {
          var h = this.rules[d2];
          if ("string" == typeof h) l2 += h, u2 = ee(u2, h + d2);
          else if (h) {
            var p = _e(h, e3, t2, n2), f = Array.isArray(p) ? p.join("") : p;
            u2 = ee(u2, f + d2), l2 += f;
          }
        }
        if (l2) {
          var m2 = Q(u2 >>> 0);
          if (!t2.hasNameForId(r2, m2)) {
            var y2 = n2(l2, "." + m2, void 0, r2);
            t2.insertRules(r2, m2, y2);
          }
          o2.push(m2);
        }
      }
      return o2.join(" ");
    }, e2;
  }();
  var se = /^\s*\/\/.*$/gm;
  var ie = [":", "[", ".", "#"];
  function ae(e2) {
    var t2, n2, r2, o2, s2 = void 0 === e2 ? w : e2, i2 = s2.options, a2 = void 0 === i2 ? w : i2, c2 = s2.plugins, u2 = void 0 === c2 ? S : c2, l2 = new stylis_browser_esm_default(a2), d2 = [], p = /* @__PURE__ */ function(e3) {
      function t3(t4) {
        if (t4) try {
          e3(t4 + "}");
        } catch (e4) {
        }
      }
      return function(n3, r3, o3, s3, i3, a3, c3, u3, l3, d3) {
        switch (n3) {
          case 1:
            if (0 === l3 && 64 === r3.charCodeAt(0)) return e3(r3 + ";"), "";
            break;
          case 2:
            if (0 === u3) return r3 + "/*|*/";
            break;
          case 3:
            switch (u3) {
              case 102:
              case 112:
                return e3(o3[0] + r3), "";
              default:
                return r3 + (0 === d3 ? "/*|*/" : "");
            }
          case -2:
            r3.split("/*|*/}").forEach(t3);
        }
      };
    }(function(e3) {
      d2.push(e3);
    }), f = function(e3, r3, s3) {
      return 0 === r3 && -1 !== ie.indexOf(s3[n2.length]) || s3.match(o2) ? e3 : "." + t2;
    };
    function m2(e3, s3, i3, a3) {
      void 0 === a3 && (a3 = "&");
      var c3 = e3.replace(se, ""), u3 = s3 && i3 ? i3 + " " + s3 + " { " + c3 + " }" : c3;
      return t2 = a3, n2 = s3, r2 = new RegExp("\\" + n2 + "\\b", "g"), o2 = new RegExp("(\\" + n2 + "\\b){2,}"), l2(i3 || !s3 ? "" : s3, u3);
    }
    return l2.use([].concat(u2, [function(e3, t3, o3) {
      2 === e3 && o3.length && o3[0].lastIndexOf(n2) > 0 && (o3[0] = o3[0].replace(r2, f));
    }, p, function(e3) {
      if (-2 === e3) {
        var t3 = d2;
        return d2 = [], t3;
      }
    }])), m2.hash = u2.length ? u2.reduce(function(e3, t3) {
      return t3.name || D(15), ee(e3, t3.name);
    }, 5381).toString() : "", m2;
  }
  var ce = import_react.default.createContext();
  var ue = ce.Consumer;
  var le = import_react.default.createContext();
  var de = (le.Consumer, new X());
  var he = ae();
  function pe() {
    return (0, import_react.useContext)(ce) || de;
  }
  function fe() {
    return (0, import_react.useContext)(le) || he;
  }
  function me(e2) {
    var t2 = (0, import_react.useState)(e2.stylisPlugins), n2 = t2[0], s2 = t2[1], c2 = pe(), u2 = (0, import_react.useMemo)(function() {
      var t3 = c2;
      return e2.sheet ? t3 = e2.sheet : e2.target && (t3 = t3.reconstructWithOptions({ target: e2.target }, false)), e2.disableCSSOMInjection && (t3 = t3.reconstructWithOptions({ useCSSOMInjection: false })), t3;
    }, [e2.disableCSSOMInjection, e2.sheet, e2.target]), l2 = (0, import_react.useMemo)(function() {
      return ae({ options: { prefix: !e2.disableVendorPrefixes }, plugins: n2 });
    }, [e2.disableVendorPrefixes, n2]);
    return (0, import_react.useEffect)(function() {
      (0, import_shallowequal.default)(n2, e2.stylisPlugins) || s2(e2.stylisPlugins);
    }, [e2.stylisPlugins]), import_react.default.createElement(ce.Provider, { value: u2 }, import_react.default.createElement(le.Provider, { value: l2 }, true ? import_react.default.Children.only(e2.children) : e2.children));
  }
  var ye = function() {
    function e2(e3, t2) {
      var n2 = this;
      this.inject = function(e4, t3) {
        void 0 === t3 && (t3 = he);
        var r2 = n2.name + t3.hash;
        e4.hasNameForId(n2.id, r2) || e4.insertRules(n2.id, r2, t3(n2.rules, r2, "@keyframes"));
      }, this.toString = function() {
        return D(12, String(n2.name));
      }, this.name = e3, this.id = "sc-keyframes-" + e3, this.rules = t2;
    }
    return e2.prototype.getName = function(e3) {
      return void 0 === e3 && (e3 = he), this.name + e3.hash;
    }, e2;
  }();
  var ve = /([A-Z])/;
  var ge = /([A-Z])/g;
  var Se = /^ms-/;
  var we = function(e2) {
    return "-" + e2.toLowerCase();
  };
  function Ee(e2) {
    return ve.test(e2) ? e2.replace(ge, we).replace(Se, "-ms-") : e2;
  }
  var be = function(e2) {
    return null == e2 || false === e2 || "" === e2;
  };
  function _e(e2, n2, r2, o2) {
    if (Array.isArray(e2)) {
      for (var s2, i2 = [], a2 = 0, c2 = e2.length; a2 < c2; a2 += 1) "" !== (s2 = _e(e2[a2], n2, r2, o2)) && (Array.isArray(s2) ? i2.push.apply(i2, s2) : i2.push(s2));
      return i2;
    }
    if (be(e2)) return "";
    if (_(e2)) return "." + e2.styledComponentId;
    if (E(e2)) {
      if ("function" != typeof (l2 = e2) || l2.prototype && l2.prototype.isReactComponent || !n2) return e2;
      var u2 = e2(n2);
      return (0, import_react_is.isElement)(u2) && console.warn(b(e2) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."), _e(u2, n2, r2, o2);
    }
    var l2;
    return e2 instanceof ye ? r2 ? (e2.inject(r2, o2), e2.getName(o2)) : e2 : g(e2) ? function e3(t2, n3) {
      var r3, o3, s3 = [];
      for (var i3 in t2) t2.hasOwnProperty(i3) && !be(t2[i3]) && (Array.isArray(t2[i3]) && t2[i3].isCss || E(t2[i3]) ? s3.push(Ee(i3) + ":", t2[i3], ";") : g(t2[i3]) ? s3.push.apply(s3, e3(t2[i3], i3)) : s3.push(Ee(i3) + ": " + (r3 = i3, null == (o3 = t2[i3]) || "boolean" == typeof o3 || "" === o3 ? "" : "number" != typeof o3 || 0 === o3 || r3 in unitless_browser_esm_default || r3.startsWith("--") ? String(o3).trim() : o3 + "px") + ";"));
      return n3 ? [n3 + " {"].concat(s3, ["}"]) : s3;
    }(e2) : e2.toString();
  }
  var Ne = function(e2) {
    return Array.isArray(e2) && (e2.isCss = true), e2;
  };
  function Ae(e2) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++) n2[r2 - 1] = arguments[r2];
    return E(e2) || g(e2) ? Ne(_e(v(S, [e2].concat(n2)))) : 0 === n2.length && 1 === e2.length && "string" == typeof e2[0] ? e2 : Ne(_e(v(e2, n2)));
  }
  var Ce = /invalid hook call/i;
  var Ie = /* @__PURE__ */ new Set();
  var Pe = function(e2, t2) {
    if (true) {
      var n2 = "The component " + e2 + (t2 ? ' with the id of "' + t2 + '"' : "") + " has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.", r2 = console.error;
      try {
        var o2 = true;
        console.error = function(e3) {
          if (Ce.test(e3)) o2 = false, Ie.delete(n2);
          else {
            for (var t3 = arguments.length, s2 = new Array(t3 > 1 ? t3 - 1 : 0), i2 = 1; i2 < t3; i2++) s2[i2 - 1] = arguments[i2];
            r2.apply(void 0, [e3].concat(s2));
          }
        }, (0, import_react.useRef)(), o2 && !Ie.has(n2) && (console.warn(n2), Ie.add(n2));
      } catch (e3) {
        Ce.test(e3.message) && Ie.delete(n2);
      } finally {
        console.error = r2;
      }
    }
  };
  var Oe = function(e2, t2, n2) {
    return void 0 === n2 && (n2 = w), e2.theme !== n2.theme && e2.theme || t2 || n2.theme;
  };
  var Re = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
  var De = /(^-|-$)/g;
  function je(e2) {
    return e2.replace(Re, "-").replace(De, "");
  }
  var Te = function(e2) {
    return Q(te(e2) >>> 0);
  };
  function xe(e2) {
    return "string" == typeof e2 && e2.charAt(0) === e2.charAt(0).toLowerCase();
  }
  var ke = function(e2) {
    return "function" == typeof e2 || "object" == typeof e2 && null !== e2 && !Array.isArray(e2);
  };
  var Ve = function(e2) {
    return "__proto__" !== e2 && "constructor" !== e2 && "prototype" !== e2;
  };
  function Be(e2, t2, n2) {
    var r2 = e2[n2];
    ke(t2) && ke(r2) ? ze(r2, t2) : e2[n2] = t2;
  }
  function ze(e2) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++) n2[r2 - 1] = arguments[r2];
    for (var o2 = 0, s2 = n2; o2 < s2.length; o2++) {
      var i2 = s2[o2];
      if (ke(i2)) for (var a2 in i2) Ve(a2) && Be(e2, i2[a2], a2);
    }
    return e2;
  }
  var Me = import_react.default.createContext();
  var Ge = Me.Consumer;
  function Le(e2) {
    var t2 = (0, import_react.useContext)(Me), n2 = (0, import_react.useMemo)(function() {
      return function(e3, t3) {
        if (!e3) return D(14);
        if (E(e3)) {
          var n3 = e3(t3);
          return null !== n3 && !Array.isArray(n3) && "object" == typeof n3 ? n3 : D(7);
        }
        return Array.isArray(e3) || "object" != typeof e3 ? D(8) : t3 ? y({}, t3, {}, e3) : e3;
      }(e2.theme, t2);
    }, [e2.theme, t2]);
    return e2.children ? import_react.default.createElement(Me.Provider, { value: n2 }, e2.children) : null;
  }
  var Fe = {};
  function Ye(e2, t2, n2) {
    var o2 = _(e2), i2 = !xe(e2), a2 = t2.attrs, c2 = void 0 === a2 ? S : a2, l2 = t2.componentId, d2 = void 0 === l2 ? function(e3, t3) {
      var n3 = "string" != typeof e3 ? "sc" : je(e3);
      Fe[n3] = (Fe[n3] || 0) + 1;
      var r2 = n3 + "-" + Te("5.3.11" + n3 + Fe[n3]);
      return t3 ? t3 + "-" + r2 : r2;
    }(t2.displayName, t2.parentComponentId) : l2, h = t2.displayName, p = void 0 === h ? function(e3) {
      return xe(e3) ? "styled." + e3 : "Styled(" + b(e3) + ")";
    }(e2) : h, v2 = t2.displayName && t2.componentId ? je(t2.displayName) + "-" + t2.componentId : t2.componentId || d2, g2 = o2 && e2.attrs ? Array.prototype.concat(e2.attrs, c2).filter(Boolean) : c2, N2 = t2.shouldForwardProp;
    o2 && e2.shouldForwardProp && (N2 = t2.shouldForwardProp ? function(n3, r2, o3) {
      return e2.shouldForwardProp(n3, r2, o3) && t2.shouldForwardProp(n3, r2, o3);
    } : e2.shouldForwardProp);
    var A, C2 = new oe(n2, v2, o2 ? e2.componentStyle : void 0), I2 = C2.isStatic && 0 === c2.length, P = function(e3, t3) {
      return function(e4, t4, n3, r2) {
        var o3 = e4.attrs, i3 = e4.componentStyle, a3 = e4.defaultProps, c3 = e4.foldedComponentIds, l3 = e4.shouldForwardProp, d3 = e4.styledComponentId, h2 = e4.target, p2 = function(e5, t5, n4) {
          void 0 === e5 && (e5 = w);
          var r3 = y({}, t5, { theme: e5 }), o4 = {};
          return n4.forEach(function(e6) {
            var t6, n5, s2, i4 = e6;
            for (t6 in E(i4) && (i4 = i4(r3)), i4) r3[t6] = o4[t6] = "className" === t6 ? (n5 = o4[t6], s2 = i4[t6], n5 && s2 ? n5 + " " + s2 : n5 || s2) : i4[t6];
          }), [r3, o4];
        }(Oe(t4, (0, import_react.useContext)(Me), a3) || w, t4, o3), m2 = p2[0], v3 = p2[1], g3 = function(e5, t5, n4, r3) {
          var o4 = pe(), s2 = fe(), i4 = t5 ? e5.generateAndInjectStyles(w, o4, s2) : e5.generateAndInjectStyles(n4, o4, s2);
          return !t5 && r3 && r3(i4), i4;
        }(i3, r2, m2, true ? e4.warnTooManyClasses : void 0), S2 = n3, b2 = v3.$as || t4.$as || v3.as || t4.as || h2, _2 = xe(b2), N3 = v3 !== t4 ? y({}, t4, {}, v3) : t4, A2 = {};
        for (var C3 in N3) "$" !== C3[0] && "as" !== C3 && ("forwardedAs" === C3 ? A2.as = N3[C3] : (l3 ? l3(C3, isPropValid, b2) : !_2 || isPropValid(C3)) && (A2[C3] = N3[C3]));
        return t4.style && v3.style !== t4.style && (A2.style = y({}, t4.style, {}, v3.style)), A2.className = Array.prototype.concat(c3, d3, g3 !== d3 ? g3 : null, t4.className, v3.className).filter(Boolean).join(" "), A2.ref = S2, (0, import_react.createElement)(b2, A2);
      }(A, e3, t3, I2);
    };
    return P.displayName = p, (A = import_react.default.forwardRef(P)).attrs = g2, A.componentStyle = C2, A.displayName = p, A.shouldForwardProp = N2, A.foldedComponentIds = o2 ? Array.prototype.concat(e2.foldedComponentIds, e2.styledComponentId) : S, A.styledComponentId = v2, A.target = o2 ? e2.target : e2, A.withComponent = function(e3) {
      var r2 = t2.componentId, o3 = function(e4, t3) {
        if (null == e4) return {};
        var n3, r3, o4 = {}, s3 = Object.keys(e4);
        for (r3 = 0; r3 < s3.length; r3++) n3 = s3[r3], t3.indexOf(n3) >= 0 || (o4[n3] = e4[n3]);
        return o4;
      }(t2, ["componentId"]), s2 = r2 && r2 + "-" + (xe(e3) ? e3 : je(b(e3)));
      return Ye(e3, y({}, o3, { attrs: g2, componentId: s2 }), n2);
    }, Object.defineProperty(A, "defaultProps", { get: function() {
      return this._foldedDefaultProps;
    }, set: function(t3) {
      this._foldedDefaultProps = o2 ? ze({}, e2.defaultProps, t3) : t3;
    } }), Pe(p, v2), A.warnTooManyClasses = /* @__PURE__ */ function(e3, t3) {
      var n3 = {}, r2 = false;
      return function(o3) {
        if (!r2 && (n3[o3] = true, Object.keys(n3).length >= 200)) {
          var s2 = t3 ? ' with the id of "' + t3 + '"' : "";
          console.warn("Over 200 classes were generated for component " + e3 + s2 + ".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), r2 = true, n3 = {};
        }
      };
    }(p, v2), Object.defineProperty(A, "toString", { value: function() {
      return "." + A.styledComponentId;
    } }), i2 && (0, import_hoist_non_react_statics.default)(A, e2, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true, withComponent: true }), A;
  }
  var qe = function(e2) {
    return function e3(t2, r2, o2) {
      if (void 0 === o2 && (o2 = w), !(0, import_react_is.isValidElementType)(r2)) return D(1, String(r2));
      var s2 = function() {
        return t2(r2, o2, Ae.apply(void 0, arguments));
      };
      return s2.withConfig = function(n2) {
        return e3(t2, r2, y({}, o2, {}, n2));
      }, s2.attrs = function(n2) {
        return e3(t2, r2, y({}, o2, { attrs: Array.prototype.concat(o2.attrs, n2).filter(Boolean) }));
      }, s2;
    }(Ye, e2);
  };
  ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function(e2) {
    qe[e2] = qe(e2);
  });
  var He = function() {
    function e2(e3, t3) {
      this.rules = e3, this.componentId = t3, this.isStatic = ne(e3), X.registerId(this.componentId + 1);
    }
    var t2 = e2.prototype;
    return t2.createStyles = function(e3, t3, n2, r2) {
      var o2 = r2(_e(this.rules, t3, n2, r2).join(""), ""), s2 = this.componentId + e3;
      n2.insertRules(s2, s2, o2);
    }, t2.removeStyles = function(e3, t3) {
      t3.clearRules(this.componentId + e3);
    }, t2.renderStyles = function(e3, t3, n2, r2) {
      e3 > 2 && X.registerId(this.componentId + e3), this.removeStyles(e3, n2), this.createStyles(e3, t3, n2, r2);
    }, e2;
  }();
  var Ue = function() {
    function e2() {
      var e3 = this;
      this._emitSheetCSS = function() {
        var t3 = e3.instance.toString();
        if (!t3) return "";
        var n2 = Y();
        return "<style " + [n2 && 'nonce="' + n2 + '"', N + '="true"', 'data-styled-version="5.3.11"'].filter(Boolean).join(" ") + ">" + t3 + "</style>";
      }, this.getStyleTags = function() {
        return e3.sealed ? D(2) : e3._emitSheetCSS();
      }, this.getStyleElement = function() {
        var t3;
        if (e3.sealed) return D(2);
        var n2 = ((t3 = {})[N] = "", t3["data-styled-version"] = "5.3.11", t3.dangerouslySetInnerHTML = { __html: e3.instance.toString() }, t3), o2 = Y();
        return o2 && (n2.nonce = o2), [import_react.default.createElement("style", y({}, n2, { key: "sc-0-0" }))];
      }, this.seal = function() {
        e3.sealed = true;
      }, this.instance = new X({ isServer: true }), this.sealed = false;
    }
    var t2 = e2.prototype;
    return t2.collectStyles = function(e3) {
      return this.sealed ? D(2) : import_react.default.createElement(me, { sheet: this.instance }, e3);
    }, t2.interleaveWithNodeStream = function(e3) {
      return D(3);
    }, e2;
  }();
  var Je = function(e2) {
    var t2 = import_react.default.forwardRef(function(t3, n2) {
      var o2 = (0, import_react.useContext)(Me), i2 = e2.defaultProps, a2 = Oe(t3, o2, i2);
      return void 0 === a2 && console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class "' + b(e2) + '"'), import_react.default.createElement(e2, y({}, t3, { theme: a2, ref: n2 }));
    });
    return (0, import_hoist_non_react_statics.default)(t2, e2), t2.displayName = "WithTheme(" + b(e2) + ")", t2;
  };
  "undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"), "undefined" != typeof window && (window["__styled-components-init__"] = window["__styled-components-init__"] || 0, 1 === window["__styled-components-init__"] && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window["__styled-components-init__"] += 1);
  var styled_components_browser_esm_default = qe;

  // node_modules/@ls1intum/apollon/lib/es6/components/theme/styles.js
  var styled = styled_components_browser_esm_default;
  var css = Ae;
  var apollonTheme = {
    color: {
      primary: "var(--apollon-primary, #2a8fbd)",
      secondary: "var(--apollon-secondary, #6c757d)",
      warningYellow: "var(--apollon-warning-yellow, #ffc800)",
      background: "var(--apollon-background, #ffffff)",
      backgroundVariant: "var(--apollon-background-variant, #e5e5e5)",
      grid: "var(--apollon-grid, rgba(36, 39, 36, 0.1))",
      primaryContrast: "var(--apollon-primary-contrast, #212529)",
      gray: "var(--apollon-gray, #e9ecef)",
      grayAccent: "var(--apollon-gray-variant, #343a40)"
    },
    font: {
      color: "var(--apollon-primary-contrast, #212529)",
      family: "Helvetica Neue, Helvetica, Arial, sans-serif",
      size: 16
    },
    interactive: {
      normal: "rgba(0, 220, 0, 0.3)",
      hovered: "rgba(0, 220, 0, 0.15)"
    }
  };
  var defaults = () => {
    return apollonTheme;
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/theme/themedComponents.js
  var ThemedPolyline = styled.polyline.attrs((props) => ({
    fillColor: props.fillColor,
    strokeColor: props.strokeColor,
    stroke: props.strokeColor || "black",
    fill: props.fillColor || "white"
  }))`
  fill: ${(props) => props.fillColor || props.theme.color.background};
  stroke: ${(props) => props.strokeColor || props.theme.color.primaryContrast};
`;
  var ThemedPath = styled.path.attrs((props) => ({
    fillColor: props.fillColor,
    strokeColor: props.strokeColor,
    stroke: props.strokeColor || "black",
    fill: props.fillColor || "white"
  }))`
  fill: ${(props) => props.fillColor || props.theme.color.background};
  stroke: ${(props) => props.strokeColor || props.theme.color.primaryContrast};
`;
  var ThemedPathContrast = styled.path.attrs((props) => ({
    fillColor: props.fillColor,
    strokeColor: props.strokeColor,
    stroke: props.strokeColor || "white",
    fill: props.fillColor || "black"
  }))`
  fill: ${(props) => props.fillColor || props.theme.color.primaryContrast};
  stroke: ${(props) => props.strokeColor || props.theme.color.background};
`;
  var ThemedRect = styled.rect.attrs((props) => ({
    fillColor: props.fillColor,
    strokeColor: props.strokeColor,
    stroke: props.strokeColor || "black",
    fill: props.fillColor || "white"
  }))`
  fill: ${(props) => props.fillColor || props.theme.color.background};
  stroke: ${(props) => props.strokeColor || props.theme.color.primaryContrast};
`;
  var ThemedRectContrast = styled.rect.attrs((props) => ({
    fillColor: props.fillColor,
    strokeColor: props.strokeColor,
    stroke: props.strokeColor || "white",
    fill: props.fillColor || "black"
  }))`
  fill: ${(props) => props.fillColor || props.theme.color.primaryContrast};
  stroke: ${(props) => props.strokeColor || props.theme.color.background};
`;
  var ThemedCircle = styled.circle.attrs((props) => ({
    fillColor: props.fillColor,
    strokeColor: props.strokeColor,
    stroke: props.strokeColor || "black",
    fill: props.fillColor || "white"
  }))`
  fill: ${(props) => props.fillColor || props.theme.color.background};
  stroke: ${(props) => props.strokeColor || props.theme.color.primaryContrast};
`;
  var ThemedCircleContrast = styled.circle.attrs((props) => ({
    fillColor: props.fillColor,
    strokeColor: props.strokeColor,
    stroke: props.strokeColor || "white",
    fill: props.fillColor || "black"
  }))`
  fill: ${(props) => props.fillColor || props.theme.color.primaryContrast};
  stroke: ${(props) => props.strokeColor || props.theme.color.background};
`;
  var ThemedEllipse = styled.ellipse.attrs((props) => ({
    fillColor: props.fillColor,
    strokeColor: props.strokeColor,
    stroke: props.strokeColor || "black",
    fill: props.fillColor || "white"
  }))`
  fill: ${(props) => props.fillColor || props.theme.color.background};
  stroke: ${(props) => props.strokeColor || props.theme.color.primaryContrast};
`;
  var ThemedLine = styled.line.attrs((props) => ({
    strokeColor: props.strokeColor,
    stroke: props.strokeColor || "black"
  }))`
  stroke: ${(props) => props.strokeColor || props.theme.color.primaryContrast};
`;

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-association/uml-association-component.js
  var Marker = {
    Arrow: (id2, color) => import_react2.default.createElement(
      "marker",
      { id: id2, viewBox: "0 0 30 30", markerWidth: 22, markerHeight: 30, refX: 30, refY: 15, orient: "auto", markerUnits: "strokeWidth" },
      import_react2.default.createElement(ThemedPath, { d: `M0,29 L30,15 L0,1`, fillColor: "none", strokeColor: color })
    ),
    Rhombus: (id2, color) => import_react2.default.createElement(
      "marker",
      { id: id2, viewBox: "0 0 30 30", markerWidth: "30", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
      import_react2.default.createElement(ThemedPath, { d: "M0,15 L15,22 L30,15 L15,8 z", fillColor: color, strokeColor: color })
    ),
    RhombusFilled: (id2, color) => import_react2.default.createElement(
      "marker",
      { id: id2, viewBox: "0 0 30 30", markerWidth: "30", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
      import_react2.default.createElement(ThemedPathContrast, { d: "M0,15 L15,22 L30,15 L15,8 z", fillColor: color })
    ),
    Triangle: (id2, color) => import_react2.default.createElement(
      "marker",
      { id: id2, viewBox: "0 0 30 30", markerWidth: "22", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
      import_react2.default.createElement(ThemedPath, { d: "M0,1 L0,29 L30,15 z", strokeColor: color })
    )
  };
  var layoutTextForUMLAssociation = (location, position) => {
    switch (location) {
      case Direction.Up:
      case Direction.Topright:
      case Direction.Topleft:
        return {
          dx: position === "TOP" ? -5 : 5,
          textAnchor: position === "TOP" ? "end" : "start"
        };
      case Direction.Right:
      case Direction.Upright:
      case Direction.Downright:
        return {
          dy: position === "TOP" ? -10 : 21,
          textAnchor: "start"
        };
      case Direction.Down:
      case Direction.Bottomright:
      case Direction.Bottomleft:
        return {
          dx: position === "TOP" ? -5 : 5,
          dy: 10,
          textAnchor: position === "TOP" ? "end" : "start"
        };
      case Direction.Left:
      case Direction.Upleft:
      case Direction.Downleft:
        return {
          dy: position === "TOP" ? -10 : 21,
          textAnchor: "end"
        };
    }
  };
  var computeTextPositionForUMLAssociation = (alignmentPath, hasMarker = false) => {
    const distance = hasMarker ? 31 : 8;
    if (alignmentPath.length < 2)
      return new Point();
    const vector = alignmentPath[1].subtract(alignmentPath[0]);
    return alignmentPath[0].add(vector.normalize().scale(distance));
  };
  var getMarkerForTypeForUMLAssociation = (relationshipType) => {
    return ((type) => {
      switch (type) {
        case ClassRelationshipType.ClassDependency:
        case ClassRelationshipType.ClassUnidirectional:
          return Marker.Arrow;
        case ClassRelationshipType.ClassAggregation:
          return Marker.Rhombus;
        case ClassRelationshipType.ClassComposition:
          return Marker.RhombusFilled;
        case ClassRelationshipType.ClassInheritance:
        case ClassRelationshipType.ClassRealization:
          return Marker.Triangle;
      }
    })(relationshipType);
  };
  var UMLAssociationComponent = ({ element }) => {
    const marker = getMarkerForTypeForUMLAssociation(element.type);
    const stroke = ((type) => {
      switch (type) {
        case ClassRelationshipType.ClassDependency:
        case ClassRelationshipType.ClassRealization:
          return 7;
      }
    })(element.type);
    const path = element.path.map((point) => new Point(point.x, point.y));
    const source = computeTextPositionForUMLAssociation(path);
    const target = computeTextPositionForUMLAssociation(path.reverse(), !!marker);
    const id2 = `marker-${element.id}`;
    const textFill = element.textColor ? { fill: element.textColor } : {};
    return import_react2.default.createElement(
      "g",
      null,
      marker && marker(id2, element.strokeColor),
      import_react2.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, markerEnd: `url(#${id2})`, strokeDasharray: stroke }),
      import_react2.default.createElement("text", { x: source.x || 0, y: source.y || 0, ...layoutTextForUMLAssociation(element.source.direction, "BOTTOM"), pointerEvents: "none", style: { ...textFill } }, element.source.multiplicity),
      import_react2.default.createElement("text", { x: target.x || 0, y: target.y || 0, ...layoutTextForUMLAssociation(element.target.direction, "BOTTOM"), pointerEvents: "none", style: { ...textFill } }, element.target.multiplicity),
      import_react2.default.createElement("text", { x: source.x || 0, y: source.y || 0, ...layoutTextForUMLAssociation(element.source.direction, "TOP"), pointerEvents: "none", style: { ...textFill } }, element.source.role),
      import_react2.default.createElement("text", { x: target.x || 0, y: target.y || 0, ...layoutTextForUMLAssociation(element.target.direction, "TOP"), pointerEvents: "none", style: { ...textFill } }, element.target.role)
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-association/uml-association.js
  var textWithLayoutPropertiesToBounds = (layer, anchor, text, layoutOptions) => {
    const textSize = Text.size(layer, text, { textAnchor: layoutOptions.textAnchor });
    return {
      bounds: {
        x: anchor.x + (layoutOptions.textAnchor === "end" ? -textSize.width : 0) + (layoutOptions.dx ? layoutOptions.dx : 0),
        y: anchor.y + (layoutOptions.dy ? layoutOptions.dy : 0),
        width: textSize.width,
        height: textSize.height
      }
    };
  };
  var UMLAssociation = class extends UMLRelationship {
    constructor(values) {
      super();
      this.source = {
        direction: Direction.Up,
        element: "",
        multiplicity: "",
        role: ""
      };
      this.target = {
        direction: Direction.Up,
        element: "",
        multiplicity: "",
        role: ""
      };
      assign(this, values);
    }
    render(canvas, source, target) {
      super.render(canvas, source, target);
      const pathBounds = this.bounds;
      const sourceMultiplicity = layoutTextForUMLAssociation(this.source.direction, "BOTTOM");
      const targetMultiplicity = layoutTextForUMLAssociation(this.target.direction, "BOTTOM");
      const sourceRole = layoutTextForUMLAssociation(this.source.direction, "TOP");
      const targetRole = layoutTextForUMLAssociation(this.target.direction, "TOP");
      const marker = getMarkerForTypeForUMLAssociation(this.type);
      const path = this.path.map((point) => new Point(point.x, point.y));
      const sourceAnchor = computeTextPositionForUMLAssociation(path).add(this.bounds.x, this.bounds.y);
      const targetAnchor = computeTextPositionForUMLAssociation(path.reverse(), !!marker).add(this.bounds.x, this.bounds.y);
      const boundingElements = [
        textWithLayoutPropertiesToBounds(canvas, sourceAnchor, this.source.multiplicity, sourceMultiplicity),
        textWithLayoutPropertiesToBounds(canvas, targetAnchor, this.target.multiplicity, targetMultiplicity),
        textWithLayoutPropertiesToBounds(canvas, sourceAnchor, this.source.role, sourceRole),
        textWithLayoutPropertiesToBounds(canvas, targetAnchor, this.target.role, targetRole)
      ];
      this.bounds = computeBoundingBoxForElements([this, ...boundingElements]);
      const horizontalTranslation = pathBounds.x - this.bounds.x;
      const verticalTranslation = pathBounds.y - this.bounds.y;
      this.path.forEach((point) => {
        point.x += horizontalTranslation;
        point.y += verticalTranslation;
      });
      return [this];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-aggregation/uml-class-aggregation.js
  var UMLClassAggregation = class extends UMLAssociation {
    constructor() {
      super(...arguments);
      this.type = ClassRelationshipType.ClassAggregation;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-bidirectional/uml-class-bidirectional.js
  var UMLClassBidirectional = class extends UMLAssociation {
    constructor() {
      super(...arguments);
      this.type = ClassRelationshipType.ClassBidirectional;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-composition/uml-class-composition.js
  var UMLClassComposition = class extends UMLAssociation {
    constructor() {
      super(...arguments);
      this.type = ClassRelationshipType.ClassComposition;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-dependency/uml-class-dependency.js
  var UMLClassDependency = class extends UMLAssociation {
    constructor() {
      super(...arguments);
      this.type = ClassRelationshipType.ClassDependency;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-inheritance/uml-class-inheritance.js
  var UMLClassInheritance = class extends UMLAssociation {
    constructor() {
      super(...arguments);
      this.type = ClassRelationshipType.ClassInheritance;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-realization/uml-class-realization.js
  var UMLClassRealization = class extends UMLAssociation {
    constructor() {
      super(...arguments);
      this.type = ClassRelationshipType.ClassRealization;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-unidirectional/uml-class-unidirectional.js
  var UMLClassUnidirectional = class extends UMLAssociation {
    constructor() {
      super(...arguments);
      this.type = ClassRelationshipType.ClassUnidirectional;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-communication-diagram/uml-communication-link/uml-communication-link.js
  var UMLCommunicationLink = class extends UMLRelationship {
    constructor(values) {
      super();
      this.type = CommunicationRelationshipType.CommunicationLink;
      this.messages = [];
      assign(this, values);
    }
    serialize() {
      return {
        ...super.serialize(),
        messages: this.messages.reduce((acc, message) => ({ ...acc, [message.id]: message }), {})
      };
    }
    deserialize(values, children) {
      const assert = (v2) => v2.type === CommunicationRelationshipType.CommunicationLink;
      if (!assert(values)) {
        return;
      }
      super.deserialize(values, children);
      this.messages = Object.values(values.messages).map((message) => new CommunicationLinkMessage(message));
    }
    render(canvas, source, target) {
      super.render(canvas, source, target);
      const pathBounds = this.bounds;
      const path = this.path.map((point) => new Point(point.x, point.y));
      let distance = path.reduce((length, point, i2, points) => i2 + 1 < points.length ? length + points[i2 + 1].subtract(point).length : length, 0) / 2;
      let sourceArrowDirection;
      let messagePosition;
      for (let index = 0; index < path.length - 1; index++) {
        const vector = path[index + 1].subtract(path[index]);
        if (vector.length > distance) {
          const norm = vector.normalize();
          sourceArrowDirection = Math.abs(norm.x) > Math.abs(norm.y) ? norm.x > 0 ? Direction.Left : Direction.Right : norm.y > 0 ? Direction.Up : Direction.Down;
          messagePosition = path[index].add(norm.scale(distance));
          break;
        }
        distance -= vector.length;
      }
      if (!sourceArrowDirection || !messagePosition) {
        throw Error(`Could not determine direction or messagePosition for CommunicationLink. 
 MessagePosition: ${messagePosition} 
 Direction: ${sourceArrowDirection}`);
      }
      messagePosition = messagePosition.add(pathBounds.x, pathBounds.y);
      const sourceElements = this.messages.filter((message) => message.direction === "source");
      const targetElements = this.messages.filter((message) => message.direction === "target");
      const elementsForBoundingBoxCalculation = [{ bounds: pathBounds }];
      if (sourceElements && sourceElements.length > 0) {
        const sourceMessagesBoundingBox = this.computeBoundingBoxForMessages(canvas, messagePosition, sourceElements, sourceArrowDirection);
        elementsForBoundingBoxCalculation.push({ bounds: sourceMessagesBoundingBox });
      }
      const targetArrowDirection = getOppositeDirection(sourceArrowDirection);
      if (targetElements && targetElements.length > 0) {
        const targetMessagesBoundingBox = this.computeBoundingBoxForMessages(canvas, messagePosition, targetElements, targetArrowDirection);
        elementsForBoundingBoxCalculation.push({ bounds: targetMessagesBoundingBox });
      }
      this.bounds = computeBoundingBoxForElements(elementsForBoundingBoxCalculation);
      const horizontalTranslation = pathBounds.x - this.bounds.x;
      const verticalTranslation = pathBounds.y - this.bounds.y;
      this.path.forEach((point) => {
        point.x += horizontalTranslation;
        point.y += verticalTranslation;
      });
      this.messages.forEach((message) => {
        message.bounds.x += horizontalTranslation - pathBounds.x;
        message.bounds.y += verticalTranslation - pathBounds.y;
      });
      return [this];
    }
    computeBoundingBoxForMessages(canvas, messagePosition, messages, arrowDirection) {
      const arrowSize = Text.size(canvas, "\u27F6", { fontWeight: "bold", fontSize: "120%" });
      let y2 = arrowDirection === Direction.Left ? messagePosition.y - arrowSize.height : arrowDirection === Direction.Right ? messagePosition.y + Text.size(canvas, messages[0].name).height + arrowSize.height : messagePosition.y;
      const x2 = arrowDirection === Direction.Up ? messagePosition.x + arrowSize.width : arrowDirection === Direction.Down ? messagePosition.x - arrowSize.width : messagePosition.x;
      for (const message of messages) {
        const messageSize = Text.size(canvas, message.name);
        if (arrowDirection === Direction.Right) {
          message.bounds.x = x2 - messageSize.width / 2;
          message.bounds.y = y2;
          message.bounds.width = messageSize.width;
          message.bounds.height = messageSize.height;
          y2 += messageSize.height;
        } else if (arrowDirection === Direction.Down) {
          message.bounds.x = x2 - messageSize.width;
          message.bounds.y = y2;
          message.bounds.width = messageSize.width;
          message.bounds.height = messageSize.height;
          y2 += messageSize.height;
        } else if (arrowDirection === Direction.Up) {
          message.bounds.x = x2;
          message.bounds.y = y2;
          message.bounds.width = messageSize.width;
          message.bounds.height = messageSize.height;
          y2 += messageSize.height;
        } else if (arrowDirection === Direction.Left) {
          message.bounds.x = x2 - messageSize.width / 2;
          message.bounds.y = y2;
          message.bounds.width = messageSize.width;
          message.bounds.height = messageSize.height;
          y2 -= messageSize.height;
        }
      }
      return computeBoundingBoxForElements(messages);
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-dependency/uml-component-dependency.js
  var UMLDependency = class extends UMLRelationship {
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component-dependency/uml-component-dependency.js
  var UMLComponentDependency = class extends UMLDependency {
    constructor() {
      super(...arguments);
      this.type = ComponentRelationshipType.ComponentDependency;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-interface-provided/uml-interface-provided.js
  var UMLInterfaceProvided = class extends UMLRelationship {
  };
  UMLInterfaceProvided.features = { ...UMLRelationship.features, variable: false };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component-interface-provided/uml-component-interface-provided.js
  var UMLComponentInterfaceProvided = class extends UMLInterfaceProvided {
    constructor() {
      super(...arguments);
      this.type = ComponentRelationshipType.ComponentInterfaceProvided;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-interface-required/uml-interface-requires-constants.js
  var REQUIRED_INTERFACE_MARKER_SIZE = 27;

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-interface-required/uml-interface-required.js
  var UMLInterfaceRequired = class extends UMLRelationship {
    render(canvas, source, target) {
      super.render(canvas, source, target);
      const pathBounds = this.bounds;
      const lastPathPoint = this.path[this.path.length - 1];
      const pathEnd = new Point(this.bounds.x, this.bounds.y).add(lastPathPoint.x, lastPathPoint.y);
      const markerBoundingBox = {
        bounds: {
          x: pathEnd.x - Math.floor(REQUIRED_INTERFACE_MARKER_SIZE / 2),
          y: pathEnd.y - Math.floor(REQUIRED_INTERFACE_MARKER_SIZE / 2),
          width: REQUIRED_INTERFACE_MARKER_SIZE,
          height: REQUIRED_INTERFACE_MARKER_SIZE
        }
      };
      this.bounds = computeBoundingBoxForElements([this, markerBoundingBox]);
      const horizontalTranslation = pathBounds.x - this.bounds.x;
      const verticalTranslation = pathBounds.y - this.bounds.y;
      this.path.forEach((point) => {
        point.x += horizontalTranslation;
        point.y += verticalTranslation;
      });
      return [this];
    }
  };
  UMLInterfaceRequired.features = { ...UMLRelationship.features, variable: false };
  UMLInterfaceRequired.isUMLInterfaceRequired = (element) => {
    return UMLInterfaceRequired.isUMLRelationship(element) && (element.type === DeploymentRelationshipType.DeploymentInterfaceRequired || element.type === ComponentRelationshipType.ComponentInterfaceRequired);
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component-interface-required/uml-component-interface-required.js
  var UMLComponentInterfaceRequired = class extends UMLInterfaceRequired {
    constructor() {
      super(...arguments);
      this.type = ComponentRelationshipType.ComponentInterfaceRequired;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-association/uml-deployment-association.js
  var UMLDeploymentAssociation = class extends UMLRelationshipCenteredDescription {
    constructor() {
      super(...arguments);
      this.type = DeploymentRelationshipType.DeploymentAssociation;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-object-diagram/uml-object-link/uml-object-link.js
  var UMLObjectLink = class extends UMLRelationship {
    constructor() {
      super(...arguments);
      this.type = ObjectRelationshipType.ObjectLink;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-association/uml-use-case-association.js
  var UMLUseCaseAssociation = class extends UMLRelationship {
    constructor() {
      super(...arguments);
      this.type = UseCaseRelationshipType.UseCaseAssociation;
    }
  };
  UMLUseCaseAssociation.features = { ...UMLRelationship.features, straight: true };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-extend/uml-use-case-extend.js
  var UMLUseCaseExtend = class extends UMLRelationship {
    constructor() {
      super(...arguments);
      this.type = UseCaseRelationshipType.UseCaseExtend;
    }
  };
  UMLUseCaseExtend.features = { ...UMLRelationship.features, straight: true };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-generalization/uml-use-case-generalization.js
  var UMLUseCaseGeneralization = class extends UMLRelationship {
    constructor() {
      super(...arguments);
      this.type = UseCaseRelationshipType.UseCaseGeneralization;
    }
  };
  UMLUseCaseGeneralization.features = { ...UMLRelationship.features, straight: true };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-include/uml-use-case-include.js
  var UMLUseCaseInclude = class extends UMLRelationship {
    constructor() {
      super(...arguments);
      this.type = UseCaseRelationshipType.UseCaseInclude;
    }
  };
  UMLUseCaseInclude.features = { ...UMLRelationship.features, straight: true };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-interface-provided/uml-deployment-interface-provided.js
  var UMLDeploymentInterfaceProvided = class extends UMLInterfaceProvided {
    constructor() {
      super(...arguments);
      this.type = DeploymentRelationshipType.DeploymentInterfaceProvided;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-interface-required/uml-deployment-interface-required.js
  var UMLDeploymentInterfaceRequired = class extends UMLInterfaceRequired {
    constructor() {
      super(...arguments);
      this.type = DeploymentRelationshipType.DeploymentInterfaceRequired;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-dependency/uml-deployment-dependency.js
  var UMLDeploymentDependency = class extends UMLDependency {
    constructor() {
      super(...arguments);
      this.type = DeploymentRelationshipType.DeploymentDependency;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/uml-petri-net-arc/uml-petri-net-arc.js
  var UMLPetriNetArc = class _UMLPetriNetArc extends UMLRelationship {
    constructor(values) {
      super(values);
      this.type = PetriNetRelationshipType.PetriNetArc;
      this.name = _UMLPetriNetArc.defaultMultiplicity;
      this.name = values && values.name || this.name;
    }
  };
  UMLPetriNetArc.features = { ...UMLRelationship.features, straight: true };
  UMLPetriNetArc.defaultMultiplicity = "1";

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-reachability-graph/uml-reachability-graph-arc/uml-reachability-graph-arc.js
  var UMLReachabilityGraphArc = class _UMLReachabilityGraphArc extends UMLRelationshipCenteredDescription {
    constructor(values) {
      super(values);
      this.type = ReachabilityGraphRelationshipType.ReachabilityGraphArc;
      this.name = _UMLReachabilityGraphArc.transition;
      this.name = values && values.name || this.name;
    }
  };
  UMLReachabilityGraphArc.features = { ...UMLRelationship.features };
  UMLReachabilityGraphArc.transition = "t";

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/syntax-tree-link/syntax-tree-link.js
  var SyntaxTreeLink = class extends UMLRelationship {
    constructor() {
      super(...arguments);
      this.type = SyntaxTreeRelationshipType.SyntaxTreeLink;
    }
  };
  SyntaxTreeLink.features = { ...UMLRelationship.features, straight: true };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-flowline/flowchart-flowline.js
  var FlowchartFlowline = class extends UMLRelationship {
    constructor() {
      super(...arguments);
      this.type = FlowchartRelationshipType.FlowchartFlowline;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-flow/bpmn-flow.js
  var BPMNFlow = class _BPMNFlow extends UMLRelationshipCenteredDescription {
    constructor(values) {
      super(values);
      this.type = BPMNRelationshipType.BPMNFlow;
      this.name = "";
      this.name = values?.name || this.name;
      this.flowType = values?.flowType || _BPMNFlow.defaultFlowType;
    }
    serialize(children) {
      return {
        ...super.serialize(),
        type: this.type,
        flowType: this.flowType
      };
    }
    deserialize(values, children) {
      super.deserialize(values, children);
      this.flowType = values.flowType || _BPMNFlow.defaultFlowType;
    }
  };
  BPMNFlow.features = { ...UMLRelationship.features };
  BPMNFlow.defaultFlowType = "sequence";

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-relationships.js
  var UMLRelationships = {
    [UMLRelationshipType.ClassAggregation]: UMLClassAggregation,
    [UMLRelationshipType.ClassBidirectional]: UMLClassBidirectional,
    [UMLRelationshipType.ClassComposition]: UMLClassComposition,
    [UMLRelationshipType.ClassDependency]: UMLClassDependency,
    [UMLRelationshipType.ClassInheritance]: UMLClassInheritance,
    [UMLRelationshipType.ClassRealization]: UMLClassRealization,
    [UMLRelationshipType.ClassUnidirectional]: UMLClassUnidirectional,
    [UMLRelationshipType.ObjectLink]: UMLObjectLink,
    [UMLRelationshipType.ActivityControlFlow]: UMLActivityControlFlow,
    [UMLRelationshipType.UseCaseAssociation]: UMLUseCaseAssociation,
    [UMLRelationshipType.UseCaseExtend]: UMLUseCaseExtend,
    [UMLRelationshipType.UseCaseGeneralization]: UMLUseCaseGeneralization,
    [UMLRelationshipType.UseCaseInclude]: UMLUseCaseInclude,
    [UMLRelationshipType.CommunicationLink]: UMLCommunicationLink,
    [UMLRelationshipType.ComponentDependency]: UMLComponentDependency,
    [UMLRelationshipType.ComponentInterfaceProvided]: UMLComponentInterfaceProvided,
    [UMLRelationshipType.ComponentInterfaceRequired]: UMLComponentInterfaceRequired,
    [UMLRelationshipType.DeploymentAssociation]: UMLDeploymentAssociation,
    [UMLRelationshipType.DeploymentDependency]: UMLDeploymentDependency,
    [UMLRelationshipType.DeploymentInterfaceProvided]: UMLDeploymentInterfaceProvided,
    [UMLRelationshipType.DeploymentInterfaceRequired]: UMLDeploymentInterfaceRequired,
    [UMLRelationshipType.PetriNetArc]: UMLPetriNetArc,
    [UMLRelationshipType.ReachabilityGraphArc]: UMLReachabilityGraphArc,
    [UMLRelationshipType.SyntaxTreeLink]: SyntaxTreeLink,
    [UMLRelationshipType.FlowchartFlowline]: FlowchartFlowline,
    [UMLRelationshipType.BPMNFlow]: BPMNFlow
  };

  // node_modules/@ls1intum/apollon/lib/es6/utils/geometry/tree.js
  function filterRoots(ids, elements) {
    const getSelection = (root) => {
      if (ids.includes(root.id))
        return [root.id];
      if (UMLContainer.isUMLContainer(root)) {
        return root.ownedElements.reduce((selection, id2) => [...selection, ...getSelection(elements[id2])], []);
      }
      return [];
    };
    return Object.values(elements).filter((element) => !element.owner).reduce((selection, element) => [...selection, ...getSelection(element)], []);
  }
  function getChildren(ids, elements) {
    const result = [];
    for (const id2 of ids) {
      const owner = elements[id2];
      if (!owner)
        continue;
      if (UMLContainer.isUMLContainer(owner)) {
        result.push(...getChildren(owner.ownedElements, elements));
      }
      result.push(owner.id);
    }
    return result;
  }
  function clone(element, elements) {
    if (!UMLContainer.isUMLContainer(element)) {
      return [element.clone()];
    }
    const result = [];
    const cloned = element.clone();
    const { ownedElements } = element;
    for (const id2 of ownedElements) {
      const child = elements.find((prev) => prev.id === id2);
      if (!child) {
        continue;
      }
      const [clonedChild, ...clonedChildren] = clone(child, elements);
      clonedChild.owner = cloned.id;
      const index = cloned.ownedElements.findIndex((x2) => x2 === id2);
      cloned.ownedElements[index] = clonedChild.id;
      result.push(clonedChild, ...clonedChildren);
    }
    return [cloned, ...result];
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-diagram/uml-diagram-repository.js
  var UMLDiagramRepository = {
    isUMLDiagram: (element) => element.type in UMLDiagramType,
    get: (element) => {
      if (!element || !UMLDiagramRepository.isUMLDiagram(element)) {
        return null;
      }
      return new UMLDiagram(element);
    },
    append: (id2) => (dispatch, getState) => {
      dispatch({
        type: "@@element/diagram/APPEND",
        payload: { ids: Array.isArray(id2) ? id2 : [id2] },
        undoable: false
      });
    },
    bringToFront: (elementId) => (dispatch, getState) => {
      const ids = (Array.isArray(elementId) ? elementId : [elementId]).filter((id2) => getState().diagram.ownedElements.includes(id2));
      dispatch({
        type: "@@element/diagram/BRING_TO_FRONT",
        payload: { ids },
        undoable: false
      });
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-container/uml-container-repository.js
  var UMLContainerRepository = {
    get: (element) => {
      if (!element) {
        return null;
      }
      if (UMLDiagramRepository.isUMLDiagram(element)) {
        return UMLDiagramRepository.get(element);
      }
      if (UMLContainer.isUMLContainer(element)) {
        const Classifier = UMLElements[element.type];
        return new Classifier(element);
      }
      return null;
    },
    append: (id2, owner) => (dispatch, getState) => {
      const ids = Array.isArray(id2) ? id2 : [id2];
      const { elements, diagram } = getState();
      const rels = ids.filter((x2) => UMLRelationship.isUMLRelationship(elements[x2]));
      if (rels.length) {
        dispatch({
          type: "@@element/diagram/APPEND",
          payload: { ids: rels },
          undoable: false
        });
      }
      const eles = ids.filter((x2) => UMLElement.isUMLElement(elements[x2]));
      if (eles.length) {
        dispatch({
          type: "@@element/container/APPEND",
          payload: { ids: eles, owner: owner || diagram.id },
          undoable: false
        });
      }
    },
    remove: (id2) => ({
      type: "@@element/container/REMOVE",
      payload: { ids: Array.isArray(id2) ? id2 : [id2] },
      undoable: true
    })
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/uml-element-common-repository.js
  var UMLElementCommonRepository = {
    /**
     * Creates new instances of `UMLElements`
     *
     * @param value - An array of new values for the instances to create.
     * @param [owner] - Specify the owner for the new elements.
     */
    create: (value, owner) => async (dispatch) => {
      const values = Array.isArray(value) ? value : [value];
      dispatch({
        type: "@@element/CREATE",
        payload: { values },
        undoable: true
      });
      const roots = values.filter((x2) => !x2.owner).map((x2) => x2.id);
      if (roots.length) {
        dispatch(UMLContainerRepository.append(roots, owner));
      }
    },
    /** Read an UMLElement */
    get: (element) => {
      if (!element) {
        return null;
      }
      if (UMLElement.isUMLElement(element)) {
        const Classifier = UMLElements[element.type];
        return new Classifier(element);
      }
      return null;
    },
    /** Read an UMLElement by id */
    getById: (id2) => (dispatch, getState) => {
      const { elements } = getState();
      return UMLElementCommonRepository.get(elements[id2]);
    },
    /** Update existing elements */
    update: (id2, values) => ({
      type: "@@element/UPDATE",
      payload: { values: (Array.isArray(id2) ? id2 : [id2]).map((i2) => ({ id: i2, ...values })) },
      undoable: false
    }),
    /** Delete existing elements */
    delete: (id2) => (dispatch, getState) => {
      const { elements, selected } = getState();
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : selected;
      const roots = filterRoots(ids, elements);
      if (!roots.length) {
        return;
      }
      dispatch(UMLContainerRepository.remove(roots));
      dispatch({
        type: "@@element/DELETE",
        payload: { ids: getChildren(roots, elements) },
        undoable: false
      });
    },
    /** Composes the absolute position of an element */
    getAbsolutePosition: (id2) => (dispatch, getState) => {
      const { elements } = getState();
      let element = elements[id2];
      let position = new Point(element.bounds.x, element.bounds.y);
      while (element.owner) {
        element = elements[element.owner];
        position = position.add(element.bounds.x, element.bounds.y);
      }
      return position;
    },
    getChildren: (id2) => (dispatch, getState) => {
      const { elements } = getState();
      const owner = elements[id2];
      if (!owner) {
        return [];
      }
      if (UMLContainer.isUMLContainer(owner)) {
        return owner.ownedElements.reduce((acc, element) => [...acc, ...dispatch(UMLElementCommonRepository.getChildren(element))], [owner]);
      }
      return [owner];
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-relationship/uml-relationship-common-repository.js
  var UMLRelationshipCommonRepository = {
    get: (element) => {
      if (!element) {
        return null;
      }
      if (UMLRelationship.isUMLRelationship(element)) {
        const Classifier = UMLRelationships[element.type];
        return new Classifier(element);
      }
      return null;
    },
    getById: (id2) => (dispatch, getState) => {
      const { elements } = getState();
      return UMLRelationshipCommonRepository.get(elements[id2]);
    },
    getSupportedConnectionsForElements: (elements) => {
      const elementsArray = Array.isArray(elements) ? elements : [elements];
      if (!(elementsArray.length > 0)) {
        return [];
      }
      return elementsArray.reduce((supportedConnections, element) => {
        const elementSupportedConnections = UMLElements[element.type].supportedRelationships;
        return supportedConnections.filter((supportedConnection) => elementSupportedConnections.includes(supportedConnection));
      }, UMLElements[elementsArray[0].type].supportedRelationships);
    },
    layout: (id2, path, bounds) => ({
      type: "@@relationship/LAYOUT",
      payload: { id: id2, path, bounds },
      undoable: false
    }),
    layoutWaypoints: (id2, path, bounds) => ({
      type: "@@relationship/WAYPOINTLAYOUT",
      payload: { id: id2, path, bounds },
      undoable: false
    }),
    flip: (id2) => (dispatch, getState) => {
      const { selected, elements } = getState();
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : selected;
      const connections = ids.map((r2) => {
        const relationship = elements[r2];
        const source = { element: relationship.target.element, direction: relationship.target.direction };
        const target = { element: relationship.source.element, direction: relationship.source.direction };
        return { id: relationship.id, source, target };
      });
      dispatch({
        type: "@@element/reconnectable/RECONNECT",
        payload: { connections },
        undoable: true
      });
    },
    startWaypointsLayout: (id2, path, bounds) => (dispatch) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : void 0;
      if (ids && !ids.length) {
        return;
      }
      dispatch({
        type: "@@relationship/waypoints/START",
        payload: { id: id2, path, bounds },
        undoable: false
      });
    },
    endWaypointsLayout: (id2) => (dispatch) => {
      if (!id2.length) {
        return;
      }
      dispatch({
        type: "@@relationship/waypoints/END",
        payload: { id: id2 },
        undoable: false
      });
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/connectable/connectable-repository.js
  var Connectable = {
    startConnecting: (direction, id2) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : getState().selected.map((elementId) => dispatch(UMLElementCommonRepository.getById(elementId))).filter((element) => element !== null).filter((element) => UMLElements[element.type].features.connectable).map((element) => element.id);
      const directions = Array.isArray(direction) ? direction : [direction];
      if (!ids.length || directions.length !== 1 && directions.length !== ids.length) {
        return;
      }
      const ports = ids.map((elementId, index) => ({
        element: elementId,
        direction: directions.length === 1 ? directions[0] : directions[index]
      }));
      dispatch({
        type: "@@element/connectable/START",
        payload: { ports },
        undoable: false
      });
    },
    connect: (target, source) => (dispatch, getState) => {
      const sources = source ? Array.isArray(source) ? source : [source] : getState().connecting;
      const targets = Array.isArray(target) ? target : [target];
      if (!targets.length || targets.length !== 1 && targets.length !== sources.length) {
        return;
      }
      const connections = [];
      for (const [index, port] of sources.entries()) {
        const connectionTarget = targets.length === 1 ? targets[0] : targets[index];
        if (port.element === connectionTarget.element && port.direction === connectionTarget.direction) {
          continue;
        }
        connections.push({ source: port, target: connectionTarget });
      }
      const relationships = connections.map((connection) => {
        const sourceElement = dispatch(UMLElementCommonRepository.getById(connection.source.element));
        const targetElement = dispatch(UMLElementCommonRepository.getById(connection.target.element));
        let relationshipType;
        if (sourceElement && targetElement) {
          const commonSupportedConnections = UMLRelationshipCommonRepository.getSupportedConnectionsForElements([
            sourceElement,
            targetElement
          ]);
          relationshipType = commonSupportedConnections.length > 0 ? commonSupportedConnections[0] : DefaultUMLRelationshipType[getState().diagram.type];
        } else {
          relationshipType = DefaultUMLRelationshipType[getState().diagram.type];
        }
        const Classifier = UMLRelationships[relationshipType];
        return new Classifier(connection);
      });
      if (connections.length) {
        dispatch(UMLElementCommonRepository.create(relationships));
      }
      if (!source) {
        dispatch({
          type: "@@element/connectable/END",
          payload: { ports: sources },
          undoable: false
        });
      }
    },
    endConnecting: (port) => (dispatch, getState) => {
      const ports = port ? Array.isArray(port) ? port : [port] : getState().connecting;
      if (!ports.length) {
        return;
      }
      dispatch({
        type: "@@element/connectable/END",
        payload: { ports },
        undoable: false
      });
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/hoverable/hoverable-repository.js
  var Hoverable = {
    /** Hover elements */
    hover: (id2) => ({
      type: "@@element/hoverable/HOVER",
      payload: {
        ids: Array.isArray(id2) ? id2 : [id2]
      },
      undoable: false
    }),
    /** Leave elements */
    leave: (id2) => ({
      type: "@@element/hoverable/LEAVE",
      payload: {
        ids: Array.isArray(id2) ? id2 : [id2]
      },
      undoable: false
    })
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/interactable/interactable-repository.js
  var Interactable = {
    makeInteractive: (id2) => ({
      type: "@@element/interactable/SELECT",
      payload: { ids: [id2] },
      undoable: false
    }),
    unmakeInteractive: (id2) => ({
      type: "@@element/interactable/DESELECT",
      payload: { ids: [id2] },
      undoable: false
    })
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/movable/movable-repository.js
  var Movable = {
    startMoving: (id2) => (dispatch, getState) => {
      const { elements, selected } = getState();
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : filterRoots(selected, elements);
      const movables = [];
      const constructors = { ...UMLElements, ...UMLRelationships };
      for (const i2 of ids) {
        const feature = constructors[elements[i2].type].features;
        if (feature.movable) {
          movables.push(i2);
        }
      }
      if (!movables.length) {
        return;
      }
      dispatch(UMLDiagramRepository.bringToFront(ids));
      dispatch({
        type: "@@element/movable/START",
        payload: { ids: movables },
        undoable: true
      });
    },
    move: (delta, id2) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : getState().moving;
      if (!ids.length) {
        return;
      }
      dispatch({
        type: "@@element/movable/MOVE",
        payload: { ids, delta },
        undoable: false
      });
    },
    endMoving: (id2, keyboard = false) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : getState().moving;
      if (!ids.length) {
        return;
      }
      dispatch({
        type: "@@element/movable/END",
        payload: { ids, keyboard },
        undoable: false
      });
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/resizable/resizable-repository.js
  var Resizable = {
    startResizing: (id2) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : [];
      if (!ids.length) {
        return;
      }
      dispatch({
        type: "@@element/resizable/START",
        payload: { ids },
        undoable: true
      });
    },
    resize: (delta, resizeFrom, id2) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : [];
      if (!ids.length) {
        return;
      }
      dispatch({
        type: "@@element/resizable/RESIZE",
        payload: { ids, delta, resizeFrom },
        undoable: false
      });
    },
    endResizing: (id2) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : [];
      if (!ids.length) {
        return;
      }
      dispatch({
        type: "@@element/resizable/END",
        payload: { ids },
        undoable: false
      });
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/selectable/selectable-repository.js
  var Selectable = {
    select: (id2, overwrite) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : Object.keys(getState().elements);
      if (!ids.length) {
        dispatch({
          type: "@@element/SET_SELECTION_BOX_ACTIVE",
          payload: {
            selectionBoxActive: false
          },
          undoable: false
        });
      }
      return dispatch({
        type: "@@element/selectable/SELECT",
        payload: {
          ids,
          overwrite
        },
        undoable: false
      });
    },
    deselect: (id2) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : getState().selected;
      if (!ids.length) {
        return;
      }
      return dispatch({
        type: "@@element/selectable/DESELECT",
        payload: { ids },
        undoable: false
      });
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/remote-selectable/remote-selection-repository.js
  var RemoteSelectable = {
    remoteSelectionChange: (selector, changes) => ({
      type: "@@element/remote-selection/CHANGE",
      payload: {
        selector,
        changes
      },
      undoable: false
    }),
    remoteSelect: (selector, ids) => RemoteSelectable.remoteSelectionChange(selector, ids.map((id2) => ({ type: "@@element/remote-selection/SELECT", id: id2 }))),
    remoteDeselect: (selector, ids) => RemoteSelectable.remoteSelectionChange(selector, ids.map((id2) => ({ type: "@@element/remote-selection/DESELECT", id: id2 }))),
    remoteSelectDeselect: (selector, select2, deselect) => RemoteSelectable.remoteSelectionChange(selector, [
      ...select2.map((id2) => ({ type: "@@element/remote-selection/SELECT", id: id2 })),
      ...deselect.map((id2) => ({ type: "@@element/remote-selection/DESELECT", id: id2 }))
    ]),
    pruneRemoteSelectors: (allowedSelectors) => ({
      type: "@@element/remote-selection/PRUNE_SELECTORS",
      payload: {
        allowedSelectors
      },
      undoable: false
    })
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/updatable/updatable-repository.js
  var Updatable = {
    updateStart: (id2) => (dispatch, getState) => {
      if (getState().updating.length) {
        return null;
      }
      dispatch({
        type: "@@element/updatable/START",
        payload: { ids: Array.isArray(id2) ? id2 : [id2] },
        undoable: true
      });
    },
    updateEnd: (id2) => ({
      type: "@@element/updatable/END",
      payload: { ids: Array.isArray(id2) ? id2 : [id2] },
      undoable: false
    }),
    updateEndAll: () => ({
      type: "@@element/updatable/ENDALL",
      payload: {},
      undoable: false
    })
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/uml-element-repository.js
  var UMLElementRepository = {
    ...UMLElementCommonRepository,
    ...Hoverable,
    ...Selectable,
    ...RemoteSelectable,
    ...Movable,
    ...Resizable,
    ...Connectable,
    ...Interactable,
    ...Updatable
  };

  // node_modules/@ls1intum/apollon/lib/es6/utils/not-empty.js
  function notEmpty(value) {
    return value !== null && value !== void 0;
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-relationship/reconnectable/reconnectable-repository.js
  var Reconnectable = {
    /**
     * creates a StTartReconnectingAction
     * @param endpoint the endpoint which should be reconnected. This endpoint will be part of the new connection, the other one is replaced.
     * @param id relationship id / ids, if omitted -> take all relationships from selected state
     */
    startReconnecting: (endpoint, id2) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : getState().selected.map((elementId) => dispatch(UMLRelationshipCommonRepository.getById(elementId))).filter((element) => element !== null && UMLRelationship.isUMLRelationship(element)).map((element) => element.id);
      if (!ids.length) {
        return;
      }
      dispatch({
        type: "@@element/reconnectable/START",
        payload: { ids, endpoint },
        undoable: true
      });
    },
    reconnect: (target) => (dispatch, getState) => {
      const { reconnecting, elements } = getState();
      const connections = Object.keys(reconnecting).map((id2) => {
        const relationship = elements[id2];
        const endpoint1 = reconnecting[id2];
        const endpoint2 = endpoint1 === "source" ? "target" : "source";
        const connection = {
          [endpoint1]: relationship[endpoint1],
          [endpoint2]: { ...relationship[endpoint2], ...target }
        };
        if (connection.source.element === connection.target.element && connection.source.direction === connection.target.direction) {
          return null;
        }
        return { id: id2, ...connection };
      }).filter(notEmpty);
      if (!connections.length) {
        return;
      }
      dispatch({
        type: "@@element/reconnectable/RECONNECT",
        payload: { connections },
        undoable: false
      });
    },
    endReconnecting: (id2) => (dispatch, getState) => {
      const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : Object.keys(getState().reconnecting);
      if (!ids.length) {
        return;
      }
      dispatch({
        type: "@@element/reconnectable/END",
        payload: { ids },
        undoable: false
      });
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-relationship/uml-relationship-repository.js
  var UMLRelationshipRepository = {
    ...UMLRelationshipCommonRepository,
    ...Reconnectable
  };

  // node_modules/@ls1intum/apollon/lib/es6/compat/v2/typings.js
  function isV2(model) {
    return model.version.startsWith("2.");
  }
  function isCommunicationLink(rel) {
    return rel.type === UMLRelationshipType.CommunicationLink;
  }

  // node_modules/@ls1intum/apollon/lib/es6/compat/v2/transform.js
  function v2RelationshipToV3Relationship(relationship) {
    if (isCommunicationLink(relationship)) {
      return {
        ...relationship,
        messages: relationship.messages.reduce((acc, val) => ({ ...acc, [val.id]: val }), {})
      };
    } else {
      return relationship;
    }
  }
  function v2ModeltoV3Model(model) {
    const elements = Array.isArray(model.elements) ? model.elements : [];
    const relationships = Array.isArray(model.relationships) ? model.relationships : [];
    const assessments = Array.isArray(model.assessments) ? model.assessments : [];
    const interactive = model.interactive || { elements: [], relationships: [] };
    return {
      ...model,
      version: "3.0.0",
      elements: elements.reduce((acc, val) => ({ ...acc, [val.id]: val }), {}),
      relationships: relationships.map(v2RelationshipToV3Relationship).reduce((acc, val) => ({ ...acc, [val.id]: val }), {}),
      assessments: assessments.reduce((acc, val) => ({ ...acc, [val.modelElementId]: val }), {}),
      interactive: {
        elements: interactive.elements.reduce((acc, val) => ({ ...acc, [val]: true }), {}),
        relationships: interactive.relationships.reduce((acc, val) => ({ ...acc, [val]: true }), {})
      }
    };
  }

  // node_modules/@ls1intum/apollon/lib/es6/compat/index.js
  function backwardsCompatibleModel(model) {
    if (isV2(model)) {
      return v2ModeltoV3Model(model);
    } else {
      return model;
    }
  }

  // node_modules/@ls1intum/apollon/lib/es6/components/store/util.js
  function inclusionMapToArray(map2) {
    return Object.entries(map2).filter(([, value]) => value).map(([key]) => key);
  }
  function arrayToInclusionMap(array4) {
    return array4.reduce((acc, val) => ({ ...acc, [val]: true }), {});
  }

  // node_modules/@ls1intum/apollon/lib/es6/components/store/model-state.js
  var ModelState = class {
    static fromModel(compatModel) {
      const model = backwardsCompatibleModel(compatModel);
      const apollonElements = model.elements;
      const apollonRelationships = model.relationships;
      const deserialize = (apollonElement) => {
        const element = new UMLElements[apollonElement.type]();
        const children = UMLContainer.isUMLContainer(element) ? Object.values(apollonElements).filter((child) => child.owner === apollonElement.id).map((val) => {
          const parent = apollonElements[val.owner];
          return {
            ...val,
            bounds: { ...val.bounds, x: val.bounds.x - parent.bounds.x, y: val.bounds.y - parent.bounds.y }
          };
        }) : [];
        element.deserialize(apollonElement, children);
        return [element, ...children.reduce((acc, val) => [...acc, ...deserialize(val)], [])];
      };
      const elements = Object.values(apollonElements).filter((element) => !element.owner).reduce((acc, val) => [...acc, ...deserialize(val)], []);
      const relationships = Object.values(apollonRelationships).map((apollonRelationship) => {
        const relationship = new UMLRelationships[apollonRelationship.type]();
        relationship.deserialize(apollonRelationship);
        return relationship;
      });
      const diagram = new UMLDiagram();
      diagram.type = model.type;
      diagram.ownedRelationships = Object.values(model.relationships).map((s2) => {
        return s2.id;
      });
      return {
        diagram,
        interactive: [
          ...inclusionMapToArray(model.interactive.elements),
          ...inclusionMapToArray(model.interactive.relationships)
        ],
        elements: [...elements, ...relationships].reduce((acc, val) => ({ ...acc, [val.id]: { ...val } }), {}),
        assessments: (Object.values(model.assessments) || []).reduce((acc, val) => ({
          ...acc,
          [val.modelElementId]: {
            score: val.score,
            feedback: val.feedback,
            label: val.label,
            labelColor: val.labelColor,
            correctionStatus: val.correctionStatus,
            dropInfo: val.dropInfo
          }
        }), {})
      };
    }
    static toModel(state) {
      const elements = Object.values(state.elements).map((element) => UMLElementRepository.get(element)).reduce((acc, val) => ({ ...acc, ...val && { [val.id]: val } }), {});
      const relationships = Object.values(state.elements).filter((x2) => UMLRelationship.isUMLRelationship(x2)).map((relationship) => UMLRelationshipRepository.get(relationship));
      const serialize = (element) => {
        const children = UMLContainer.isUMLContainer(element) ? element.ownedElements.map((id2) => elements[id2]) : [];
        const res = {
          [element.id]: element.serialize(children)
        };
        for (const child of children) {
          const childres = serialize(child);
          Object.values(childres).forEach((child2) => {
            child2.bounds.x += element.bounds.x;
            child2.bounds.y += element.bounds.y;
          });
          Object.assign(res, childres);
        }
        return res;
      };
      const apollonElements = Object.values(elements).filter((element) => !element.owner).reduce((acc, element) => ({ ...acc, ...serialize(element) }), {});
      const apollonElementsArray = Object.values(apollonElements);
      const apollonRelationships = relationships.map((relationship) => relationship.serialize());
      const interactive = {
        elements: arrayToInclusionMap(state.interactive.filter((id2) => UMLElement.isUMLElement(state.elements[id2]))),
        relationships: arrayToInclusionMap(state.interactive.filter((id2) => UMLRelationship.isUMLRelationship(state.elements[id2])))
      };
      const assessments = Object.fromEntries(Object.entries(state.assessments).map(([id2, assessment]) => [
        id2,
        {
          modelElementId: id2,
          elementType: state.elements[id2].type,
          score: state.assessments[id2].score,
          feedback: state.assessments[id2].feedback,
          label: state.assessments[id2].label,
          labelColor: state.assessments[id2].labelColor,
          correctionStatus: state.assessments[id2].correctionStatus,
          dropInfo: state.assessments[id2].dropInfo
        }
      ]));
      return {
        version: "3.0.0",
        type: state.diagram.type,
        size: { width: state.diagram.bounds.width, height: state.diagram.bounds.height },
        interactive,
        elements: apollonElements,
        relationships: Object.fromEntries(apollonRelationships.map((relationship) => [relationship.id, relationship])),
        assessments
      };
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/scenes/application.js
  var import_react198 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/canvas.js
  var import_react120 = __toESM(require_react());

  // node_modules/react-redux/es/index.js
  var import_shim = __toESM(require_shim());
  var import_with_selector = __toESM(require_with_selector());

  // node_modules/react-redux/es/utils/reactBatchedUpdates.js
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-redux/es/utils/batch.js
  function defaultNoopBatch(callback) {
    callback();
  }
  var batch = defaultNoopBatch;
  var setBatch = (newBatch) => batch = newBatch;
  var getBatch = () => batch;

  // node_modules/react-redux/es/hooks/useSelector.js
  var import_react4 = __toESM(require_react());

  // node_modules/react-redux/es/hooks/useReduxContext.js
  var import_react3 = __toESM(require_react());

  // node_modules/react-redux/es/components/Context.js
  var React2 = __toESM(require_react());
  var ContextKey = Symbol.for(`react-redux-context`);
  var gT = typeof globalThis !== "undefined" ? globalThis : (
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    {}
  );
  function getContext() {
    var _gT$ContextKey;
    if (!React2.createContext) return {};
    const contextMap = (_gT$ContextKey = gT[ContextKey]) != null ? _gT$ContextKey : gT[ContextKey] = /* @__PURE__ */ new Map();
    let realContext = contextMap.get(React2.createContext);
    if (!realContext) {
      realContext = React2.createContext(null);
      if (true) {
        realContext.displayName = "ReactRedux";
      }
      contextMap.set(React2.createContext, realContext);
    }
    return realContext;
  }
  var ReactReduxContext = /* @__PURE__ */ getContext();

  // node_modules/react-redux/es/utils/useSyncExternalStore.js
  var notInitialized = () => {
    throw new Error("uSES not initialized!");
  };

  // node_modules/react-redux/es/hooks/useSelector.js
  var useSyncExternalStoreWithSelector = notInitialized;
  var initializeUseSelector = (fn) => {
    useSyncExternalStoreWithSelector = fn;
  };

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n2) {
      for (var e2 = 1; e2 < arguments.length; e2++) {
        var t2 = arguments[e2];
        for (var r2 in t2) ({}).hasOwnProperty.call(t2, r2) && (n2[r2] = t2[r2]);
      }
      return n2;
    }, _extends.apply(null, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(r2, e2) {
    if (null == r2) return {};
    var t2 = {};
    for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
      if (e2.includes(n2)) continue;
      t2[n2] = r2[n2];
    }
    return t2;
  }

  // node_modules/react-redux/es/components/connect.js
  var import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
  var React4 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is());

  // node_modules/react-redux/es/utils/warning.js
  function warning(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e2) {
    }
  }

  // node_modules/react-redux/es/connect/verifySubselectors.js
  function verify(selector, methodName) {
    if (!selector) {
      throw new Error(`Unexpected value for ${methodName} in connect.`);
    } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
      if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
        warning(`The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`);
      }
    }
  }
  function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps) {
    verify(mapStateToProps, "mapStateToProps");
    verify(mapDispatchToProps, "mapDispatchToProps");
    verify(mergeProps, "mergeProps");
  }

  // node_modules/react-redux/es/connect/selectorFactory.js
  var _excluded = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
  function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, {
    areStatesEqual,
    areOwnPropsEqual,
    areStatePropsEqual
  }) {
    let hasRunAtLeastOnce = false;
    let state;
    let ownProps;
    let stateProps;
    let dispatchProps;
    let mergedProps;
    function handleFirstCall(firstState, firstOwnProps) {
      state = firstState;
      ownProps = firstOwnProps;
      stateProps = mapStateToProps(state, ownProps);
      dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      hasRunAtLeastOnce = true;
      return mergedProps;
    }
    function handleNewPropsAndNewState() {
      stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }
    function handleNewProps() {
      if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }
    function handleNewState() {
      const nextStateProps = mapStateToProps(state, ownProps);
      const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
      stateProps = nextStateProps;
      if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }
    function handleSubsequentCalls(nextState, nextOwnProps) {
      const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
      const stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
      state = nextState;
      ownProps = nextOwnProps;
      if (propsChanged && stateChanged) return handleNewPropsAndNewState();
      if (propsChanged) return handleNewProps();
      if (stateChanged) return handleNewState();
      return mergedProps;
    }
    return function pureFinalPropsSelector(nextState, nextOwnProps) {
      return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
    };
  }
  function finalPropsSelectorFactory(dispatch, _ref) {
    let {
      initMapStateToProps,
      initMapDispatchToProps,
      initMergeProps
    } = _ref, options = _objectWithoutPropertiesLoose(_ref, _excluded);
    const mapStateToProps = initMapStateToProps(dispatch, options);
    const mapDispatchToProps = initMapDispatchToProps(dispatch, options);
    const mergeProps = initMergeProps(dispatch, options);
    if (true) {
      verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps);
    }
    return pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
  }

  // node_modules/react-redux/es/utils/bindActionCreators.js
  function bindActionCreators(actionCreators, dispatch) {
    const boundActionCreators = {};
    for (const key in actionCreators) {
      const actionCreator = actionCreators[key];
      if (typeof actionCreator === "function") {
        boundActionCreators[key] = (...args) => dispatch(actionCreator(...args));
      }
    }
    return boundActionCreators;
  }

  // node_modules/react-redux/es/utils/isPlainObject.js
  function isPlainObject(obj) {
    if (typeof obj !== "object" || obj === null) return false;
    let proto = Object.getPrototypeOf(obj);
    if (proto === null) return true;
    let baseProto = proto;
    while (Object.getPrototypeOf(baseProto) !== null) {
      baseProto = Object.getPrototypeOf(baseProto);
    }
    return proto === baseProto;
  }

  // node_modules/react-redux/es/utils/verifyPlainObject.js
  function verifyPlainObject(value, displayName, methodName) {
    if (!isPlainObject(value)) {
      warning(`${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`);
    }
  }

  // node_modules/react-redux/es/connect/wrapMapToProps.js
  function wrapMapToPropsConstant(getConstant) {
    return function initConstantSelector(dispatch) {
      const constant = getConstant(dispatch);
      function constantSelector() {
        return constant;
      }
      constantSelector.dependsOnOwnProps = false;
      return constantSelector;
    };
  }
  function getDependsOnOwnProps(mapToProps) {
    return mapToProps.dependsOnOwnProps ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
  }
  function wrapMapToPropsFunc(mapToProps, methodName) {
    return function initProxySelector(dispatch, {
      displayName
    }) {
      const proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
        return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch, void 0);
      };
      proxy.dependsOnOwnProps = true;
      proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
        proxy.mapToProps = mapToProps;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
        let props = proxy(stateOrDispatch, ownProps);
        if (typeof props === "function") {
          proxy.mapToProps = props;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
          props = proxy(stateOrDispatch, ownProps);
        }
        if (true) verifyPlainObject(props, displayName, methodName);
        return props;
      };
      return proxy;
    };
  }

  // node_modules/react-redux/es/connect/invalidArgFactory.js
  function createInvalidArgFactory(arg, name) {
    return (dispatch, options) => {
      throw new Error(`Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`);
    };
  }

  // node_modules/react-redux/es/connect/mapDispatchToProps.js
  function mapDispatchToPropsFactory(mapDispatchToProps) {
    return mapDispatchToProps && typeof mapDispatchToProps === "object" ? wrapMapToPropsConstant((dispatch) => (
      // @ts-ignore
      bindActionCreators(mapDispatchToProps, dispatch)
    )) : !mapDispatchToProps ? wrapMapToPropsConstant((dispatch) => ({
      dispatch
    })) : typeof mapDispatchToProps === "function" ? (
      // @ts-ignore
      wrapMapToPropsFunc(mapDispatchToProps, "mapDispatchToProps")
    ) : createInvalidArgFactory(mapDispatchToProps, "mapDispatchToProps");
  }

  // node_modules/react-redux/es/connect/mapStateToProps.js
  function mapStateToPropsFactory(mapStateToProps) {
    return !mapStateToProps ? wrapMapToPropsConstant(() => ({})) : typeof mapStateToProps === "function" ? (
      // @ts-ignore
      wrapMapToPropsFunc(mapStateToProps, "mapStateToProps")
    ) : createInvalidArgFactory(mapStateToProps, "mapStateToProps");
  }

  // node_modules/react-redux/es/connect/mergeProps.js
  function defaultMergeProps(stateProps, dispatchProps, ownProps) {
    return _extends({}, ownProps, stateProps, dispatchProps);
  }
  function wrapMergePropsFunc(mergeProps) {
    return function initMergePropsProxy(dispatch, {
      displayName,
      areMergedPropsEqual
    }) {
      let hasRunOnce = false;
      let mergedProps;
      return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
        const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        if (hasRunOnce) {
          if (!areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
        } else {
          hasRunOnce = true;
          mergedProps = nextMergedProps;
          if (true) verifyPlainObject(mergedProps, displayName, "mergeProps");
        }
        return mergedProps;
      };
    };
  }
  function mergePropsFactory(mergeProps) {
    return !mergeProps ? () => defaultMergeProps : typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : createInvalidArgFactory(mergeProps, "mergeProps");
  }

  // node_modules/react-redux/es/utils/Subscription.js
  function createListenerCollection() {
    const batch2 = getBatch();
    let first = null;
    let last2 = null;
    return {
      clear() {
        first = null;
        last2 = null;
      },
      notify() {
        batch2(() => {
          let listener = first;
          while (listener) {
            listener.callback();
            listener = listener.next;
          }
        });
      },
      get() {
        let listeners = [];
        let listener = first;
        while (listener) {
          listeners.push(listener);
          listener = listener.next;
        }
        return listeners;
      },
      subscribe(callback) {
        let isSubscribed = true;
        let listener = last2 = {
          callback,
          next: null,
          prev: last2
        };
        if (listener.prev) {
          listener.prev.next = listener;
        } else {
          first = listener;
        }
        return function unsubscribe() {
          if (!isSubscribed || first === null) return;
          isSubscribed = false;
          if (listener.next) {
            listener.next.prev = listener.prev;
          } else {
            last2 = listener.prev;
          }
          if (listener.prev) {
            listener.prev.next = listener.next;
          } else {
            first = listener.next;
          }
        };
      }
    };
  }
  var nullListeners = {
    notify() {
    },
    get: () => []
  };
  function createSubscription(store, parentSub) {
    let unsubscribe;
    let listeners = nullListeners;
    let subscriptionsAmount = 0;
    let selfSubscribed = false;
    function addNestedSub(listener) {
      trySubscribe();
      const cleanupListener = listeners.subscribe(listener);
      let removed = false;
      return () => {
        if (!removed) {
          removed = true;
          cleanupListener();
          tryUnsubscribe();
        }
      };
    }
    function notifyNestedSubs() {
      listeners.notify();
    }
    function handleChangeWrapper() {
      if (subscription.onStateChange) {
        subscription.onStateChange();
      }
    }
    function isSubscribed() {
      return selfSubscribed;
    }
    function trySubscribe() {
      subscriptionsAmount++;
      if (!unsubscribe) {
        unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
        listeners = createListenerCollection();
      }
    }
    function tryUnsubscribe() {
      subscriptionsAmount--;
      if (unsubscribe && subscriptionsAmount === 0) {
        unsubscribe();
        unsubscribe = void 0;
        listeners.clear();
        listeners = nullListeners;
      }
    }
    function trySubscribeSelf() {
      if (!selfSubscribed) {
        selfSubscribed = true;
        trySubscribe();
      }
    }
    function tryUnsubscribeSelf() {
      if (selfSubscribed) {
        selfSubscribed = false;
        tryUnsubscribe();
      }
    }
    const subscription = {
      addNestedSub,
      notifyNestedSubs,
      handleChangeWrapper,
      isSubscribed,
      trySubscribe: trySubscribeSelf,
      tryUnsubscribe: tryUnsubscribeSelf,
      getListeners: () => listeners
    };
    return subscription;
  }

  // node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
  var React3 = __toESM(require_react());
  var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
  var useIsomorphicLayoutEffect = canUseDOM ? React3.useLayoutEffect : React3.useEffect;

  // node_modules/react-redux/es/utils/shallowEqual.js
  function is(x2, y2) {
    if (x2 === y2) {
      return x2 !== 0 || y2 !== 0 || 1 / x2 === 1 / y2;
    } else {
      return x2 !== x2 && y2 !== y2;
    }
  }
  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
      return false;
    }
    const keysA = Object.keys(objA);
    const keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for (let i2 = 0; i2 < keysA.length; i2++) {
      if (!Object.prototype.hasOwnProperty.call(objB, keysA[i2]) || !is(objA[keysA[i2]], objB[keysA[i2]])) {
        return false;
      }
    }
    return true;
  }

  // node_modules/react-redux/es/components/connect.js
  var _excluded2 = ["reactReduxForwardedRef"];
  var useSyncExternalStore = notInitialized;
  var initializeConnect = (fn) => {
    useSyncExternalStore = fn;
  };
  var NO_SUBSCRIPTION_ARRAY = [null, null];
  var stringifyComponent = (Comp) => {
    try {
      return JSON.stringify(Comp);
    } catch (err) {
      return String(Comp);
    }
  };
  function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
    useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);
  }
  function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs) {
    lastWrapperProps.current = wrapperProps;
    renderIsScheduled.current = false;
    if (childPropsFromStoreUpdate.current) {
      childPropsFromStoreUpdate.current = null;
      notifyNestedSubs();
    }
  }
  function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, additionalSubscribeListener) {
    if (!shouldHandleStateChanges) return () => {
    };
    let didUnsubscribe = false;
    let lastThrownError = null;
    const checkForUpdates = () => {
      if (didUnsubscribe || !isMounted.current) {
        return;
      }
      const latestStoreState = store.getState();
      let newChildProps, error;
      try {
        newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
      } catch (e2) {
        error = e2;
        lastThrownError = e2;
      }
      if (!error) {
        lastThrownError = null;
      }
      if (newChildProps === lastChildProps.current) {
        if (!renderIsScheduled.current) {
          notifyNestedSubs();
        }
      } else {
        lastChildProps.current = newChildProps;
        childPropsFromStoreUpdate.current = newChildProps;
        renderIsScheduled.current = true;
        additionalSubscribeListener();
      }
    };
    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    const unsubscribeWrapper = () => {
      didUnsubscribe = true;
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
      if (lastThrownError) {
        throw lastThrownError;
      }
    };
    return unsubscribeWrapper;
  }
  function strictEqual(a2, b2) {
    return a2 === b2;
  }
  var hasWarnedAboutDeprecatedPureOption = false;
  function connect(mapStateToProps, mapDispatchToProps, mergeProps, {
    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
    // @ts-ignore
    pure,
    areStatesEqual = strictEqual,
    areOwnPropsEqual = shallowEqual,
    areStatePropsEqual = shallowEqual,
    areMergedPropsEqual = shallowEqual,
    // use React's forwardRef to expose a ref of the wrapped component
    forwardRef: forwardRef6 = false,
    // the context consumer to use
    context: context2 = ReactReduxContext
  } = {}) {
    if (true) {
      if (pure !== void 0 && !hasWarnedAboutDeprecatedPureOption) {
        hasWarnedAboutDeprecatedPureOption = true;
        warning('The `pure` option has been removed. `connect` is now always a "pure/memoized" component');
      }
    }
    const Context = context2;
    const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);
    const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);
    const initMergeProps = mergePropsFactory(mergeProps);
    const shouldHandleStateChanges = Boolean(mapStateToProps);
    const wrapWithConnect = (WrappedComponent) => {
      if (!(0, import_react_is2.isValidElementType)(WrappedComponent)) {
        throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);
      }
      const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
      const displayName = `Connect(${wrappedComponentName})`;
      const selectorFactoryOptions = {
        shouldHandleStateChanges,
        displayName,
        wrappedComponentName,
        WrappedComponent,
        // @ts-ignore
        initMapStateToProps,
        // @ts-ignore
        initMapDispatchToProps,
        initMergeProps,
        areStatesEqual,
        areStatePropsEqual,
        areOwnPropsEqual,
        areMergedPropsEqual
      };
      function ConnectFunction(props) {
        const [propsContext, reactReduxForwardedRef, wrapperProps] = React4.useMemo(() => {
          const {
            reactReduxForwardedRef: reactReduxForwardedRef2
          } = props, wrapperProps2 = _objectWithoutPropertiesLoose(props, _excluded2);
          return [props.context, reactReduxForwardedRef2, wrapperProps2];
        }, [props]);
        const ContextToUse = React4.useMemo(() => {
          return propsContext && propsContext.Consumer && // @ts-ignore
          (0, import_react_is2.isContextConsumer)(/* @__PURE__ */ React4.createElement(propsContext.Consumer, null)) ? propsContext : Context;
        }, [propsContext, Context]);
        const contextValue = React4.useContext(ContextToUse);
        const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
        const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
        if (!didStoreComeFromProps && !didStoreComeFromContext) {
          throw new Error(`Could not find "store" in the context of "${displayName}". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to ${displayName} in connect options.`);
        }
        const store = didStoreComeFromProps ? props.store : contextValue.store;
        const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;
        const childPropsSelector = React4.useMemo(() => {
          return finalPropsSelectorFactory(store.dispatch, selectorFactoryOptions);
        }, [store]);
        const [subscription, notifyNestedSubs] = React4.useMemo(() => {
          if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;
          const subscription2 = createSubscription(store, didStoreComeFromProps ? void 0 : contextValue.subscription);
          const notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
          return [subscription2, notifyNestedSubs2];
        }, [store, didStoreComeFromProps, contextValue]);
        const overriddenContextValue = React4.useMemo(() => {
          if (didStoreComeFromProps) {
            return contextValue;
          }
          return _extends({}, contextValue, {
            subscription
          });
        }, [didStoreComeFromProps, contextValue, subscription]);
        const lastChildProps = React4.useRef();
        const lastWrapperProps = React4.useRef(wrapperProps);
        const childPropsFromStoreUpdate = React4.useRef();
        const renderIsScheduled = React4.useRef(false);
        const isProcessingDispatch = React4.useRef(false);
        const isMounted = React4.useRef(false);
        const latestSubscriptionCallbackError = React4.useRef();
        useIsomorphicLayoutEffect(() => {
          isMounted.current = true;
          return () => {
            isMounted.current = false;
          };
        }, []);
        const actualChildPropsSelector = React4.useMemo(() => {
          const selector = () => {
            if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
              return childPropsFromStoreUpdate.current;
            }
            return childPropsSelector(store.getState(), wrapperProps);
          };
          return selector;
        }, [store, wrapperProps]);
        const subscribeForReact = React4.useMemo(() => {
          const subscribe = (reactListener) => {
            if (!subscription) {
              return () => {
              };
            }
            return subscribeUpdates(
              shouldHandleStateChanges,
              store,
              subscription,
              // @ts-ignore
              childPropsSelector,
              lastWrapperProps,
              lastChildProps,
              renderIsScheduled,
              isMounted,
              childPropsFromStoreUpdate,
              notifyNestedSubs,
              reactListener
            );
          };
          return subscribe;
        }, [subscription]);
        useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);
        let actualChildProps;
        try {
          actualChildProps = useSyncExternalStore(
            // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
            subscribeForReact,
            // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
            // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
            actualChildPropsSelector,
            getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector
          );
        } catch (err) {
          if (latestSubscriptionCallbackError.current) {
            ;
            err.message += `
The error may be correlated with this previous error:
${latestSubscriptionCallbackError.current.stack}

`;
          }
          throw err;
        }
        useIsomorphicLayoutEffect(() => {
          latestSubscriptionCallbackError.current = void 0;
          childPropsFromStoreUpdate.current = void 0;
          lastChildProps.current = actualChildProps;
        });
        const renderedWrappedComponent = React4.useMemo(() => {
          return (
            // @ts-ignore
            /* @__PURE__ */ React4.createElement(WrappedComponent, _extends({}, actualChildProps, {
              ref: reactReduxForwardedRef
            }))
          );
        }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
        const renderedChild = React4.useMemo(() => {
          if (shouldHandleStateChanges) {
            return /* @__PURE__ */ React4.createElement(ContextToUse.Provider, {
              value: overriddenContextValue
            }, renderedWrappedComponent);
          }
          return renderedWrappedComponent;
        }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
        return renderedChild;
      }
      const _Connect = React4.memo(ConnectFunction);
      const Connect = _Connect;
      Connect.WrappedComponent = WrappedComponent;
      Connect.displayName = ConnectFunction.displayName = displayName;
      if (forwardRef6) {
        const _forwarded = React4.forwardRef(function forwardConnectRef(props, ref) {
          return /* @__PURE__ */ React4.createElement(Connect, _extends({}, props, {
            reactReduxForwardedRef: ref
          }));
        });
        const forwarded = _forwarded;
        forwarded.displayName = displayName;
        forwarded.WrappedComponent = WrappedComponent;
        return (0, import_hoist_non_react_statics2.default)(forwarded, WrappedComponent);
      }
      return (0, import_hoist_non_react_statics2.default)(Connect, WrappedComponent);
    };
    return wrapWithConnect;
  }
  var connect_default = connect;

  // node_modules/react-redux/es/components/Provider.js
  var React5 = __toESM(require_react());
  function Provider({
    store,
    context: context2,
    children,
    serverState,
    stabilityCheck = "once",
    noopCheck = "once"
  }) {
    const contextValue = React5.useMemo(() => {
      const subscription = createSubscription(store);
      return {
        store,
        subscription,
        getServerState: serverState ? () => serverState : void 0,
        stabilityCheck,
        noopCheck
      };
    }, [store, serverState, stabilityCheck, noopCheck]);
    const previousState = React5.useMemo(() => store.getState(), [store]);
    useIsomorphicLayoutEffect(() => {
      const {
        subscription
      } = contextValue;
      subscription.onStateChange = subscription.notifyNestedSubs;
      subscription.trySubscribe();
      if (previousState !== store.getState()) {
        subscription.notifyNestedSubs();
      }
      return () => {
        subscription.tryUnsubscribe();
        subscription.onStateChange = void 0;
      };
    }, [contextValue, previousState]);
    const Context = context2 || ReactReduxContext;
    return /* @__PURE__ */ React5.createElement(Context.Provider, {
      value: contextValue
    }, children);
  }
  var Provider_default = Provider;

  // node_modules/react-redux/es/index.js
  initializeUseSelector(import_with_selector.useSyncExternalStoreWithSelector);
  initializeConnect(import_shim.useSyncExternalStore);
  setBatch(import_react_dom.unstable_batchedUpdates);

  // node_modules/@ls1intum/apollon/lib/es6/components/draggable/droppable.js
  var import_react7 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());

  // node_modules/@ls1intum/apollon/lib/es6/components/draggable/with-draggable.js
  var import_react6 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/draggable/draggable-context.js
  var import_react5 = __toESM(require_react());
  var { Consumer: DraggableConsumer, Provider: DraggableProvider } = import_react5.default.createContext({
    onDragStart: (event) => new Promise((_2, reject) => reject()),
    onDragEnd: (owner) => (event) => {
      return;
    }
  });

  // node_modules/@ls1intum/apollon/lib/es6/components/draggable/with-draggable.js
  function withDraggable(Component71) {
    return function ThemedComponent(props) {
      return import_react6.default.createElement(DraggableConsumer, null, (context2) => import_react6.default.createElement(Component71, { ...props, ...context2 }));
    };
  }

  // node_modules/@ls1intum/apollon/lib/es6/components/draggable/droppable.js
  var enhance = withDraggable;
  var DroppableComponent = class extends import_react7.Component {
    componentDidMount() {
      const node = (0, import_react_dom2.findDOMNode)(this);
      node.addEventListener("pointerup", this.props.onDragEnd(this.props.owner));
    }
    componentWillUnmount() {
      const node = (0, import_react_dom2.findDOMNode)(this);
      node.removeEventListener("pointerup", this.props.onDragEnd(this.props.owner));
    }
    render() {
      return this.props.children;
    }
  };
  var Droppable = enhance(DroppableComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/connectable/connection-preview.js
  var import_react11 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(o2) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
      return typeof o3;
    } : function(o3) {
      return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
    }, _typeof(o2);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function toPrimitive(t2, r2) {
    if ("object" != _typeof(t2) || !t2) return t2;
    var e2 = t2[Symbol.toPrimitive];
    if (void 0 !== e2) {
      var i2 = e2.call(t2, r2 || "default");
      if ("object" != _typeof(i2)) return i2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t2);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function toPropertyKey(t2) {
    var i2 = toPrimitive(t2, "string");
    return "symbol" == _typeof(i2) ? i2 : i2 + "";
  }

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(e2, r2, t2) {
    return (r2 = toPropertyKey(r2)) in e2 ? Object.defineProperty(e2, r2, {
      value: t2,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e2[r2] = t2, e2;
  }

  // node_modules/@babel/runtime/helpers/esm/objectSpread2.js
  function ownKeys(e2, r2) {
    var t2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var o2 = Object.getOwnPropertySymbols(e2);
      r2 && (o2 = o2.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
      })), t2.push.apply(t2, o2);
    }
    return t2;
  }
  function _objectSpread2(e2) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
        _defineProperty(e2, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e2;
  }

  // node_modules/redux/es/redux.js
  var $$observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();
  var randomString = function randomString2() {
    return Math.random().toString(36).substring(7).split("").join(".");
  };
  var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
      return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
  };
  function isPlainObject2(obj) {
    if (typeof obj !== "object" || obj === null) return false;
    var proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto;
  }
  function miniKindOf(val) {
    if (val === void 0) return "undefined";
    if (val === null) return "null";
    var type = typeof val;
    switch (type) {
      case "boolean":
      case "string":
      case "number":
      case "symbol":
      case "function": {
        return type;
      }
    }
    if (Array.isArray(val)) return "array";
    if (isDate(val)) return "date";
    if (isError(val)) return "error";
    var constructorName = ctorName(val);
    switch (constructorName) {
      case "Symbol":
      case "Promise":
      case "WeakMap":
      case "WeakSet":
      case "Map":
      case "Set":
        return constructorName;
    }
    return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
  }
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate(val) {
    if (val instanceof Date) return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function kindOf(val) {
    var typeOfVal = typeof val;
    if (true) {
      typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
  }
  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
      }
      return enhancer(createStore)(reducer, preloadedState);
    }
    if (typeof reducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
    }
    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe(listener) {
      if (typeof listener !== "function") {
        throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index = nextListeners.indexOf(listener);
        nextListeners.splice(index, 1);
        currentListeners = null;
      };
    }
    function dispatch(action) {
      if (!isPlainObject2(action)) {
        throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
      }
      if (typeof action.type === "undefined") {
        throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      var listeners = currentListeners = nextListeners;
      for (var i2 = 0; i2 < listeners.length; i2++) {
        var listener = listeners[i2];
        listener();
      }
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
      }
      currentReducer = nextReducer;
      dispatch({
        type: ActionTypes.REPLACE
      });
    }
    function observable2() {
      var _ref;
      var outerSubscribe = subscribe;
      return _ref = {
        /**
         * The minimal observable subscription method.
         * @param {Object} observer Any object that can be used as an observer.
         * The observer object should have a `next` method.
         * @returns {subscription} An object with an `unsubscribe` method that can
         * be used to unsubscribe the observable from the store, and prevent further
         * emission of values from the observable.
         */
        subscribe: function subscribe2(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
          }
          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }
          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe
          };
        }
      }, _ref[$$observable] = function() {
        return this;
      }, _ref;
    }
    dispatch({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch,
      subscribe,
      getState,
      replaceReducer
    }, _ref2[$$observable] = observable2, _ref2;
  }
  function warning2(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e2) {
    }
  }
  function getUnexpectedStateShapeWarningMessage(inputState, reducers2, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers2);
    var argumentName = action && action.type === ActionTypes.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
    if (reducerKeys.length === 0) {
      return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
    }
    if (!isPlainObject2(inputState)) {
      return "The " + argumentName + ' has unexpected type of "' + kindOf(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
    }
    var unexpectedKeys = Object.keys(inputState).filter(function(key) {
      return !reducers2.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function(key) {
      unexpectedKeyCache[key] = true;
    });
    if (action && action.type === ActionTypes.REPLACE) return;
    if (unexpectedKeys.length > 0) {
      return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + " " + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
    }
  }
  function assertReducerShape(reducers2) {
    Object.keys(reducers2).forEach(function(key) {
      var reducer = reducers2[key];
      var initialState13 = reducer(void 0, {
        type: ActionTypes.INIT
      });
      if (typeof initialState13 === "undefined") {
        throw new Error(false ? formatProdErrorMessage(12) : 'The slice reducer for key "' + key + `" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
      }
      if (typeof reducer(void 0, {
        type: ActionTypes.PROBE_UNKNOWN_ACTION()
      }) === "undefined") {
        throw new Error(false ? formatProdErrorMessage(13) : 'The slice reducer for key "' + key + '" returned undefined when probed with a random type. ' + ("Don't try to handle '" + ActionTypes.INIT + `' or other actions in "redux/*" `) + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
      }
    });
  }
  function combineReducers(reducers2) {
    var reducerKeys = Object.keys(reducers2);
    var finalReducers = {};
    for (var i2 = 0; i2 < reducerKeys.length; i2++) {
      var key = reducerKeys[i2];
      if (true) {
        if (typeof reducers2[key] === "undefined") {
          warning2('No reducer provided for key "' + key + '"');
        }
      }
      if (typeof reducers2[key] === "function") {
        finalReducers[key] = reducers2[key];
      }
    }
    var finalReducerKeys = Object.keys(finalReducers);
    var unexpectedKeyCache;
    if (true) {
      unexpectedKeyCache = {};
    }
    var shapeAssertionError;
    try {
      assertReducerShape(finalReducers);
    } catch (e2) {
      shapeAssertionError = e2;
    }
    return function combination(state, action) {
      if (state === void 0) {
        state = {};
      }
      if (shapeAssertionError) {
        throw shapeAssertionError;
      }
      if (true) {
        var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
        if (warningMessage) {
          warning2(warningMessage);
        }
      }
      var hasChanged = false;
      var nextState = {};
      for (var _i = 0; _i < finalReducerKeys.length; _i++) {
        var _key = finalReducerKeys[_i];
        var reducer = finalReducers[_key];
        var previousStateForKey = state[_key];
        var nextStateForKey = reducer(previousStateForKey, action);
        if (typeof nextStateForKey === "undefined") {
          var actionType = action && action.type;
          throw new Error(false ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? '"' + String(actionType) + '"' : "(unknown type)") + ', the slice reducer for key "' + _key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
        }
        nextState[_key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }
      hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
      return hasChanged ? nextState : state;
    };
  }
  function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) {
      return function(arg) {
        return arg;
      };
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce(function(a2, b2) {
      return function() {
        return a2(b2.apply(void 0, arguments));
      };
    });
  }
  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }
    return function(createStore2) {
      return function() {
        var store = createStore2.apply(void 0, arguments);
        var _dispatch = function dispatch() {
          throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
        };
        var middlewareAPI = {
          getState: store.getState,
          dispatch: function dispatch() {
            return _dispatch.apply(void 0, arguments);
          }
        };
        var chain = middlewares.map(function(middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = compose.apply(void 0, chain)(store.dispatch);
        return _objectSpread2(_objectSpread2({}, store), {}, {
          dispatch: _dispatch
        });
      };
    };
  }

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/with-canvas.js
  var import_react9 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/canvas-context.js
  var import_react8 = __toESM(require_react());
  var { Consumer: CanvasConsumer, Provider: CanvasProvider } = (0, import_react8.createContext)(null);

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/with-canvas.js
  var withCanvas = (WrappedComponent) => (0, import_react9.forwardRef)((props, ref) => import_react9.default.createElement(CanvasConsumer, null, (context2) => import_react9.default.createElement(WrappedComponent, { ref, ...props, ...context2 })));

  // node_modules/@ls1intum/apollon/lib/es6/components/connectable/uml-relationship-preview.js
  var import_react10 = __toESM(require_react());
  var enhance2 = connect_default((state, props) => ({
    ports: getPortsForElement(UMLElementRepository.get(state.elements[props.port.element]))
  }), {
    end: UMLElementRepository.endConnecting,
    getAbsolutePosition: UMLElementRepository.getAbsolutePosition
  });
  var Polyline = styled.polyline`
  stroke: ${(props) => props.theme.color.primaryContrast};
  fill: 'none';
  pointer-events: 'none';
`;
  var RelationshipPreview = class extends import_react10.Component {
    render() {
      const { port, ports } = this.props;
      const { x: x2, y: y2 } = this.props.getAbsolutePosition(port.element);
      const position = { ...ports[port.direction] };
      const source = new Point(x2 + position.x, y2 + position.y);
      const path = [source, this.props.target];
      const points = path.map((p) => `${p.x} ${p.y}`).join(", ");
      return import_react10.default.createElement(Polyline, { points, "pointer-events": "none", stroke: "black", fill: "none", strokeDasharray: "5,5" });
    }
  };
  var UMLRelationshipPreview = enhance2(RelationshipPreview);

  // node_modules/@ls1intum/apollon/lib/es6/components/connectable/connection-preview.js
  var import_is_mobile = __toESM(require_is_mobile());
  var enhance3 = compose(withCanvas, connect_default((state) => ({
    connecting: [
      ...state.connecting,
      ...Object.keys(state.reconnecting).map((id2) => state.elements[id2][state.reconnecting[id2]])
    ],
    zoomFactor: state.editor.zoomFactor
  }), {
    endConnecting: UMLElementRepository.endConnecting,
    endReconnecting: UMLRelationshipRepository.endReconnecting
  }));
  var initialState = {
    position: null
  };
  var Preview = class extends import_react11.Component {
    constructor() {
      super(...arguments);
      this.state = initialState;
      this.onPointerMove = (event) => {
        const { zoomFactor = 1 } = this.props;
        const offset = this.props.canvas.origin();
        let position;
        if (event instanceof PointerEvent) {
          position = new Point(event.clientX - offset.x, event.clientY - offset.y).scale(1 / zoomFactor);
        } else {
          position = new Point(event.targetTouches[0].clientX - offset.x, event.targetTouches[0].clientY - offset.y).scale(1 / zoomFactor);
        }
        this.setState({ position });
      };
      this.onPointerUp = (event) => {
        if ((0, import_is_mobile.default)({ tablet: true })) {
          document.removeEventListener("touchend", this.onPointerMove);
        } else {
          document.removeEventListener("pointermove", this.onPointerMove);
        }
        this.setState(initialState);
        this.props.endConnecting();
        this.props.endReconnecting();
      };
    }
    componentDidUpdate(prevProps) {
      if (this.props.connecting.length && prevProps.connecting !== this.props.connecting) {
        if ((0, import_is_mobile.default)({ tablet: true })) {
          document.addEventListener("touchmove", this.onPointerMove);
          document.addEventListener("touchend", this.onPointerUp, { once: true });
        } else {
          document.addEventListener("pointermove", this.onPointerMove);
          document.addEventListener("pointerup", this.onPointerUp, { once: true });
        }
      }
    }
    componentWillUnmount() {
      if ((0, import_is_mobile.default)({ tablet: true })) {
        document.removeEventListener("touchmove", this.onPointerMove);
        document.removeEventListener("touchend", this.onPointerUp);
      } else {
        document.removeEventListener("pointermove", this.onPointerMove);
        document.removeEventListener("pointerup", this.onPointerUp);
      }
    }
    render() {
      const { connecting } = this.props;
      const { position } = this.state;
      if (!connecting.length || !position) {
        return null;
      }
      return connecting.map((port, index) => import_react11.default.createElement(UMLRelationshipPreview, { key: index, port, target: position }));
    }
  };
  var ConnectionPreview = enhance3(Preview);

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/uml-element-component.js
  var import_react119 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/assessable/assessable.js
  var import_react16 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/utils/geometry/path.js
  var Path = class {
    constructor(path = [new Point(), new Point()]) {
      this.path = path;
    }
    get length() {
      return this.path.map((point) => new Point(point.x, point.y)).reduce((length, point, i2, points) => i2 + 1 < points.length ? length + points[i2 + 1].subtract(point).length : length, 0);
    }
    position(distance = 0) {
      for (let index = 0; index < this.path.length - 1; index++) {
        const current2 = new Point(this.path[index + 1].x, this.path[index + 1].y);
        const next = new Point(this.path[index].x, this.path[index].y);
        const vector = current2.subtract(next);
        if (vector.length > distance) {
          const norm = vector.normalize();
          return next.add(norm.scale(distance));
        }
        distance -= vector.length;
      }
      return new Point();
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/check.js
  var import_react13 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/icon.js
  var import_react12 = __toESM(require_react());
  var Svg = styled.svg`
  height: 1em;
  vertical-align: middle;
  width: 1em;
`;
  var Icon = (props) => import_react12.default.createElement(Svg, { width: "16px", height: "16px", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 512 512", ...props });

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/check.js
  var CheckIcon = (props) => import_react13.default.createElement(
    Icon,
    { viewBox: "0 0 512 512", ...props },
    import_react13.default.createElement("path", { d: "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/exclamation.js
  var import_react14 = __toESM(require_react());
  var ExclamationIcon = (props) => import_react14.default.createElement(
    Icon,
    { viewBox: "0 0 192 512", ...props },
    import_react14.default.createElement("path", { d: "M176 432c0 44.112-35.888 80-80 80s-80-35.888-80-80 35.888-80 80-80 80 35.888 80 80zM25.26 25.199l13.6 272C39.499 309.972 50.041 320 62.83 320h66.34c12.789 0 23.331-10.028 23.97-22.801l13.6-272C167.425 11.49 156.496 0 142.77 0H49.23C35.504 0 24.575 11.49 25.26 25.199z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/times.js
  var import_react15 = __toESM(require_react());
  var TimesIcon = (props) => import_react15.default.createElement(
    Icon,
    { viewBox: "0 0 352 512", ...props },
    import_react15.default.createElement("path", { d: "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/assessable/assessment-styles.js
  var ICON_SIZE = 24;
  var Container = styled.circle.attrs((props) => ({
    r: ICON_SIZE / 2 + 4,
    fillOpacity: 0.8,
    fill: props.theme.color.gray
  }))``;
  var Triangle = styled.polygon.attrs((props) => ({
    points: "-10,8 0,-10 10,8",
    fill: props.theme.color.warningYellow
  }))``;
  var icon = {
    x: -ICON_SIZE / 2,
    y: -ICON_SIZE / 2,
    width: ICON_SIZE,
    height: ICON_SIZE
  };
  var smallIcon = {
    x: -ICON_SIZE / 4,
    y: -ICON_SIZE / 4 + 1,
    width: ICON_SIZE / 2,
    height: ICON_SIZE / 2
  };
  var CorrectIcon = styled(CheckIcon).attrs(icon)`
  fill: green;
`;
  var WrongIcon = styled(TimesIcon).attrs(icon)`
  fill: red;
`;
  var FeedbackIcon = styled(ExclamationIcon).attrs(icon)`
  fill: blue;
`;
  var WarningIcon = styled(ExclamationIcon).attrs(smallIcon)`
  fill: black;
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/assessable/assessable.js
  var import_react_dom3 = __toESM(require_react_dom());

  // node_modules/@ls1intum/apollon/lib/es6/services/assessment/assessment-repository.js
  var AssessmentRepository = class {
  };
  AssessmentRepository.assess = (element, assessment, assessmentType) => {
    const payloadAssessment = { ...assessment };
    if (assessmentType !== "DROPPED" && payloadAssessment.dropInfo) {
      delete payloadAssessment.dropInfo;
    }
    return {
      type: "@@element/ASSESS",
      payload: { element, assessment: payloadAssessment },
      undoable: false
    };
  };
  AssessmentRepository.delete = (element) => {
    return {
      type: "@@assessment/DELETE",
      payload: { element },
      undoable: false
    };
  };
  AssessmentRepository.getById = (assessments) => (id2) => {
    const assessment = assessments[id2];
    if (!assessment)
      return null;
    return assessment;
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/assessable/assessable.js
  var enhance4 = connect_default((state, props) => {
    const element = state.elements[props.id];
    return {
      assessment: state.assessments[props.id],
      bounds: element.bounds,
      path: UMLRelationship.isUMLRelationship(element) ? element.path : void 0,
      readonly: state.editor.readonly
    };
  }, {
    select: UMLElementRepository.select,
    deselect: UMLElementRepository.deselect,
    assess: AssessmentRepository.assess,
    updateStart: UMLElementRepository.updateStart
  });
  var assessable = (WrappedComponent) => {
    class Assessable extends import_react16.Component {
      constructor() {
        super(...arguments);
        this.onDragOver = (ev) => {
          ev.preventDefault();
          ev.stopPropagation();
          this.props.select(this.props.id);
        };
        this.onDragLeave = () => {
          this.props.deselect(this.props.id);
        };
        this.onDrop = (ev) => {
          ev.preventDefault();
          this.props.deselect(this.props.id);
          ev.stopPropagation();
          if (!!ev.dataTransfer) {
            const data2 = ev.dataTransfer.getData("text/plain");
            if (!data2) {
              console.warn("Could not get artemis sgi element from drop element");
              return;
            }
            let instruction;
            try {
              instruction = JSON.parse(data2);
            } catch (e2) {
              console.error("Could not parse artemis sgi", e2);
              return;
            }
            const removeMessage = "Do you want to remove the link to the assessment instruction?";
            const tooltipMessage = "Assessment Instruction: " + instruction.instructionDescription;
            const feedbackHint = "This feedback is associated with the assessment instruction. You can provide additional feedback for this submission element. Student will see combined feedback during the review.";
            const { id: elementId, assessment } = this.props;
            const score = instruction.credits;
            const dropInfo = { instruction, removeMessage, tooltipMessage, feedbackHint };
            this.props.assess(elementId, { ...assessment, score, dropInfo }, "DROPPED");
            this.props.updateStart(elementId);
          }
        };
      }
      componentDidMount() {
        if (!this.props.readonly) {
          const node = (0, import_react_dom3.findDOMNode)(this);
          node.addEventListener("dragover", this.onDragOver.bind(this));
          node.addEventListener("dragleave", this.onDragLeave.bind(this));
          node.addEventListener("drop", this.onDrop.bind(this));
        }
      }
      componentWillUnmount() {
        const node = (0, import_react_dom3.findDOMNode)(this);
        node.removeEventListener("dragover", this.onDragOver);
        node.removeEventListener("dragleave", this.onDragLeave);
        node.removeEventListener("drop", this.onDrop);
      }
      render() {
        const { assessment, assess, select: select2, deselect, updateStart, bounds, path: ipath, readonly, ...props } = this.props;
        let position;
        let assessmentWarningPosition;
        if (ipath) {
          const path = new Path(ipath);
          position = path.position(path.length / 2);
          assessmentWarningPosition = path.position(path.length / 2 - ICON_SIZE * 2);
        } else {
          position = new Point(bounds.width, 0);
          assessmentWarningPosition = new Point(position.x - ICON_SIZE * 2, position.y);
        }
        return import_react16.default.createElement(
          WrappedComponent,
          { ...props },
          assessment && assessment.correctionStatus && assessment.correctionStatus.status === "INCORRECT" && import_react16.default.createElement(
            "g",
            { transform: `translate(${assessmentWarningPosition.x} ${assessmentWarningPosition.y})`, pointerEvents: "none" },
            import_react16.default.createElement(
              import_react16.default.Fragment,
              null,
              import_react16.default.createElement(Container, null),
              import_react16.default.createElement(Triangle, null),
              import_react16.default.createElement(WarningIcon, null)
            )
          ),
          assessment && import_react16.default.createElement(
            "g",
            { transform: `translate(${position.x} ${position.y})`, pointerEvents: "none" },
            assessment.score === 0 && !!assessment.feedback && import_react16.default.createElement(
              import_react16.default.Fragment,
              null,
              import_react16.default.createElement(Container, null),
              import_react16.default.createElement(FeedbackIcon, null)
            ),
            assessment.score > 0 && import_react16.default.createElement(
              import_react16.default.Fragment,
              null,
              import_react16.default.createElement(Container, null),
              import_react16.default.createElement(CorrectIcon, null)
            ),
            assessment.score < 0 && import_react16.default.createElement(
              import_react16.default.Fragment,
              null,
              import_react16.default.createElement(Container, null),
              import_react16.default.createElement(WrongIcon, null)
            )
          )
        );
      }
    }
    return enhance4(Assessable);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/canvas-element.js
  var import_react105 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier-component.js
  var import_react18 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/text/text.js
  var import_react17 = __toESM(require_react());
  var Text2 = ({ children, fill, x: x2 = "50%", y: y2 = "50%", dominantBaseline = "middle", textAnchor = "middle", fontWeight = "bold", pointerEvents = "none", noX = false, noY = false, ...props }) => {
    const pos = {};
    if (!noX) {
      pos.x = x2;
    }
    if (!noY) {
      pos.y = y2;
    }
    return import_react17.default.createElement("text", { ...pos, style: fill ? { fill } : {}, dominantBaseline, textAnchor, fontWeight, pointerEvents, ...props }, children);
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier-component.js
  var UMLClassifierComponent = ({ element, children, fillColor }) => {
    return import_react18.default.createElement(
      "g",
      null,
      import_react18.default.createElement(ThemedRect, { fillColor: fillColor || element.fillColor, strokeColor: "none", width: "100%", height: element.stereotype ? 50 : 40 }),
      import_react18.default.createElement(ThemedRect, { y: element.stereotype ? 50 : 40, width: "100%", height: element.bounds.height - (element.stereotype ? 50 : 40), strokeColor: "none" }),
      element.stereotype ? import_react18.default.createElement(
        "svg",
        { height: 50 },
        import_react18.default.createElement(
          Text2,
          { fill: element.textColor },
          import_react18.default.createElement("tspan", { x: "50%", dy: -8, textAnchor: "middle", fontSize: "85%" }, `\xAB${element.stereotype}\xBB`),
          import_react18.default.createElement("tspan", { x: "50%", dy: 18, textAnchor: "middle", fontStyle: element.italic ? "italic" : void 0, textDecoration: element.underline ? "underline" : void 0 }, element.name)
        )
      ) : import_react18.default.createElement(
        "svg",
        { height: 40 },
        import_react18.default.createElement(Text2, { fill: element.textColor, fontStyle: element.italic ? "italic" : void 0, textDecoration: element.underline ? "underline" : void 0 }, element.name)
      ),
      children,
      import_react18.default.createElement(ThemedRect, { width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: "none", "pointer-events": "none" }),
      element.hasAttributes && import_react18.default.createElement(ThemedPath, { d: `M 0 ${element.headerHeight} H ${element.bounds.width}`, strokeColor: element.strokeColor }),
      element.hasMethods && import_react18.default.createElement(ThemedPath, { d: `M 0 ${element.deviderPosition} H ${element.bounds.width}`, strokeColor: element.strokeColor })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier-member-component.js
  var import_react19 = __toESM(require_react());
  var UMLClassifierMemberComponent = ({ element, fillColor }) => {
    return import_react19.default.createElement(
      "g",
      null,
      import_react19.default.createElement(ThemedRect, { fillColor: fillColor || element.fillColor, strokeColor: "none", width: "100%", height: "100%" }),
      import_react19.default.createElement(Text2, { x: 10, fill: element.textColor, fontWeight: "normal", textAnchor: "start" }, element.name)
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-action-node/uml-activity-action-node-component.js
  var import_react21 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/utils/svg/multiline.js
  var import_react20 = __toESM(require_react());
  var defaultProps = Object.freeze({
    x: 0,
    y: 0,
    dx: 0,
    dy: 0,
    angle: 0,
    width: void 0,
    height: void 0,
    lineHeight: 16,
    capHeight: 11,
    scaleToFit: false,
    textAnchor: "middle",
    verticalAnchor: "middle"
  });
  var getInitialState = (props) => {
    const words = props.children ? props.children.toString().split(/\s+/) : [];
    return { wordsByLines: [{ words, width: 0 }] };
  };
  var Multiline = class extends import_react20.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState(this.props);
      this.spaceWidth = 0;
      this.wordsWithComputedWidth = [];
      this.shouldCalculateWidth = (previousProps) => {
        return previousProps.children !== this.props.children || previousProps.style !== this.props.style || previousProps.width !== this.props.width || previousProps.height !== this.props.height;
      };
      this.calculateWordWidths = (props) => {
        try {
          const words = props.children ? props.children.toString().split(/\s+/) : [];
          const wordsWithComputedWidth = words.map((word) => ({ word, width: this.getStringWidth(word, props.style) }));
          const spaceWidth = this.getStringWidth("\xA0", props.style);
          return { wordsWithComputedWidth, spaceWidth };
        } catch (e2) {
          return null;
        }
      };
    }
    componentDidMount() {
      this.updateWordsByLines(this.props, true);
    }
    componentDidUpdate(previousProps) {
      const needCalculate = this.shouldCalculateWidth(previousProps);
      if (needCalculate) {
        this.updateWordsByLines(this.props, needCalculate);
      }
    }
    getStringWidth(str, style) {
      try {
        const divElem = document.createElement("div");
        divElem.innerHTML = str;
        Object.assign(divElem.style, style);
        const width = this.calculateStringWidth(divElem, (el) => {
          return el.clientWidth + 2;
        });
        return width;
      } catch (e2) {
        return 0;
      }
    }
    calculateStringWidth(divElem, fn) {
      divElem.style.visibility = "hidden";
      divElem.style.position = "absolute";
      document.body.appendChild(divElem);
      const result = fn(divElem);
      divElem.parentNode.removeChild(divElem);
      return result;
    }
    updateWordsByLines(props, needCalculate) {
      if (props.width || props.scaleToFit) {
        if (needCalculate) {
          const wordWidths = this.calculateWordWidths(props);
          if (wordWidths) {
            const { wordsWithComputedWidth, spaceWidth } = wordWidths;
            this.wordsWithComputedWidth = wordsWithComputedWidth;
            this.spaceWidth = spaceWidth;
          } else {
            this.updateWordsWithoutCalculate(props);
            return;
          }
        }
        const wordsByLines = this.calculateWordsByLines(this.wordsWithComputedWidth, this.spaceWidth, props.width);
        this.setState({ wordsByLines });
      } else {
        this.updateWordsWithoutCalculate(props);
      }
    }
    updateWordsWithoutCalculate(props) {
      const words = props.children ? props.children.toString().split(/\s+/) : [];
      this.setState({ wordsByLines: [{ words, width: 0 }] });
    }
    calculateWordsByLines(wordsWithComputedWidth, spaceWidth, lineWidth) {
      const { scaleToFit } = this.props;
      return wordsWithComputedWidth.reduce((result, { word, width }) => {
        const currentLine = result[result.length - 1];
        if (currentLine && (!lineWidth || scaleToFit || currentLine.width + width + spaceWidth < lineWidth)) {
          currentLine.words.push(word);
          currentLine.width += width + spaceWidth;
        } else {
          const newLine = { words: [word], width };
          result.push(newLine);
        }
        return result;
      }, []);
    }
    render() {
      const { x: x2, y: y2, dx, dy, textAnchor, verticalAnchor, scaleToFit, angle, lineHeight, capHeight, fill, ...textProps } = this.props;
      const { wordsByLines } = this.state;
      const xPosition = x2 + dx;
      const yPosition = y2 + dy;
      let startDy;
      switch (verticalAnchor) {
        case "start":
          startDy = capHeight;
          break;
        case "middle":
          startDy = (wordsByLines.length - 1) / 2 * -lineHeight + capHeight / 2;
          break;
        default:
          startDy = wordsByLines.length - 1 * -lineHeight;
          break;
      }
      const transforms = [];
      if (scaleToFit && wordsByLines.length) {
        const lineWidth = wordsByLines[0].width;
        const sx = (this.props.width || 0) / lineWidth;
        const sy = sx;
        const originX = xPosition - sx * xPosition;
        const originY = yPosition - sy * yPosition;
        transforms.push(`matrix(${sx}, 0, 0, ${sy}, ${originX}, ${originY})`);
      }
      if (angle) {
        transforms.push(`rotate(${angle}, ${xPosition}, ${yPosition})`);
      }
      if (transforms.length) {
        textProps.transform = transforms.join(" ");
      }
      return import_react20.default.createElement("text", { style: fill ? { fill } : {}, x: xPosition, y: yPosition, textAnchor, ...textProps, pointerEvents: "none" }, wordsByLines.map((line, index) => import_react20.default.createElement("tspan", { x: xPosition, dy: index === 0 ? startDy : lineHeight, key: index }, line.words.join(" "))));
    }
  };
  Multiline.defaultProps = defaultProps;

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-action-node/uml-activity-action-node-component.js
  var UMLActivityActionNodeComponent = ({ element, fillColor }) => import_react21.default.createElement(
    "g",
    null,
    import_react21.default.createElement(ThemedRect, { rx: 10, ry: 10, width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react21.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: element.textColor }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-control-flow/uml-activity-control-flow-component.js
  var import_react22 = __toESM(require_react());
  var UMLActivityControlFlowComponent = ({ element }) => {
    let position = { x: 0, y: 0 };
    let direction = "v";
    const path = element.path.map((point) => new Point(point.x, point.y));
    let distance = path.reduce((length, point, i2, points) => i2 + 1 < points.length ? length + points[i2 + 1].subtract(point).length : length, 0) / 2;
    for (let index = 0; index < path.length - 1; index++) {
      const vector = path[index + 1].subtract(path[index]);
      if (vector.length > distance) {
        const norm = vector.normalize();
        direction = Math.abs(norm.x) > Math.abs(norm.y) ? "h" : "v";
        position = path[index].add(norm.scale(distance));
        break;
      }
      distance -= vector.length;
    }
    const layoutText = (dir) => {
      switch (dir) {
        case "v":
          return {
            dx: 5,
            dominantBaseline: "middle",
            textAnchor: "start"
          };
        case "h":
          return {
            dy: -5,
            dominantBaseline: "text-after-edge",
            textAnchor: "middle"
          };
      }
    };
    const fill = element.textColor ? { fill: element.textColor } : {};
    return import_react22.default.createElement(
      "g",
      null,
      import_react22.default.createElement(
        "marker",
        { id: `marker-${element.id}`, viewBox: "0 0 30 30", markerWidth: "22", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
        import_react22.default.createElement(ThemedPath, { d: "M0,29 L30,15 L0,1", fillColor: "none", strokeColor: element.strokeColor })
      ),
      import_react22.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, markerEnd: `url(#marker-${element.id})` }),
      import_react22.default.createElement("text", { x: position.x, y: position.y, ...layoutText(direction), pointerEvents: "none", style: { ...fill } }, element.name)
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-final-node/uml-activity-final-node-component.js
  var import_react23 = __toESM(require_react());
  var enhance5 = compose(Je, connect_default((state, props) => ({
    interactive: state.interactive.includes(props.element.id),
    interactable: state.editor.view === "Exporting" || state.editor.view === "Highlight"
  })));
  var UMLActivityFinalNodeC = ({ element, interactive, interactable: interactable2, theme }) => {
    return import_react23.default.createElement(
      "g",
      null,
      import_react23.default.createElement(ThemedCircle, { cx: "50%", cy: "50%", r: Math.min(element.bounds.width, element.bounds.height) / 2 - 2.5, strokeColor: interactable2 && interactive ? theme.interactive.normal : element.fillColor, strokeWidth: 5 }),
      import_react23.default.createElement(ThemedCircleContrast, { cx: "50%", cy: "50%", r: Math.min(element.bounds.width, element.bounds.height) / 2 - 7.5, strokeColor: "none", fillColor: interactive && interactable2 ? theme.interactive.normal : element.fillColor, fillOpacity: 1 })
    );
  };
  var UMLActivityFinalNodeComponent = enhance5(UMLActivityFinalNodeC);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-fork-node/uml-activity-fork-node-component.js
  var import_react24 = __toESM(require_react());
  var enhance6 = compose(Je, connect_default((state, props) => ({
    interactive: state.interactive.includes(props.element.id),
    interactable: state.editor.view === "Exporting" || state.editor.view === "Highlight"
  })));
  var UMLActivityForkNodeC = ({ element, interactive, interactable: interactable2, theme }) => {
    return import_react24.default.createElement(
      "g",
      null,
      import_react24.default.createElement(ThemedRectContrast, { width: element.bounds.width, height: element.bounds.height, strokeColor: "none", fillColor: interactive && interactable2 ? theme.interactive.normal : element.fillColor, fillOpacity: 1 })
    );
  };
  var UMLActivityForkNodeComponent = enhance6(UMLActivityForkNodeC);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-fork-node-horizontal/uml-activity-fork-node-horizontal-component.js
  var import_react25 = __toESM(require_react());
  var enhance7 = compose(Je, connect_default((state, props) => ({
    interactive: state.interactive.includes(props.element.id),
    interactable: state.editor.view === "Exporting" || state.editor.view === "Highlight"
  })));
  var UMLActivityForkNodeHorizontalC = ({ element, interactive, interactable: interactable2, theme }) => {
    return import_react25.default.createElement(
      "g",
      null,
      import_react25.default.createElement(ThemedRectContrast, { width: element.bounds.width, height: element.bounds.height, strokeColor: "none", fillColor: interactive && interactable2 ? theme.interactive.normal : element.fillColor, fillOpacity: 1 })
    );
  };
  var UMLActivityForkNodeHorizontalComponent = enhance7(UMLActivityForkNodeHorizontalC);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-initial-node/uml-activity-initial-node-component.js
  var import_react26 = __toESM(require_react());
  var enhance8 = compose(Je, connect_default((state, props) => ({
    interactive: state.interactive.includes(props.element.id),
    interactable: state.editor.view === "Exporting" || state.editor.view === "Highlight"
  })));
  var UMLActivityInitialNodeC = ({ element, interactive, interactable: interactable2, theme }) => {
    return import_react26.default.createElement(
      "g",
      null,
      import_react26.default.createElement(ThemedCircleContrast, { cx: "50%", cy: "50%", r: Math.min(element.bounds.width, element.bounds.height) / 2, strokeColor: "none", fillColor: interactive && interactable2 ? theme.interactive.normal : element.fillColor, fillOpacity: 1 })
    );
  };
  var UMLActivityInitialNodeComponent = enhance8(UMLActivityInitialNodeC);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-merge-node/uml-activity-merge-node-component.js
  var import_react27 = __toESM(require_react());
  var UMLActivityMergeNodeComponent = ({ element, fillColor }) => import_react27.default.createElement(
    "g",
    null,
    import_react27.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} 0, ${element.bounds.width} ${element.bounds.height / 2}, ${element.bounds.width / 2} ${element.bounds.height}, 0 ${element.bounds.height / 2}, ${element.bounds.width / 2} 0`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react27.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: element.textColor }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-object-node/uml-activity-object-node-component.js
  var import_react28 = __toESM(require_react());
  var UMLActivityObjectNodeComponent = ({ element, fillColor }) => import_react28.default.createElement(
    "g",
    null,
    import_react28.default.createElement(ThemedRect, { width: "100%", height: "100%", fillColor: fillColor || element.fillColor, strokeColor: element.strokeColor }),
    import_react28.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: element.textColor }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity/uml-activity-component.js
  var import_react29 = __toESM(require_react());
  var UMLActivityComponent = ({ element, children, fillColor }) => import_react29.default.createElement(
    "g",
    null,
    import_react29.default.createElement(ThemedRect, { rx: 10, ry: 10, width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react29.default.createElement(Text2, { y: 20, fill: element.textColor }, element.name),
    children
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-package/uml-class-package-component.js
  var import_react30 = __toESM(require_react());
  var UMLClassPackageComponent = ({ element, children, fillColor }) => import_react30.default.createElement(
    "g",
    null,
    import_react30.default.createElement(ThemedPath, { d: `M 0 10 V 0 H 40 V 10`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react30.default.createElement(ThemedRect, { y: 10, width: "100%", height: element.bounds.height - 10, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react30.default.createElement("text", { x: "50%", y: 20, dy: 10, textAnchor: "middle", fontWeight: "bold", pointerEvents: "none", style: element.textColor ? { fill: element.textColor } : {} }, element.name),
    children
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-communication-diagram/uml-communication-link/uml-communication-link-component.js
  var import_react32 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-communication-diagram/uml-communication-link/uml-communication-link-text-component.js
  var import_react31 = __toESM(require_react());
  var UmlCommunicationLinkTextComponent = ({ x: x2, y: y2, fill, textCentered = false, messages, directionIcon }) => {
    const tspanProps = textCentered ? { textAnchor: "middle" } : {};
    return import_react31.default.createElement(
      Text2,
      { x: x2, y: y2, fontSize: "85%", textAnchor: "start", dominantBaseline: "auto", fontWeight: "normal", fill },
      import_react31.default.createElement("tspan", { fontWeight: "bold", fontSize: "120%", ...tspanProps }, messages.length ? directionIcon : ""),
      messages.map((message, i2) => import_react31.default.createElement("tspan", { key: i2, x: message.bounds.x, y: message.bounds.y }, message.name))
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-communication-diagram/uml-communication-link/uml-communication-link-component.js
  var UMLCommunicationLinkComponent = ({ element }) => {
    const sources = element.messages.filter((message) => message.direction === "source");
    const targets = element.messages.filter((message) => message.direction === "target");
    let position = { x: 0, y: 0 };
    let direction = Direction.Left;
    const path = element.path.map((point) => new Point(point.x, point.y));
    let distance = path.reduce((length, point, i2, points) => i2 + 1 < points.length ? length + points[i2 + 1].subtract(point).length : length, 0) / 2;
    for (let index = 0; index < path.length - 1; index++) {
      const vector = path[index + 1].subtract(path[index]);
      if (vector.length > distance) {
        const norm = vector.normalize();
        direction = Math.abs(norm.x) > Math.abs(norm.y) ? norm.x > 0 ? Direction.Left : Direction.Right : norm.y > 0 ? Direction.Up : Direction.Down;
        position = path[index].add(norm.scale(distance));
        break;
      }
      distance -= vector.length;
    }
    return import_react32.default.createElement(
      "g",
      null,
      {
        [Direction.Up]: import_react32.default.createElement(
          import_react32.default.Fragment,
          null,
          import_react32.default.createElement(UmlCommunicationLinkTextComponent, { x: position.x + 8, y: position.y, fill: element.textColor, directionIcon: "\u2193", messages: sources }),
          import_react32.default.createElement(UmlCommunicationLinkTextComponent, { x: position.x - 16, y: position.y, fill: element.textColor, directionIcon: "\u2191", messages: targets })
        ),
        [Direction.Right]: import_react32.default.createElement(
          import_react32.default.Fragment,
          null,
          import_react32.default.createElement(UmlCommunicationLinkTextComponent, { x: position.x, y: position.y, fill: element.textColor, directionIcon: "\u27F6", messages: targets, textCentered: true }),
          import_react32.default.createElement(UmlCommunicationLinkTextComponent, { x: position.x, y: position.y + 16, fill: element.textColor, directionIcon: "\u27F5", messages: sources, textCentered: true })
        ),
        [Direction.Down]: import_react32.default.createElement(
          import_react32.default.Fragment,
          null,
          import_react32.default.createElement(UmlCommunicationLinkTextComponent, { x: position.x + 8, y: position.y, fill: element.textColor, directionIcon: "\u2193", messages: targets }),
          import_react32.default.createElement(UmlCommunicationLinkTextComponent, { x: position.x - 16, y: position.y, fill: element.textColor, directionIcon: "\u2191", messages: sources })
        ),
        [Direction.Left]: import_react32.default.createElement(
          import_react32.default.Fragment,
          null,
          import_react32.default.createElement(UmlCommunicationLinkTextComponent, { x: position.x, y: position.y, fill: element.textColor, directionIcon: "\u27F6", messages: sources, textCentered: true }),
          import_react32.default.createElement(UmlCommunicationLinkTextComponent, { x: position.x, y: position.y + 16, fill: element.textColor, directionIcon: "\u27F5", messages: targets, textCentered: true })
        )
      }[direction],
      import_react32.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1 })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-artifact/uml-deployment-artifact-component.js
  var import_react33 = __toESM(require_react());
  var UMLDeploymentArtifactComponent = ({ element, fillColor }) => import_react33.default.createElement(
    "g",
    null,
    import_react33.default.createElement(ThemedRect, { width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react33.default.createElement(Text2, { y: 28, dominantBaseline: "auto", fill: element.textColor }, element.name),
    import_react33.default.createElement(
      "g",
      { transform: `translate(${element.bounds.width - 26}, ${7})` },
      import_react33.default.createElement(ThemedPath, { d: "M 0 0 L 13 0 L 19.2 7.25 L 19.2 24 L 0 24 L 0 0 Z", fillColor: fillColor || element.fillColor, strokeColor: element.strokeColor, strokeWidth: "1.2", strokeMiterlimit: "10" }),
      import_react33.default.createElement(ThemedPath, { d: "M 13 0 L 13 7.25 L 19.2 7.25", fillColor: "none", strokeColor: element.strokeColor, strokeWidth: "1.2", strokeMiterlimit: "10" })
    )
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-association/uml-deployment-association-component.js
  var import_react34 = __toESM(require_react());
  var UMLDeploymentAssociationComponent = ({ element }) => {
    let position = { x: 0, y: 0 };
    let direction = "v";
    const path = element.path.map((point) => new Point(point.x, point.y));
    let distance = path.reduce((length, point, i2, points) => i2 + 1 < points.length ? length + points[i2 + 1].subtract(point).length : length, 0) / 2;
    for (let index = 0; index < path.length - 1; index++) {
      const vector = path[index + 1].subtract(path[index]);
      if (vector.length > distance) {
        const norm = vector.normalize();
        direction = Math.abs(norm.x) > Math.abs(norm.y) ? "h" : "v";
        position = path[index].add(norm.scale(distance));
        break;
      }
      distance -= vector.length;
    }
    const layoutText = (dir) => {
      switch (dir) {
        case "v":
          return {
            dx: 5,
            dominantBaseline: "middle",
            textAnchor: "start"
          };
        case "h":
          return {
            dy: -5,
            dominantBaseline: "text-after-edge",
            textAnchor: "middle"
          };
      }
    };
    return import_react34.default.createElement(
      "g",
      null,
      import_react34.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1 }),
      import_react34.default.createElement(Text2, { fill: element.textColor, x: position.x, y: position.y, ...layoutText(direction), pointerEvents: "none" }, element.name)
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-node/uml-deployment-node-component.js
  var import_react35 = __toESM(require_react());
  var UMLDeploymentNodeComponent = ({ element, children, fillColor }) => import_react35.default.createElement(
    "g",
    null,
    import_react35.default.createElement(
      "g",
      null,
      import_react35.default.createElement(ThemedPath, { d: `M 0 ${8} l ${8} -${8} H ${element.bounds.width} l -${8} ${8} Z`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
      import_react35.default.createElement(ThemedPath, { d: `M ${element.bounds.width} 0 V ${element.bounds.height - 8} l -${8} ${8} V ${8} Z`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
      import_react35.default.createElement(ThemedRect, { x: "0", y: 8, width: element.bounds.width - 8, height: element.bounds.height - 9, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor })
    ),
    import_react35.default.createElement(
      Text2,
      { y: 30, fill: element.textColor },
      element.stereotype && element.displayStereotype && import_react35.default.createElement("tspan", { x: "50%", dy: -8, textAnchor: "middle", fontSize: "85%" }, `\xAB${element.stereotype}\xBB`),
      import_react35.default.createElement("tspan", { x: "50%", dy: element.stereotype && element.displayStereotype ? 18 : 0, textDecoration: "underline", textAnchor: "middle" }, element.name)
    ),
    children
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-object-diagram/uml-object-link/uml-object-link-component.js
  var import_react36 = __toESM(require_react());
  var UMLObjectLinkComponent = ({ element }) => import_react36.default.createElement(
    "g",
    null,
    import_react36.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1 })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-actor/uml-use-case-actor-component.js
  var import_react37 = __toESM(require_react());
  var UMLUseCaseActorComponent = ({ element, fillColor }) => import_react37.default.createElement(
    "g",
    null,
    import_react37.default.createElement("rect", { width: "100%", height: "100%", fill: "none" }),
    import_react37.default.createElement(
      "g",
      { stroke: element.strokeColor || "black", strokeWidth: 2 },
      import_react37.default.createElement(ThemedCircle, { cx: computeDimension(1, 40, true), cy: computeDimension(1, 25, true), r: computeDimension(1, 15, true), fillColor: fillColor || element.fillColor, strokeColor: element.fillColor }),
      import_react37.default.createElement(ThemedLine, { x1: computeDimension(1, 40), y1: computeDimension(1, 40), x2: computeDimension(1, 40), y2: computeDimension(1, 75), strokeColor: element.fillColor }),
      import_react37.default.createElement(ThemedLine, { x1: computeDimension(1, 10), y1: 50, x2: computeDimension(1, 65), y2: 50, strokeColor: element.fillColor }),
      import_react37.default.createElement(ThemedLine, { x1: computeDimension(1, 40), y1: computeDimension(1, 75), x2: computeDimension(1, 10), y2: computeDimension(1, 110), strokeColor: element.fillColor }),
      import_react37.default.createElement(ThemedLine, { x1: computeDimension(1, 40), y1: computeDimension(1, 75), x2: computeDimension(1, 65), y2: computeDimension(1, 110), strokeColor: element.fillColor })
    ),
    import_react37.default.createElement(Text2, { fill: element.textColor, x: computeDimension(1, 40), y: computeDimension(1, 130) }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-association/uml-use-case-association-component.js
  var import_react38 = __toESM(require_react());
  var UMLUseCaseAssociationComponent = ({ element }) => {
    const [start, end] = element.path.map((p) => new Point(p.x, p.y));
    const line = end.subtract(start);
    const norm = line.normalize();
    const center = start.add(norm.scale(0.5 * line.length));
    return import_react38.default.createElement(
      "g",
      null,
      import_react38.default.createElement("path", { id: `textpath-${element.id}`, d: `
        M ${start.x} ${start.y - 10}
        L ${end.x} ${end.y - 10}
    ` }),
      import_react38.default.createElement(
        Text2,
        { dy: "20px", noX: true, noY: true, fill: element.textColor, transform: norm.x < 0 ? `
            translate(${center.x}, ${center.y})
            rotate(180)
            translate(${-center.x}, ${-center.y})
          ` : void 0 },
        import_react38.default.createElement("textPath", { xlinkHref: `#textpath-${element.id}`, startOffset: "50%" }, element.name)
      ),
      import_react38.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1 })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-extend/uml-use-case-extend-component.js
  var import_react39 = __toESM(require_react());
  var Arrow = ({ id: id2, color, d: d2 }) => import_react39.default.createElement(
    "g",
    null,
    import_react39.default.createElement(
      "marker",
      { id: `marker-${id2}`, viewBox: "0 0 30 30", markerWidth: "22", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
      import_react39.default.createElement(ThemedPath, { d: "M0,29 L30,15 L0,1", fillColor: "none", strokeColor: color })
    ),
    import_react39.default.createElement(ThemedPath, { d: d2, strokeDasharray: 7, markerEnd: `url(#marker-${id2})`, strokeColor: color })
  );
  var UMLUseCaseExtendComponent = ({ element }) => {
    const [start, end] = element.path.map((p) => new Point(p.x, p.y));
    const line = end.subtract(start);
    if (line.length <= 100) {
      return import_react39.default.createElement(Arrow, { id: element.id, color: element.strokeColor, d: `M ${start.x} ${start.y} L ${end.x} ${end.y}` });
    }
    const norm = line.normalize();
    const center = start.add(norm.scale(0.5 * line.length));
    const startSection = start.add(norm.scale(0.5 * line.length - 40));
    const endSection = end.subtract(norm.scale(0.5 * line.length - 40));
    return import_react39.default.createElement(
      "g",
      null,
      import_react39.default.createElement(Arrow, { color: element.strokeColor, id: element.id, d: `
          M ${start.x} ${start.y} L ${startSection.x} ${startSection.y}
          M ${endSection.x} ${endSection.y} L ${end.x} ${end.y}
        ` }),
      import_react39.default.createElement("path", { id: `textpath-${element.id}`, d: `
          M ${startSection.x} ${startSection.y}
          L ${endSection.x} ${endSection.y}
        ` }),
      import_react39.default.createElement(
        Text2,
        { noX: true, noY: true, fill: element.textColor, transform: norm.x < 0 ? `
              translate(${center.x}, ${center.y})
              rotate(180)
              translate(${-center.x}, ${-center.y})
            ` : void 0 },
        import_react39.default.createElement("textPath", { xlinkHref: `#textpath-${element.id}`, startOffset: "50%" }, "\xABextend\xBB")
      )
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-generalization/uml-use-case-generalization-component.js
  var import_react40 = __toESM(require_react());
  var UMLUseCaseGeneralizationComponent = ({ element }) => import_react40.default.createElement(
    "g",
    null,
    import_react40.default.createElement(
      "marker",
      { id: `marker-${element.id}`, viewBox: "0 0 30 30", markerWidth: "22", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
      import_react40.default.createElement(ThemedPath, { d: "M0,1 L0,29 L30,15 z", strokeColor: element.strokeColor })
    ),
    import_react40.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, markerEnd: `url(#marker-${element.id})` })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-include/uml-use-case-include-component.js
  var import_react41 = __toESM(require_react());
  var Arrow2 = ({ id: id2, color, d: d2 }) => import_react41.default.createElement(
    "g",
    null,
    import_react41.default.createElement(
      "marker",
      { id: `marker-${id2}`, viewBox: "0 0 30 30", markerWidth: "22", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
      import_react41.default.createElement(ThemedPath, { d: "M0,29 L30,15 L0,1", fillColor: "none", strokeColor: color })
    ),
    import_react41.default.createElement(ThemedPath, { d: d2, strokeColor: color, strokeDasharray: 7, markerEnd: `url(#marker-${id2})` })
  );
  var UMLUseCaseIncludeComponent = ({ element }) => {
    const [start, end] = element.path.map((p) => new Point(p.x, p.y));
    const line = end.subtract(start);
    if (line.length <= 100) {
      return import_react41.default.createElement(Arrow2, { id: element.id, color: element.strokeColor, d: `M ${start.x} ${start.y} L ${end.x} ${end.y}` });
    }
    const norm = line.normalize();
    const center = start.add(norm.scale(0.5 * line.length));
    const startSection = start.add(norm.scale(0.5 * line.length - 40));
    const endSection = end.subtract(norm.scale(0.5 * line.length - 40));
    return import_react41.default.createElement(
      "g",
      null,
      import_react41.default.createElement(Arrow2, { id: element.id, color: element.strokeColor, d: `
          M ${start.x} ${start.y} L ${startSection.x} ${startSection.y}
          M ${endSection.x} ${endSection.y} L ${end.x} ${end.y}
        ` }),
      import_react41.default.createElement("path", { id: `textpath-${element.id}`, d: `
          M ${startSection.x} ${startSection.y}
          L ${endSection.x} ${endSection.y}
        ` }),
      import_react41.default.createElement(
        Text2,
        { noX: true, noY: true, fill: element.textColor, transform: norm.x < 0 ? `
              translate(${center.x}, ${center.y})
              rotate(180)
              translate(${-center.x}, ${-center.y})
            ` : void 0 },
        import_react41.default.createElement("textPath", { xlinkHref: `#textpath-${element.id}`, startOffset: "50%" }, "\xABinclude\xBB")
      )
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-system/uml-use-case-system-component.js
  var import_react42 = __toESM(require_react());
  var UMLUseCaseSystemComponent = ({ element, children, fillColor }) => import_react42.default.createElement(
    "g",
    null,
    import_react42.default.createElement(ThemedRect, { width: "100%", height: "100%", fillColor: fillColor || element.fillColor, strokeColor: element.strokeColor }),
    import_react42.default.createElement(Text2, { fill: element.textColor, y: 16 }, element.name),
    children
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case/uml-use-case-component.js
  var import_react43 = __toESM(require_react());
  var UMLUseCaseComponent = ({ element, fillColor }) => import_react43.default.createElement(
    "g",
    null,
    import_react43.default.createElement(ThemedEllipse, { cx: "50%", cy: "50%", rx: "50%", ry: "50%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react43.default.createElement(Text2, { fill: element.textColor }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-interface/uml-interface-component.js
  var import_react44 = __toESM(require_react());
  var UMLInterfaceComponent = ({ element, fillColor }) => import_react44.default.createElement(
    "g",
    null,
    import_react44.default.createElement(ThemedCircle, { cx: "50%", cy: "50%", r: 10, strokeColor: element.strokeColor, strokeWidth: 2, fillColor: fillColor || element.fillColor }),
    import_react44.default.createElement(Text2, { x: 25, noY: true, dominantBaseline: "auto", textAnchor: "start", fill: element.textColor }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-interface-provided/uml-interface-provided-component.js
  var import_react45 = __toESM(require_react());
  var UMLInterfaceProvidedComponent = ({ element }) => import_react45.default.createElement(
    "g",
    null,
    import_react45.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-interface-required/uml-interface-required-component.js
  var import_react46 = __toESM(require_react());
  var enhance9 = connect_default((state, props) => {
    const requiredInterfaces = state.diagram.ownedRelationships.map((relationshipId) => state.elements[relationshipId]).filter((relationship) => UMLInterfaceRequired.isUMLInterfaceRequired(relationship)).map((relationship) => relationship);
    return {
      hasOppositeRequiredInterface: requiredInterfaces.filter((element) => element.id !== props.element.id).some((otherRequiredInterface) => otherRequiredInterface.target.element === props.element.target.element && otherRequiredInterface.target.direction.valueOf() === getOppositeDirection(props.element.target.direction).valueOf()),
      currentRequiredInterfaces: requiredInterfaces.filter((element) => element.target.element === props.element.target.element),
      currentAllInterfaces: state.diagram.ownedRelationships.map((relationshipId) => state.elements[relationshipId]).filter((element) => element.target.element === props.element.target.element)
    };
  }, {});
  var UMLInterfaceRequiredC = (props) => {
    const { element, hasOppositeRequiredInterface, currentRequiredInterfaces, currentAllInterfaces } = props;
    let offset;
    switch (element.target.direction) {
      case Direction.Up:
        offset = new Point(0, -3);
        break;
      case Direction.Down:
        offset = new Point(0, 3);
        break;
      case Direction.Right:
        offset = new Point(3, 0);
        break;
      case Direction.Left:
        offset = new Point(-3, 0);
        break;
    }
    const calculatePath = () => {
      let path = "";
      switch (currentRequiredInterfaces.length) {
        case 1:
          path = currentAllInterfaces.length === currentRequiredInterfaces.length ? "M 13 -13.5 a 1 1 0 0 0 0 27" : "M 8 -12.5 C -3.5 -7.5 -3.3 7.9 8 12.5";
          break;
        case 2:
          path = hasOppositeRequiredInterface ? "M 8 -12.5 C -3.5 -7.5 -3.3 7.9 8 12.5" : "M 2 -7.8 C -1.5 -3 -1.2 3.4 2 7.8";
          break;
        default:
          path = "M 2 -7.8 C -1.5 -3 -1.2 3.4 2 7.8";
          break;
      }
      return path;
    };
    return import_react46.default.createElement(
      "g",
      null,
      import_react46.default.createElement(
        "marker",
        { id: `marker-${element.id}`, viewBox: `0 0 ${REQUIRED_INTERFACE_MARKER_SIZE} ${REQUIRED_INTERFACE_MARKER_SIZE}`, markerWidth: REQUIRED_INTERFACE_MARKER_SIZE, markerHeight: REQUIRED_INTERFACE_MARKER_SIZE, refX: "0", refY: "0", orient: "auto", markerUnits: "strokeWidth" },
        import_react46.default.createElement(ThemedPath, { d: calculatePath(), fillColor: "none", strokeColor: element.strokeColor, strokeWidth: 2 })
      ),
      import_react46.default.createElement(ThemedPolyline, { points: element.path.map((point, index) => {
        if (index === element.path.length - 1) {
          point = new Point(point.x, point.y).add(offset);
        }
        return `${point.x} ${point.y}`;
      }).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, markerEnd: `url(#marker-${element.id})` })
    );
  };
  var UMLInterfaceRequiredComponent = enhance9(UMLInterfaceRequiredC);

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-dependency/uml-dependency-component.js
  var import_react47 = __toESM(require_react());
  var UMLDependencyComponent = ({ element }) => import_react47.default.createElement(
    "g",
    null,
    import_react47.default.createElement(
      "marker",
      { id: `marker-${element.id}`, viewBox: "0 0 30 30", markerWidth: "22", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
      import_react47.default.createElement(ThemedPath, { d: "M0,29 L30,15 L0,1", fillColor: "none", strokeColor: element.strokeColor })
    ),
    import_react47.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, strokeDasharray: 7, markerEnd: `url(#marker-${element.id})` })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/uml-petri-net-place/uml-petri-net-place-component.js
  var import_react48 = __toESM(require_react());
  var maxAmountCircles = 5;
  var tokenToBoundaryDistance = 5;
  var tokenToTokenDistance = 2.5;
  var calculateTokenRadius = (amountOfTokens, outerRadius) => {
    if (amountOfTokens <= 2) {
      return outerRadius / 2;
    } else {
      return outerRadius / (1 + 1 / Math.sin(Math.PI / amountOfTokens));
    }
  };
  var calculatePositions = (amountOfTokens, outerRadius) => {
    const positions = [];
    if (amountOfTokens === 1) {
      positions.push(new Point(0, 0));
    } else {
      const degreeFraction = 2 * Math.PI / amountOfTokens;
      const tokenRadius = calculateTokenRadius(maxAmountCircles, outerRadius);
      const tokenCenterCircleRadius = outerRadius + tokenToTokenDistance * amountOfTokens / maxAmountCircles - tokenRadius;
      for (let i2 = 0; i2 < amountOfTokens; i2++) {
        const degree = i2 * degreeFraction + 1 / 2 * Math.PI;
        positions.push(new Point(Math.cos(degree) * tokenCenterCircleRadius, Math.sin(degree) * tokenCenterCircleRadius));
      }
    }
    return positions;
  };
  var UMLPetriNetPlaceComponent = ({ element, fillColor }) => {
    const radius = Math.min(element.bounds.width, element.bounds.height) / 2;
    const displayTokenAsNumber = element.amountOfTokens > 0 && element.amountOfTokens > maxAmountCircles;
    const displayCapacity = element.capacity !== UMLPetriNetPlace.defaultCapacity;
    let tokenPositions = [];
    let tokenRadius;
    if (element.amountOfTokens > 0) {
      if (!displayTokenAsNumber) {
        const radiusWithPadding = radius - tokenToBoundaryDistance;
        tokenPositions = calculatePositions(element.amountOfTokens, radiusWithPadding);
        tokenRadius = calculateTokenRadius(maxAmountCircles, radiusWithPadding);
      }
    }
    return import_react48.default.createElement(
      "g",
      null,
      import_react48.default.createElement(ThemedCircle, { cx: "50%", cy: "50%", r: radius, strokeColor: element.strokeColor, strokeWidth: 1, fillColor: fillColor || element.fillColor, fillOpacity: 1 }),
      !displayTokenAsNumber && tokenPositions.map((position, index) => import_react48.default.createElement(ThemedCircleContrast, { key: index, cx: radius + position.x, cy: radius + position.y, r: tokenRadius, strokeColor: "none", fillColor: element.strokeColor, fillOpacity: 1 })),
      displayTokenAsNumber && import_react48.default.createElement(Text2, { fill: element.strokeColor }, element.amountOfTokens),
      displayCapacity && import_react48.default.createElement(
        "text",
        { x: "95%", y: 5, pointerEvents: "none", style: element.textColor ? { fill: element.textColor } : {} },
        "C=",
        element.capacity
      ),
      import_react48.default.createElement(Text2, { fill: element.textColor, y: element.bounds.height + 15 }, element.name)
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/uml-petri-net-transition/uml-petri-net-transition-component.js
  var import_react49 = __toESM(require_react());
  var UMLPetriNetTransitionComponent = ({ element, fillColor }) => import_react49.default.createElement(
    "g",
    null,
    import_react49.default.createElement(Text2, { y: -15, fill: element.textColor }, element.name),
    import_react49.default.createElement(ThemedRect, { width: element.bounds.width, height: element.bounds.height, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor, strokeWidth: 1, fillOpacity: 1 })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/uml-petri-net-arc/uml-petri-net-arc-component.js
  var import_react50 = __toESM(require_react());
  var UMLPetriNetArcComponent = ({ element }) => {
    const [start, end] = element.path.map((p) => new Point(p.x, p.y));
    const line = end.subtract(start);
    const norm = line.normalize();
    const center = start.add(norm.scale(0.5 * line.length));
    const displayMultiplicity = element.name !== UMLPetriNetArc.defaultMultiplicity;
    return import_react50.default.createElement(
      "g",
      null,
      import_react50.default.createElement(
        "marker",
        { id: `marker-${element.id}`, viewBox: "0 0 30 30", markerWidth: "22", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
        import_react50.default.createElement(ThemedPathContrast, { d: "M0,1 L0,29 L30,15 z", fill: element.strokeColor })
      ),
      import_react50.default.createElement("path", { id: `textpath-${element.id}`, d: `
        M ${start.x} ${start.y - 10}
        L ${end.x} ${end.y - 10}
    ` }),
      displayMultiplicity && import_react50.default.createElement(
        Text2,
        { dy: "20px", noX: true, noY: true, fill: element.textColor, transform: norm.x < 0 ? `
            translate(${center.x}, ${center.y})
            rotate(180)
            translate(${-center.x}, ${-center.y})
          ` : void 0 },
        import_react50.default.createElement("textPath", { xlinkHref: `#textpath-${element.id}`, startOffset: "50%" }, element.name)
      ),
      import_react50.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, markerEnd: `url(#marker-${element.id})` })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-reachability-graph/uml-reachability-graph-arc/uml-reachability-graph-arc-component.js
  var import_react51 = __toESM(require_react());
  var UMLReachabilityGraphArcComponent = ({ element }) => {
    let position = { x: 0, y: 0 };
    let direction = "v";
    const path = element.path.map((point) => new Point(point.x, point.y));
    let distance = path.reduce((length, point, i2, points) => i2 + 1 < points.length ? length + points[i2 + 1].subtract(point).length : length, 0) / 2;
    for (let index = 0; index < path.length - 1; index++) {
      const vector = path[index + 1].subtract(path[index]);
      if (vector.length > distance) {
        const norm = vector.normalize();
        direction = Math.abs(norm.x) > Math.abs(norm.y) ? "h" : "v";
        position = path[index].add(norm.scale(distance));
        break;
      }
      distance -= vector.length;
    }
    const layoutText = (dir) => {
      switch (dir) {
        case "v":
          return {
            dx: 5,
            dominantBaseline: "middle",
            textAnchor: "start"
          };
        case "h":
          return {
            dy: -5,
            dominantBaseline: "text-after-edge",
            textAnchor: "middle"
          };
      }
    };
    const textColor = element.textColor ? { fill: element.textColor } : {};
    return import_react51.default.createElement(
      "g",
      null,
      import_react51.default.createElement(
        "marker",
        { id: `marker-${element.id}`, viewBox: `0 0 ${30} ${30}`, markerWidth: 22, markerHeight: 30, refX: 30, refY: 15, orient: "auto", markerUnits: "strokeWidth" },
        import_react51.default.createElement(ThemedPath, { d: `M0,${29} L${30},${15} L0,${1}`, fillColor: "none", strokeColor: element.strokeColor })
      ),
      import_react51.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, markerEnd: `url(#marker-${element.id})` }),
      import_react51.default.createElement("text", { x: position.x, y: position.y, ...layoutText(direction), pointerEvents: "none", style: { ...textColor } }, element.name)
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-reachability-graph/uml-reachability-graph-marking/uml-reachability-graph-marking-component.js
  var import_react52 = __toESM(require_react());
  var UMLReachabilityGraphMarkingComponent = ({ element, fillColor }) => import_react52.default.createElement(
    "g",
    null,
    import_react52.default.createElement(ThemedRect, { rx: 10, ry: 10, width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react52.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: element.textColor, lineHeight: 16, capHeight: 11 }, element.name),
    element.isInitialMarking && import_react52.default.createElement(
      "g",
      null,
      import_react52.default.createElement(
        "marker",
        { id: `marker-${element.id}`, viewBox: `0 0 ${30} ${30}`, markerWidth: 22, markerHeight: 30, refX: 30, refY: 15, orient: "auto", markerUnits: "strokeWidth" },
        import_react52.default.createElement(ThemedPath, { d: `M0,${29} L${30},${15} L0,${1}`, fillColor: "none", strokeColor: element.strokeColor })
      ),
      import_react52.default.createElement(ThemedPolyline, { points: `-${50},-${50} ${3},${3}`, strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, markerEnd: `url(#marker-${element.id})` })
    )
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-component/uml-component-component.js
  var import_react53 = __toESM(require_react());
  var UMLComponentComponent2 = ({ element, children, fillColor }) => import_react53.default.createElement(
    "g",
    { "data-cy": "uml-component" },
    import_react53.default.createElement(ThemedRect, { width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react53.default.createElement(
      "g",
      { transform: `translate(${element.bounds.width - 31}, 7)` },
      import_react53.default.createElement(ThemedPath, { d: "M 4.8 0 L 24 0 L 24 24 L 4.8 24 L 4.8 19.2 L 0 19.2 L 0 14.4 L 4.8 14.4 L 4.8 9.6 L 0 9.6 L 0 4.8 L 4.8 4.8 Z", fillColor: fillColor || element.fillColor, strokeColor: element.strokeColor, strokeWidth: "1.2", strokeMiterlimit: "10" }),
      import_react53.default.createElement(ThemedPath, { d: "M 4.8 4.8 L 9.6 4.8 L 9.6 9.6 L 4.8 9.6 M 4.8 14.4 L 9.6 14.4 L 9.6 19.2 L 4.8 19.2", fillColor: "none", strokeColor: element.strokeColor, strokeWidth: "1.2", strokeMiterlimit: "10" })
    ),
    import_react53.default.createElement(
      Text2,
      { fill: element.textColor },
      element.stereotype && element.displayStereotype && import_react53.default.createElement("tspan", { x: "50%", dy: -8, textAnchor: "middle", fontSize: "85%" }, `\xAB${element.stereotype}\xBB`),
      import_react53.default.createElement("tspan", { x: "50%", dy: element.stereotype && element.displayStereotype ? 18 : 0, textAnchor: "middle" }, element.name)
    ),
    children
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component-subsystem/uml-component-subsystem-component.js
  var import_react54 = __toESM(require_react());
  var UMLComponentSubsystem = ({ element, children, fillColor }) => import_react54.default.createElement(
    "g",
    { "data-cy": "uml-subsystem" },
    import_react54.default.createElement(ThemedRect, { width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react54.default.createElement(
      "g",
      { transform: `translate(${element.bounds.width - 31}, 7)` },
      import_react54.default.createElement(ThemedPath, { d: "M 4.8 0 L 24 0 L 24 24 L 4.8 24 L 4.8 19.2 L 0 19.2 L 0 14.4 L 4.8 14.4 L 4.8 9.6 L 0 9.6 L 0 4.8 L 4.8 4.8 Z", fillColor: fillColor || element.fillColor, strokeColor: element.strokeColor, strokeWidth: "1.2", strokeMiterlimit: "10" }),
      import_react54.default.createElement(ThemedPath, { d: "M 4.8 4.8 L 9.6 4.8 L 9.6 9.6 L 4.8 9.6 M 4.8 14.4 L 9.6 14.4 L 9.6 19.2 L 4.8 19.2", fillColor: "none", strokeColor: element.strokeColor, strokeWidth: "1.2", strokeMiterlimit: "10" })
    ),
    import_react54.default.createElement(
      Text2,
      { fill: element.textColor, y: `${25}px` },
      element.stereotype && element.displayStereotype && import_react54.default.createElement("tspan", { x: "50%", dy: -8, textAnchor: "middle", fontSize: "85%" }, `\xAB${element.stereotype}\xBB`),
      import_react54.default.createElement("tspan", { x: "50%", dy: element.stereotype && element.displayStereotype ? 18 : 0, textAnchor: "middle" }, element.name)
    ),
    children
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/syntax-tree-terminal/syntax-tree-terminal-component.js
  var import_react55 = __toESM(require_react());
  var SyntaxTreeTerminalComponent = ({ element, fillColor }) => import_react55.default.createElement(
    "g",
    null,
    import_react55.default.createElement(ThemedRect, { width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react55.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: element.textColor, lineHeight: 16, capHeight: 11 }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/syntax-tree-nonterminal/syntax-tree-nonterminal-component.js
  var import_react56 = __toESM(require_react());
  var SyntaxTreeNonterminalComponent = ({ element, fillColor }) => import_react56.default.createElement(
    "g",
    null,
    import_react56.default.createElement(ThemedRect, { rx: 10, ry: 10, width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react56.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: element.textColor, lineHeight: 16, capHeight: 11 }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/syntax-tree-link/syntax-tree-link-component.js
  var import_react57 = __toESM(require_react());
  var SyntaxTreeLinkComponent = ({ element }) => {
    return import_react57.default.createElement(
      "g",
      null,
      import_react57.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1 })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-flowline/flowchart-flowline-component.js
  var import_react58 = __toESM(require_react());
  var FlowchartFlowlineComponent = ({ element }) => {
    let position = { x: 0, y: 0 };
    let direction = "v";
    const path = element.path.map((point) => new Point(point.x, point.y));
    let distance = path.reduce((length, point, i2, points) => i2 + 1 < points.length ? length + points[i2 + 1].subtract(point).length : length, 0) / 2;
    for (let index = 0; index < path.length - 1; index++) {
      const vector = path[index + 1].subtract(path[index]);
      if (vector.length > distance) {
        const norm = vector.normalize();
        direction = Math.abs(norm.x) > Math.abs(norm.y) ? "h" : "v";
        position = path[index].add(norm.scale(distance));
        break;
      }
      distance -= vector.length;
    }
    const layoutText = (dir) => {
      switch (dir) {
        case "v":
          return {
            dx: 5,
            dominantBaseline: "middle",
            textAnchor: "start"
          };
        case "h":
          return {
            dy: -5,
            dominantBaseline: "text-after-edge",
            textAnchor: "middle"
          };
      }
    };
    const fill = element.textColor ? { fill: element.textColor } : {};
    return import_react58.default.createElement(
      "g",
      null,
      import_react58.default.createElement(
        "marker",
        { id: `marker-${element.id}`, viewBox: "0 0 30 30", markerWidth: "22", markerHeight: "30", refX: "30", refY: "15", orient: "auto", markerUnits: "strokeWidth" },
        import_react58.default.createElement(ThemedPath, { d: "M0,29 L30,15 L0,1", fillColor: "none", strokeColor: element.strokeColor })
      ),
      import_react58.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, markerEnd: `url(#marker-${element.id})` }),
      import_react58.default.createElement("text", { x: position.x, y: position.y, ...layoutText(direction), pointerEvents: "none", style: { ...fill } }, element.name)
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-terminal/flowchart-terminal-component.js
  var import_react60 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-element/flowchart-component.js
  var import_react59 = __toESM(require_react());
  var FlowchartComponent = ({ element, children }) => import_react59.default.createElement(
    "g",
    null,
    children,
    import_react59.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: element.textColor, lineHeight: 16, capHeight: 11 }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-terminal/flowchart-terminal-component.js
  var FlowchartTerminalComponent = ({ element, fillColor }) => import_react60.default.createElement(
    FlowchartComponent,
    { element },
    import_react60.default.createElement(ThemedRect, { fillColor: fillColor || element.fillColor, rx: 10, ry: 10, width: "100%", height: "100%", strokeColor: element.strokeColor })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-process/flowchart-process-component.js
  var import_react61 = __toESM(require_react());
  var FlowchartProcessComponent = ({ element, fillColor }) => import_react61.default.createElement(
    FlowchartComponent,
    { element },
    import_react61.default.createElement(ThemedRect, { width: "100%", height: "100%", strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-decision/flowchart-decision-component.js
  var import_react62 = __toESM(require_react());
  var FlowchartDecisionComponent = ({ element, fillColor }) => import_react62.default.createElement(
    FlowchartComponent,
    { element },
    import_react62.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} 0, ${element.bounds.width} ${element.bounds.height / 2}, ${element.bounds.width / 2} ${element.bounds.height}, 0 ${element.bounds.height / 2}, ${element.bounds.width / 2} 0`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-function-call/flowchart-function-call-component.js
  var import_react63 = __toESM(require_react());
  var FlowchartFunctionCallComponent = ({ element, fillColor }) => import_react63.default.createElement(
    FlowchartComponent,
    { element },
    import_react63.default.createElement(ThemedRect, { fillColor: fillColor || element.fillColor, width: 10, height: "100%", strokeColor: element.strokeColor, x: "0" }),
    import_react63.default.createElement(ThemedRect, { width: element.bounds.width - 20, height: "100%", strokeColor: element.strokeColor, x: 10, fillColor: fillColor || element.fillColor }),
    import_react63.default.createElement(ThemedRect, { width: 10, height: "100%", strokeColor: element.strokeColor, x: element.bounds.width - 10, fillColor: fillColor || element.fillColor })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-input-output/flowchart-input-output-component.js
  var import_react64 = __toESM(require_react());
  var FlowchartInputOutputComponent = ({ element, fillColor }) => {
    return import_react64.default.createElement(
      FlowchartComponent,
      { element },
      import_react64.default.createElement(ThemedPolyline, { points: `${computeDimension(1.1, element.bounds.width)} 0, ${computeDimension(0.9, element.bounds.width)} ${element.bounds.height}, ${computeDimension(-0.1, element.bounds.width)} ${element.bounds.height}, ${computeDimension(0.1, element.bounds.width)} 0, ${computeDimension(1.1, element.bounds.width)} 0`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/color-legend/color-legend-component.js
  var import_react65 = __toESM(require_react());
  var ColorLegendComponent = ({ element, fillColor }) => import_react65.default.createElement(
    "g",
    null,
    import_react65.default.createElement(ThemedPath, { d: `M 0 0 L ${element.bounds.width - 15} 0 L ${element.bounds.width} 15 L ${element.bounds.width} ${element.bounds.height} L 0 ${element.bounds.height} L 0 0 Z`, fillColor: fillColor || element.fillColor, strokeColor: element.strokeColor, strokeWidth: "1.2", strokeMiterlimit: "10" }),
    import_react65.default.createElement(ThemedPath, { d: `M ${element.bounds.width - 15} 0 L ${element.bounds.width - 15} 15 L ${element.bounds.width} 15`, fillColor: "none", strokeColor: element.strokeColor, strokeWidth: "1.2", strokeMiterlimit: "10" }),
    import_react65.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: element.textColor }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-flow/bpmn-flow-component.js
  var import_react66 = __toESM(require_react());
  var BPMNFlowComponent = ({ element }) => {
    let position = { x: 0, y: 0 };
    let direction = "vertical";
    const path = element.path.map((point) => new Point(point.x, point.y));
    let distance = path.reduce((length, point, i2, points) => i2 + 1 < points.length ? length + points[i2 + 1].subtract(point).length : length, 0) / 2;
    for (let index = 0; index < path.length - 1; index++) {
      const vector = path[index + 1].subtract(path[index]);
      if (vector.length > distance) {
        const normalized = vector.normalize();
        direction = Math.abs(normalized.x) > Math.abs(normalized.y) ? "horizontal" : "vertical";
        position = path[index].add(normalized.scale(distance));
        break;
      }
      distance -= vector.length;
    }
    const layoutText = (direction2) => {
      switch (direction2) {
        case "vertical":
          return {
            dx: 5,
            dominantBaseline: "middle",
            textAnchor: "start"
          };
        case "horizontal":
          return {
            dy: -5,
            dominantBaseline: "text-after-edge",
            textAnchor: "middle"
          };
      }
    };
    return import_react66.default.createElement(
      "g",
      null,
      element.flowType === "message" && import_react66.default.createElement(
        "marker",
        { id: `marker-start-${element.id}`, viewBox: `0 0 ${10} ${10}`, markerWidth: 10, markerHeight: 10, refX: 0, refY: 0, orient: "auto", markerUnits: "strokeWidth" },
        import_react66.default.createElement(ThemedCircle, { cx: "0%", cy: "0%", r: 5, strokeColor: element.fillColor, strokeWidth: 1 })
      ),
      (element.flowType === "sequence" || element.flowType === "message") && import_react66.default.createElement(
        "marker",
        { id: `marker-end-${element.id}`, viewBox: `0 0 ${10} ${5}`, markerWidth: 10, markerHeight: 10, refX: 11, refY: 5, orient: "auto", markerUnits: "strokeWidth" },
        import_react66.default.createElement(ThemedPath, { d: `M0,0 L10,5 L0,10, L0,0 z`, fillRule: "evenodd", fillColor: "strokeColor", strokeLinejoin: "round" })
      ),
      element.flowType === "data association" && import_react66.default.createElement(
        "marker",
        { id: `marker-end-${element.id}`, viewBox: `0 0 ${10} ${5}`, markerWidth: 10, markerHeight: 10, refX: 11, refY: 5, orient: "auto", markerUnits: "strokeWidth" },
        import_react66.default.createElement(ThemedPath, { d: `M5,0 L10,5 L5,10`, fillRule: "evenodd", strokeLinejoin: "round", strokeLinecap: "round", fillColor: "transparent" })
      ),
      import_react66.default.createElement(ThemedPolyline, { points: element.path.map((point) => `${point.x} ${point.y}`).join(","), strokeColor: element.strokeColor, fillColor: "none", strokeWidth: 1, markerStart: element.flowType === "message" ? `url(#marker-start-${element.id})` : void 0, markerEnd: element.flowType !== "association" ? `url(#marker-end-${element.id})` : void 0, strokeDasharray: element.flowType !== "sequence" ? 4 : void 0 }),
      import_react66.default.createElement("text", { x: position.x, y: position.y, ...layoutText(direction), pointerEvents: "none", style: { fill: element.textColor } }, element.name)
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-task/bpmn-task-component.js
  var import_react76 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-message-icon.js
  var import_react67 = __toESM(require_react());
  var BPMNMessageIcon = (props) => import_react67.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react67.default.createElement(ThemedPolyline, { points: "0 3, 0 17, 20 17, 20 3, 10 11, 0 3, 20 3", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "transparent" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-message-filled-icon.js
  var import_react68 = __toESM(require_react());
  var BPMNMessageFilledIcon = (props) => import_react68.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react68.default.createElement(ThemedPolyline, { points: "0.2 3, 19.8 3, 10 11, 0.2 3", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "currentColor" }),
    import_react68.default.createElement(ThemedPolyline, { points: "0 5.5, 0 17, 20 17, 20 5.5, 10 13.5, 0 5.5", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "currentColor" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-script-icon.js
  var import_react69 = __toESM(require_react());
  var BPMNScriptIcon = (props) => import_react69.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react69.default.createElement(ThemedRect, { height: 16, width: 16, x: 2, y: 2, strokeLinejoin: "round", fillColor: "transparent" }),
    import_react69.default.createElement(ThemedPolyline, { points: "6 6, 12 6", strokeLinecap: "round", strokeLinejoin: "round" }),
    import_react69.default.createElement(ThemedPolyline, { points: "6 10, 14 10", strokeLinecap: "round", strokeLinejoin: "round" }),
    import_react69.default.createElement(ThemedPolyline, { points: "6 14, 10 14", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-business-rule-icon.js
  var import_react70 = __toESM(require_react());
  var BPMNBusinessRuleIcon = (props) => import_react70.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react70.default.createElement(ThemedRect, { height: 16, width: 16, x: 2, y: 2, strokeLinejoin: "round", fillColor: "transparent" }),
    import_react70.default.createElement(ThemedRect, { height: 4, width: 16, x: 2, y: 2, strokeLinejoin: "round", fillColor: "currentColor" }),
    import_react70.default.createElement(ThemedPolyline, { points: "2 10, 18 10", strokeLinecap: "round", strokeLinejoin: "round" }),
    import_react70.default.createElement(ThemedPolyline, { points: "2 14, 18 14", strokeLinecap: "round", strokeLinejoin: "round" }),
    import_react70.default.createElement(ThemedPolyline, { points: "6 2, 6 18", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-manual-icon.js
  var import_react71 = __toESM(require_react());
  var BPMNManualIcon = (props) => import_react71.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react71.default.createElement(ThemedPath, { d: "M5 1.5C5 2.5 5 8 5 8M5 1.5C5 0.499993 7 0.500007 7 1.5M5 1.5C5 1.5 5 4.00001 5 3.00001C5 2 3 1.93337 3 3.00001C3 4.06664 3 10 3 10C3 10 3 8.25001 3 7.25001C3 6.25 1 6.25 1 7.25001C1 8.25001 1 12 1 12L3 14V16H9V14L11 12V8.56252C11 8.56252 11 5 11 4C11 3 9 3 9 4C9 5 9 3.00001 9 3.00001M7 1.5C7 2.49999 7 8 7 8M7 1.5C7 1.5 7 4.00001 7 3.00001C7 2.00001 9 2.00001 9 3.00001M9 3.00001V8", strokeLinejoin: "round", fillColor: "transparent" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-user-icon.js
  var import_react72 = __toESM(require_react());
  var BPMNUserIcon = (props) => import_react72.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react72.default.createElement(ThemedCircle, { cx: "10", cy: "4", r: 4, fillColor: "transparent" }),
    import_react72.default.createElement(ThemedPolyline, { points: "4 16, 4 11, 16 11, 16 16", fillColor: "transparent" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/markers/bpmn-sequential-marker-icon.js
  var import_react73 = __toESM(require_react());
  var BPMNSequentialMarkerIcon = (props) => import_react73.default.createElement(
    "svg",
    { ...props, height: 14, width: 14 },
    import_react73.default.createElement(ThemedPolyline, { points: "3 3, 11 3", strokeLinecap: "round", strokeLinejoin: "round", strokeColor: props.stroke, fillColor: "currentColor" }),
    import_react73.default.createElement(ThemedPolyline, { points: "3 7, 11 7", strokeLinecap: "round", strokeLinejoin: "round", strokeColor: props.stroke, fillColor: "currentColor" }),
    import_react73.default.createElement(ThemedPolyline, { points: "3 11, 11 11", strokeLinecap: "round", strokeLinejoin: "round", strokeColor: props.stroke, fillColor: "currentColor" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/markers/bpmn-loop-marker-icon.js
  var import_react74 = __toESM(require_react());
  var BpmnLoopMarkerIcon = (props) => import_react74.default.createElement(
    "svg",
    { ...props, height: 14, width: 14 },
    import_react74.default.createElement(ThemedPath, { d: `M7,3 A 4 4 30 1 1 3.535 5`, strokeColor: props.stroke, fillColor: "transparent", strokeLinejoin: "round", strokeLinecap: "round" }),
    import_react74.default.createElement(ThemedPath, { d: `M9.5,1.5 L7,3 L8,6`, strokeColor: props.stroke, fillColor: "transparent", strokeLinejoin: "round", strokeLinecap: "round" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/markers/bpmn-parallel-marker-icon.js
  var import_react75 = __toESM(require_react());
  var BPMNParallelMarkerIcon = (props) => import_react75.default.createElement(
    "svg",
    { ...props, height: 14, width: 14 },
    import_react75.default.createElement(ThemedPolyline, { points: "3 3, 3 11", strokeLinecap: "round", strokeLinejoin: "round", strokeColor: props.stroke, fillColor: "currentColor" }),
    import_react75.default.createElement(ThemedPolyline, { points: "7 3, 7 11", strokeLinecap: "round", strokeLinejoin: "round", strokeColor: props.stroke, fillColor: "currentColor" }),
    import_react75.default.createElement(ThemedPolyline, { points: "11 3, 11 11", strokeLinecap: "round", strokeLinejoin: "round", strokeColor: props.stroke, fillColor: "currentColor" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-task/bpmn-task-component.js
  var BPMNTaskComponent = ({ element, fillColor, strokeColor, textColor }) => {
    const renderIconForType2 = (taskType, props = {}) => {
      switch (taskType) {
        case "default":
          return null;
        case "user":
          return import_react76.default.createElement(BPMNUserIcon, { ...props });
        case "send":
          return import_react76.default.createElement(BPMNMessageFilledIcon, { ...props });
        case "receive":
          return import_react76.default.createElement(BPMNMessageIcon, { ...props });
        case "manual":
          return import_react76.default.createElement(BPMNManualIcon, { ...props });
        case "business-rule":
          return import_react76.default.createElement(BPMNBusinessRuleIcon, { ...props });
        case "script":
          return import_react76.default.createElement(BPMNScriptIcon, { ...props });
        default:
          return null;
      }
    };
    const renderMarker = (taskType, props = {}) => {
      switch (taskType) {
        case "none":
          return null;
        case "parallel multi instance":
          return import_react76.default.createElement(BPMNParallelMarkerIcon, { ...props });
        case "sequential multi instance":
          return import_react76.default.createElement(BPMNSequentialMarkerIcon, { ...props });
        case "loop":
          return import_react76.default.createElement(BpmnLoopMarkerIcon, { ...props });
        default:
          return null;
      }
    };
    return import_react76.default.createElement(
      "g",
      null,
      import_react76.default.createElement(ThemedRect, { rx: 10, ry: 10, width: "100%", height: "100%", fillColor: fillColor || element.fillColor, strokeColor: strokeColor || element.strokeColor }),
      import_react76.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: textColor || element.textColor, lineHeight: 16, capHeight: 11 }, element.name),
      renderIconForType2(element.taskType, {
        x: 10,
        y: 10
      }),
      renderMarker(element.marker, {
        x: element.bounds.width / 2 - 7,
        y: element.bounds.height - 16
      })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-subprocess/bpmn-subprocess-component.js
  var import_react77 = __toESM(require_react());
  var BPMNSubprocessComponent = ({ element, fillColor, strokeColor, textColor }) => import_react77.default.createElement(
    "g",
    null,
    import_react77.default.createElement(ThemedRect, { rx: 10, ry: 10, width: "100%", height: "100%", fillColor: fillColor || element.fillColor, strokeColor: strokeColor || element.strokeColor }),
    import_react77.default.createElement(ThemedRect, { x: element.bounds.width / 2 - 7, y: element.bounds.height - 14, width: 14, height: 14, fillColor: "transparent", strokeColor: element.strokeColor }),
    import_react77.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2 - 4} ${element.bounds.height - 7}, ${element.bounds.width / 2 + 4} ${element.bounds.height - 7}`, strokeColor: strokeColor || element.strokeColor, strokeLinejoin: "round", strokeLinecap: "round" }),
    import_react77.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} ${element.bounds.height - 11}, ${element.bounds.width / 2} ${element.bounds.height - 3}`, strokeColor: strokeColor || element.strokeColor, strokeLinejoin: "round", strokeLinecap: "round" }),
    import_react77.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: textColor || element.textColor, lineHeight: 16, capHeight: 11 }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-start-event/bpmn-start-event-component.js
  var import_react81 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-timer-icon.js
  var import_react78 = __toESM(require_react());
  var BPMNTimerIcon = (props) => import_react78.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react78.default.createElement(ThemedCircle, { cx: "50%", cy: "50%", r: 10, fillColor: "transparent" }),
    import_react78.default.createElement(ThemedPolyline, { points: "10 4, 10 10, 13 13", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-signal-icon.js
  var import_react79 = __toESM(require_react());
  var BPMNSignalIcon = (props) => import_react79.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react79.default.createElement(ThemedPolyline, { points: "10 3, 3 15, 17 15, 10 3", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "transparent" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-conditional-icon.js
  var import_react80 = __toESM(require_react());
  var BPMNConditionalIcon = (props) => import_react80.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react80.default.createElement(ThemedRect, { height: 16, width: 16, x: 2, y: 2, strokeLinejoin: "round", fillColor: "transparent" }),
    import_react80.default.createElement(ThemedPolyline, { points: "6 7, 14 7", strokeLinecap: "round", strokeLinejoin: "round" }),
    import_react80.default.createElement(ThemedPolyline, { points: "6 13, 14 13", strokeLinecap: "round", strokeLinejoin: "round" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-start-event/bpmn-start-event-component.js
  var renderIconForType = (eventType, props = {}) => {
    switch (eventType) {
      case "default":
        return null;
      case "message":
        return import_react81.default.createElement(BPMNMessageIcon, { ...props });
      case "timer":
        return import_react81.default.createElement(BPMNTimerIcon, { ...props });
      case "conditional":
        return import_react81.default.createElement(BPMNConditionalIcon, { ...props });
      case "signal":
        return import_react81.default.createElement(BPMNSignalIcon, { ...props });
      default:
        return null;
    }
  };
  var BPMNStartEventComponent = ({ element, fillColor, strokeColor, textColor }) => {
    return import_react81.default.createElement(
      "g",
      null,
      import_react81.default.createElement(ThemedCircle, { cx: "50%", cy: "50%", r: Math.min(element.bounds.width, element.bounds.height) / 2, fillColor: fillColor || element.fillColor || "transparent", strokeColor: strokeColor || element.strokeColor }),
      import_react81.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, width: element.bounds.width * 2, fill: textColor || element.textColor, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name),
      renderIconForType(element.eventType, {
        x: element.bounds.width / 2 - 10,
        y: element.bounds.height / 2 - 10
      })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-intermediate-event/bpmn-intermediate-event-component.js
  var import_react87 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-escalation-filled-icon.js
  var import_react82 = __toESM(require_react());
  var BPMNEscalationFilledIcon = (props) => import_react82.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react82.default.createElement(ThemedPolyline, { points: "10 3, 4 15, 10 12, 16 15, 10 3", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "currentColor", fillRule: "evenodd" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-link-icon.js
  var import_react83 = __toESM(require_react());
  var BPMNLinkIcon = (props) => import_react83.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react83.default.createElement(ThemedPolyline, { points: "3 7, 13 7, 13 4, 18 10, 13 16, 13 13, 3 13, 3 7", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "transparent" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-link-filled-icon.js
  var import_react84 = __toESM(require_react());
  var BPMNLinkFilledIcon = (props) => import_react84.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react84.default.createElement(ThemedPolyline, { points: "3 7, 13 7, 13 4, 18 10, 13 16, 13 13, 3 13, 3 7", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "currentColor", fillRule: "evenodd" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-compensation-filled-icon.js
  var import_react85 = __toESM(require_react());
  var BPMNCompensationFilledIcon = (props) => import_react85.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react85.default.createElement(ThemedPolyline, { points: "3 10, 9 6, 9 14, 3 10", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "currentColor", fillRule: "evenodd" }),
    import_react85.default.createElement(ThemedPolyline, { points: "10 10, 16 6, 16 14, 10 10", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "currentColor", fillRule: "evenodd" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-signal-filled-icon.js
  var import_react86 = __toESM(require_react());
  var BPMNSignalFilledIcon = (props) => import_react86.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react86.default.createElement(ThemedPolyline, { points: "10 3, 3 15, 17 15, 10 3", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "currentColor", fillRule: "evenodd" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-intermediate-event/bpmn-intermediate-event-component.js
  var BPMNIntermediateEventComponent = ({ element, fillColor, strokeColor, textColor }) => {
    const renderIconForType2 = (eventType, props = {}) => {
      switch (eventType) {
        case "default":
          return null;
        case "message-catch":
          return import_react87.default.createElement(BPMNMessageIcon, { ...props });
        case "message-throw":
          return import_react87.default.createElement(BPMNMessageFilledIcon, { ...props });
        case "timer-catch":
          return import_react87.default.createElement(BPMNTimerIcon, { ...props });
        case "escalation-throw":
          return import_react87.default.createElement(BPMNEscalationFilledIcon, { ...props });
        case "conditional-catch":
          return import_react87.default.createElement(BPMNConditionalIcon, { ...props });
        case "link-catch":
          return import_react87.default.createElement(BPMNLinkIcon, { ...props });
        case "link-throw":
          return import_react87.default.createElement(BPMNLinkFilledIcon, { ...props });
        case "compensation-throw":
          return import_react87.default.createElement(BPMNCompensationFilledIcon, { ...props });
        case "signal-catch":
          return import_react87.default.createElement(BPMNSignalIcon, { ...props });
        case "signal-throw":
          return import_react87.default.createElement(BPMNSignalFilledIcon, { ...props });
        default:
          return null;
      }
    };
    return import_react87.default.createElement(
      "g",
      null,
      import_react87.default.createElement(ThemedCircle, { cx: "50%", cy: "50%", r: Math.min(element.bounds.width, element.bounds.height) / 2 - 0.5, fillColor: fillColor || element.fillColor || "transparent", strokeColor: strokeColor || element.strokeColor }),
      import_react87.default.createElement(ThemedCircle, { cx: "50%", cy: "50%", r: Math.min(element.bounds.width, element.bounds.height) / 2 - 3.5, fillColor: fillColor || element.fillColor || "transparent", strokeColor: strokeColor || element.strokeColor }),
      import_react87.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, width: element.bounds.width * 2, fill: textColor || element.textColor, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name),
      renderIconForType2(element.eventType, {
        x: element.bounds.width / 2 - 10,
        y: element.bounds.height / 2 - 10
      })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-end-event/bpmn-end-event-component.js
  var import_react90 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-terminate-filled-icon.js
  var import_react88 = __toESM(require_react());
  var BPMNTerminateFilledIcon = (props) => import_react88.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react88.default.createElement(ThemedCircle, { cx: "50%", cy: "50%", r: 10, fillColor: "currentColor" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/common/icons/bpmn-error-filled-icon.js
  var import_react89 = __toESM(require_react());
  var BPMNErrorFilledIcon = (props) => import_react89.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react89.default.createElement(ThemedPolyline, { points: "3 16, 6 4, 13 11, 17 4, 14 16, 7 10, 3 16", strokeLinecap: "round", strokeLinejoin: "round", fillColor: "currentColor" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-end-event/bpmn-end-event-component.js
  var BPMNEndEventComponent = ({ element, fillColor, strokeColor, textColor }) => {
    const renderIconForType2 = (eventType, props = {}) => {
      switch (eventType) {
        case "default":
          return null;
        case "message":
          return import_react90.default.createElement(BPMNMessageFilledIcon, { ...props });
        case "escalation":
          return import_react90.default.createElement(BPMNEscalationFilledIcon, { ...props });
        case "error":
          return import_react90.default.createElement(BPMNErrorFilledIcon, { ...props });
        case "compensation":
          return import_react90.default.createElement(BPMNCompensationFilledIcon, { ...props });
        case "signal":
          return import_react90.default.createElement(BPMNSignalFilledIcon, { ...props });
        case "terminate":
          return import_react90.default.createElement(BPMNTerminateFilledIcon, { ...props });
        default:
          return null;
      }
    };
    return import_react90.default.createElement(
      "g",
      null,
      import_react90.default.createElement(ThemedCircle, { cx: "50%", cy: "50%", r: Math.min(element.bounds.width, element.bounds.height) / 2 - 1.5, strokeWidth: 3, fillColor: fillColor || element.fillColor, strokeColor: strokeColor || element.strokeColor }),
      import_react90.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, fill: textColor || element.textColor, width: element.bounds.width * 2, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name),
      renderIconForType2(element.eventType, {
        x: element.bounds.width / 2 - 10,
        y: element.bounds.height / 2 - 10
      })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-gateway/bpmn-gateway-component.js
  var import_react96 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-gateway/gateways-components/bpmn-event-based-gateway-component.js
  var import_react91 = __toESM(require_react());
  var BPMNEventBasedGatewayComponent = ({ element, fillColor }) => import_react91.default.createElement(
    "g",
    null,
    import_react91.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} 0, ${element.bounds.width} ${element.bounds.height / 2}, ${element.bounds.width / 2} ${element.bounds.height}, 0 ${element.bounds.height / 2}, ${element.bounds.width / 2} 0`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react91.default.createElement(ThemedCircle, { cx: element.bounds.width / 2, cy: element.bounds.height / 2, r: Math.min(element.bounds.width, element.bounds.height) / 2 - 9, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react91.default.createElement(ThemedCircle, { cx: element.bounds.width / 2, cy: element.bounds.height / 2, r: Math.min(element.bounds.width, element.bounds.height) / 2 - 12, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react91.default.createElement(ThemedPath, { d: [
      `M${element.bounds.width / 2}, ${element.bounds.height / 2 - 4}`,
      `L${element.bounds.width / 2 + 3.5}, ${element.bounds.height / 2 - 1}`,
      `L${element.bounds.width / 2 + 2} ${element.bounds.height / 2 + 3.5}`,
      `L${element.bounds.width / 2 - 2} ${element.bounds.height / 2 + 3.5}`,
      `L${element.bounds.width / 2 - 3.5} ${element.bounds.height / 2 - 1}`,
      `L${element.bounds.width / 2} ${element.bounds.height / 2 - 4}`
    ].join(" ") + " z", strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react91.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, width: element.bounds.width, height: element.bounds.height, fill: element.textColor, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-gateway/gateways-components/bpmn-exclusive-gateway-component.js
  var import_react92 = __toESM(require_react());
  var BPMNExclusiveGatewayComponent = ({ element, fillColor }) => import_react92.default.createElement(
    "g",
    null,
    import_react92.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} 0, ${element.bounds.width} ${element.bounds.height / 2}, ${element.bounds.width / 2} ${element.bounds.height}, 0 ${element.bounds.height / 2}, ${element.bounds.width / 2} 0`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react92.default.createElement(ThemedPolyline, { points: `13 13, ${element.bounds.width - 13} ${element.bounds.height - 13}`, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react92.default.createElement(ThemedPolyline, { points: `13 ${element.bounds.height - 13}, ${element.bounds.width - 13} 13`, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react92.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, width: element.bounds.width * 2, height: element.bounds.height, fill: element.textColor, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-gateway/gateways-components/bpmn-inclusive-gateway-component.js
  var import_react93 = __toESM(require_react());
  var BPMNInclusiveGatewayComponent = ({ element, fillColor }) => import_react93.default.createElement(
    "g",
    null,
    import_react93.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} 0, ${element.bounds.width} ${element.bounds.height / 2}, ${element.bounds.width / 2} ${element.bounds.height}, 0 ${element.bounds.height / 2}, ${element.bounds.width / 2} 0`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react93.default.createElement(ThemedCircle, { cx: element.bounds.width / 2, cy: element.bounds.height / 2, r: Math.min(element.bounds.width, element.bounds.height) / 2 - 12, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react93.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, width: element.bounds.width * 2, height: element.bounds.height, fill: element.textColor, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-gateway/gateways-components/bpmn-parallel-gateway-component.js
  var import_react94 = __toESM(require_react());
  var BPMNParallelGatewayComponent = ({ element, fillColor }) => import_react94.default.createElement(
    "g",
    null,
    import_react94.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} 0, ${element.bounds.width} ${element.bounds.height / 2}, ${element.bounds.width / 2} ${element.bounds.height}, 0 ${element.bounds.height / 2}, ${element.bounds.width / 2} 0`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react94.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} 10, ${element.bounds.width / 2} ${element.bounds.height - 10}`, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react94.default.createElement(ThemedPolyline, { points: `10 ${element.bounds.height / 2}, ${element.bounds.width - 10} ${element.bounds.height / 2}`, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react94.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, width: element.bounds.width * 2, height: element.bounds.height, fill: element.textColor, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-gateway/gateways-components/bpmn-complex-gateway-component.js
  var import_react95 = __toESM(require_react());
  var BPMNComplexGatewayComponent = ({ element, fillColor }) => import_react95.default.createElement(
    "g",
    null,
    import_react95.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} 0, ${element.bounds.width} ${element.bounds.height / 2}, ${element.bounds.width / 2} ${element.bounds.height}, 0 ${element.bounds.height / 2}, ${element.bounds.width / 2} 0`, strokeColor: element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react95.default.createElement(ThemedPolyline, { points: `13 13, ${element.bounds.width - 13} ${element.bounds.height - 13}`, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react95.default.createElement(ThemedPolyline, { points: `13 ${element.bounds.height - 13}, ${element.bounds.width - 13} 13`, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react95.default.createElement(ThemedPolyline, { points: `${element.bounds.width / 2} 10, ${element.bounds.width / 2} ${element.bounds.height - 10}`, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react95.default.createElement(ThemedPolyline, { points: `10 ${element.bounds.height / 2}, ${element.bounds.width - 10} ${element.bounds.height / 2}`, strokeColor: element.strokeColor, fillColor: "transparent" }),
    import_react95.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, width: element.bounds.width * 2, height: element.bounds.height, fill: element.textColor, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-gateway/bpmn-gateway-component.js
  var BPMNGatewayComponent = (props) => {
    let GatewayComponent = BPMNExclusiveGatewayComponent;
    switch (props.element.gatewayType) {
      case "complex":
        GatewayComponent = BPMNComplexGatewayComponent;
        break;
      case "event-based":
        GatewayComponent = BPMNEventBasedGatewayComponent;
        break;
      case "exclusive":
        GatewayComponent = BPMNExclusiveGatewayComponent;
        break;
      case "inclusive":
        GatewayComponent = BPMNInclusiveGatewayComponent;
        break;
      case "parallel":
        GatewayComponent = BPMNParallelGatewayComponent;
        break;
    }
    return import_react96.default.createElement(
      "g",
      null,
      import_react96.default.createElement(GatewayComponent, { ...props })
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-transaction/bpmn-transaction-component.js
  var import_react97 = __toESM(require_react());
  var BPMNTransactionComponent = ({ element, fillColor, strokeColor, textColor }) => import_react97.default.createElement(
    "g",
    null,
    import_react97.default.createElement(ThemedRect, { rx: 10, ry: 10, width: element.bounds.width, height: element.bounds.height, fillColor: fillColor || element.fillColor, strokeColor: strokeColor || element.strokeColor }),
    import_react97.default.createElement(ThemedRect, { rx: 7, ry: 7, x: 3, y: 3, width: element.bounds.width - 6, height: element.bounds.height - 6, fillColor: fillColor || element.fillColor, strokeColor: strokeColor || element.strokeColor }),
    import_react97.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: textColor || element.textColor, lineHeight: 16, capHeight: 11 }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-call-activity/bpmn-call-activity-component.js
  var import_react98 = __toESM(require_react());
  var BPMNCallActivityComponent = ({ element, fillColor, strokeColor, textColor }) => import_react98.default.createElement(
    "g",
    null,
    import_react98.default.createElement(ThemedRect, { rx: 10, ry: 10, width: element.bounds.width, height: element.bounds.height, strokeColor: strokeColor || element.strokeColor, strokeWidth: 3, fillColor: fillColor || element.fillColor }),
    import_react98.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: textColor || element.textColor, lineHeight: 16, capHeight: 11 }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-annotation/bpmn-annotation-component.js
  var import_react99 = __toESM(require_react());
  var enhance10 = compose(Je, connect_default((state, props) => ({
    hovered: state.hovered.includes(props.element.id),
    interactive: state.interactive.includes(props.element.id),
    interactable: state.editor.view === "Exporting" || state.editor.view === "Highlight"
  })));
  var BPMNAnnotationC = ({ element, strokeColor, textColor, interactive, interactable: interactable2, hovered, theme }) => import_react99.default.createElement(
    "g",
    null,
    import_react99.default.createElement(ThemedRect, { rx: 10, ry: 10, width: element.bounds.width, height: element.bounds.height, strokeColor: "transparent", fillColor: interactable2 && interactive ? theme.interactive.normal : interactable2 && hovered ? theme.interactive.hovered : "transparent" }),
    import_react99.default.createElement(ThemedPath, { d: `M20,0 L10,0 A 10 10 280 0 0 0 10 L0,${element.bounds.height - 10} A 10 10 180 0 0 10 ${element.bounds.height} L20, ${element.bounds.height}`, strokeColor: strokeColor || element.strokeColor, fillColor: "transparent" }),
    import_react99.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: textColor || element.textColor, lineHeight: 16, capHeight: 11 }, element.name)
  );
  var BPMNAnnotationComponent = enhance10(BPMNAnnotationC);

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-data-object/bpmn-data-object-component.js
  var import_react100 = __toESM(require_react());
  var BPMNDataObjectComponent = ({ element, fillColor, strokeColor, textColor }) => import_react100.default.createElement(
    "g",
    null,
    import_react100.default.createElement(ThemedPolyline, { points: `0 0, 0 ${element.bounds.height}, ${element.bounds.width} ${element.bounds.height}, ${element.bounds.width} 15, ${element.bounds.width - 15} 0, ${element.bounds.width - 15} 15, ${element.bounds.width} 15, ${element.bounds.width - 15} 0, 0 0`, strokeColor: strokeColor || element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react100.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, width: element.bounds.width * 2, fill: textColor || element.textColor, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-group/bpmn-group-component.js
  var import_react101 = __toESM(require_react());
  var enhance11 = compose(Je, connect_default((state, props) => ({
    hovered: state.hovered.includes(props.element.id),
    interactive: state.interactive.includes(props.element.id),
    interactable: state.editor.view === "Exporting" || state.editor.view === "Highlight"
  })));
  var BPMNGroupC = ({ element, strokeColor, textColor, children, interactive, interactable: interactable2, hovered, theme }) => import_react101.default.createElement(
    "g",
    null,
    import_react101.default.createElement(ThemedRect, { rx: 10, ry: 10, width: "100%", height: "100%", strokeColor: strokeColor || element.strokeColor, fillColor: interactable2 && interactive ? theme.interactive.normal : interactable2 && hovered ? theme.interactive.hovered : "transparent", strokeDasharray: "4" }),
    import_react101.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height / 2, width: element.bounds.width, height: element.bounds.height, fontWeight: "bold", fill: textColor || element.textColor, lineHeight: 16, capHeight: 11 }, element.name),
    children
  );
  var BPMNGroupComponent = enhance11(BPMNGroupC);

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-pool/bpmn-pool-component.js
  var import_react102 = __toESM(require_react());
  var BPMNPoolComponent = ({ element, fillColor, strokeColor, textColor, children }) => {
    return import_react102.default.createElement(
      "g",
      null,
      import_react102.default.createElement(ThemedRect, { y: 0, width: BPMNPool.HEADER_WIDTH, height: element.bounds.height, strokeColor: strokeColor || element.strokeColor, fillColor: fillColor || element.fillColor }),
      import_react102.default.createElement(ThemedRect, { y: 0, x: BPMNPool.HEADER_WIDTH, width: element.bounds.width - BPMNPool.HEADER_WIDTH, height: element.bounds.height, strokeColor: strokeColor || element.strokeColor, fillColor: fillColor || element.fillColor }),
      import_react102.default.createElement(Multiline, { y: 20, x: -(element.bounds.height / 2), textAnchor: "middle", alignmentBaseline: "middle", transform: "rotate(270)", fontWeight: "bold", pointerEvents: "none", fill: textColor || element.textColor }, element.name),
      children
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-swimlane/bpmn-swimlane-component.js
  var import_react103 = __toESM(require_react());
  var BPMNSwimlaneComponent = ({ element, fillColor, textColor, children }) => {
    return import_react103.default.createElement(
      "g",
      null,
      import_react103.default.createElement(ThemedRect, { width: element.bounds.width, height: element.bounds.height, fillColor: fillColor || element.fillColor }),
      import_react103.default.createElement(Multiline, { y: 20, x: -(element.bounds.height / 2), transform: "rotate(270)", textAnchor: "middle", alignmentBaseline: "middle", pointerEvents: "none", fill: textColor || element.textColor }, element.name),
      children
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-data-store/bpmn-data-store-component.js
  var import_react104 = __toESM(require_react());
  var BPMNDataStoreComponent = ({ element, fillColor, strokeColor, textColor }) => import_react104.default.createElement(
    "g",
    null,
    import_react104.default.createElement(ThemedPath, { d: `M 0 10 L 0 ${element.bounds.height - 10} A ${element.bounds.width / 2} 10 0 0 0 ${element.bounds.width} ${element.bounds.height - 10} L ${element.bounds.width} 10 A ${element.bounds.width / 2} 10 180 0 0 0 10`, strokeColor: strokeColor || element.strokeColor, fillColor: fillColor || element.fillColor }),
    import_react104.default.createElement(ThemedPath, { d: `M 0 30 A ${element.bounds.width / 2} 10 0 0 0 ${element.bounds.width} 30`, strokeColor: strokeColor || element.strokeColor, fillColor: "transparent" }),
    import_react104.default.createElement(ThemedPath, { d: `M 0 20 A ${element.bounds.width / 2} 10 0 0 0 ${element.bounds.width} 20`, strokeColor: strokeColor || element.strokeColor, fillColor: "transparent" }),
    import_react104.default.createElement(ThemedPath, { d: `M 0 10 A ${element.bounds.width / 2} 10 0 0 0 ${element.bounds.width} 10`, strokeColor: strokeColor || element.strokeColor, fillColor: "transparent" }),
    import_react104.default.createElement(Multiline, { x: element.bounds.width / 2, y: element.bounds.height + 20, width: element.bounds.width * 2, fill: textColor || element.textColor, lineHeight: 16, capHeight: 11, verticalAnchor: "start" }, element.name)
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/components.js
  var Components = {
    [UMLElementType.Package]: UMLClassPackageComponent,
    [UMLElementType.Class]: UMLClassifierComponent,
    [UMLElementType.AbstractClass]: UMLClassifierComponent,
    [UMLElementType.Interface]: UMLClassifierComponent,
    [UMLElementType.Enumeration]: UMLClassifierComponent,
    [UMLElementType.ClassAttribute]: UMLClassifierMemberComponent,
    [UMLElementType.ClassMethod]: UMLClassifierMemberComponent,
    [UMLElementType.ObjectName]: UMLClassifierComponent,
    [UMLElementType.ObjectAttribute]: UMLClassifierMemberComponent,
    [UMLElementType.ObjectMethod]: UMLClassifierMemberComponent,
    [UMLElementType.Activity]: UMLActivityComponent,
    [UMLElementType.ActivityActionNode]: UMLActivityActionNodeComponent,
    [UMLElementType.ActivityFinalNode]: UMLActivityFinalNodeComponent,
    [UMLElementType.ActivityForkNode]: UMLActivityForkNodeComponent,
    [UMLElementType.ActivityForkNodeHorizontal]: UMLActivityForkNodeHorizontalComponent,
    [UMLElementType.ActivityInitialNode]: UMLActivityInitialNodeComponent,
    [UMLElementType.ActivityMergeNode]: UMLActivityMergeNodeComponent,
    [UMLElementType.ActivityObjectNode]: UMLActivityObjectNodeComponent,
    [UMLElementType.UseCase]: UMLUseCaseComponent,
    [UMLElementType.UseCaseActor]: UMLUseCaseActorComponent,
    [UMLElementType.UseCaseSystem]: UMLUseCaseSystemComponent,
    [UMLElementType.Component]: UMLComponentComponent2,
    [UMLElementType.Subsystem]: UMLComponentSubsystem,
    [UMLElementType.ComponentInterface]: UMLInterfaceComponent,
    [UMLElementType.DeploymentNode]: UMLDeploymentNodeComponent,
    [UMLElementType.DeploymentComponent]: UMLComponentComponent2,
    [UMLElementType.DeploymentArtifact]: UMLDeploymentArtifactComponent,
    [UMLElementType.DeploymentInterface]: UMLInterfaceComponent,
    [UMLElementType.PetriNetTransition]: UMLPetriNetTransitionComponent,
    [UMLElementType.PetriNetPlace]: UMLPetriNetPlaceComponent,
    [UMLElementType.ReachabilityGraphMarking]: UMLReachabilityGraphMarkingComponent,
    [UMLElementType.CommunicationLinkMessage]: UMLClassifierMemberComponent,
    [UMLElementType.SyntaxTreeTerminal]: SyntaxTreeTerminalComponent,
    [UMLElementType.SyntaxTreeNonterminal]: SyntaxTreeNonterminalComponent,
    [UMLElementType.FlowchartTerminal]: FlowchartTerminalComponent,
    [UMLElementType.FlowchartDecision]: FlowchartDecisionComponent,
    [UMLElementType.FlowchartProcess]: FlowchartProcessComponent,
    [UMLElementType.FlowchartInputOutput]: FlowchartInputOutputComponent,
    [UMLElementType.FlowchartFunctionCall]: FlowchartFunctionCallComponent,
    [UMLElementType.ColorLegend]: ColorLegendComponent,
    [UMLElementType.BPMNTask]: BPMNTaskComponent,
    [UMLElementType.BPMNSubprocess]: BPMNSubprocessComponent,
    [UMLElementType.BPMNTransaction]: BPMNTransactionComponent,
    [UMLElementType.BPMNCallActivity]: BPMNCallActivityComponent,
    [UMLElementType.BPMNAnnotation]: BPMNAnnotationComponent,
    [UMLElementType.BPMNStartEvent]: BPMNStartEventComponent,
    [UMLElementType.BPMNIntermediateEvent]: BPMNIntermediateEventComponent,
    [UMLElementType.BPMNEndEvent]: BPMNEndEventComponent,
    [UMLElementType.BPMNGateway]: BPMNGatewayComponent,
    [UMLElementType.BPMNDataObject]: BPMNDataObjectComponent,
    [UMLElementType.BPMNDataStore]: BPMNDataStoreComponent,
    [UMLElementType.BPMNPool]: BPMNPoolComponent,
    [UMLElementType.BPMNSwimlane]: BPMNSwimlaneComponent,
    [UMLElementType.BPMNGroup]: BPMNGroupComponent,
    [UMLRelationshipType.ClassAggregation]: UMLAssociationComponent,
    [UMLRelationshipType.ClassBidirectional]: UMLAssociationComponent,
    [UMLRelationshipType.ClassComposition]: UMLAssociationComponent,
    [UMLRelationshipType.ClassDependency]: UMLAssociationComponent,
    [UMLRelationshipType.ClassInheritance]: UMLAssociationComponent,
    [UMLRelationshipType.ClassRealization]: UMLAssociationComponent,
    [UMLRelationshipType.ClassUnidirectional]: UMLAssociationComponent,
    [UMLRelationshipType.ObjectLink]: UMLObjectLinkComponent,
    [UMLRelationshipType.ActivityControlFlow]: UMLActivityControlFlowComponent,
    [UMLRelationshipType.UseCaseAssociation]: UMLUseCaseAssociationComponent,
    [UMLRelationshipType.UseCaseExtend]: UMLUseCaseExtendComponent,
    [UMLRelationshipType.UseCaseGeneralization]: UMLUseCaseGeneralizationComponent,
    [UMLRelationshipType.UseCaseInclude]: UMLUseCaseIncludeComponent,
    [UMLRelationshipType.CommunicationLink]: UMLCommunicationLinkComponent,
    [UMLRelationshipType.ComponentInterfaceProvided]: UMLInterfaceProvidedComponent,
    [UMLRelationshipType.ComponentInterfaceRequired]: UMLInterfaceRequiredComponent,
    [UMLRelationshipType.ComponentDependency]: UMLDependencyComponent,
    [UMLRelationshipType.DeploymentAssociation]: UMLDeploymentAssociationComponent,
    [UMLRelationshipType.DeploymentDependency]: UMLDependencyComponent,
    [UMLRelationshipType.DeploymentInterfaceProvided]: UMLInterfaceProvidedComponent,
    [UMLRelationshipType.DeploymentInterfaceRequired]: UMLInterfaceRequiredComponent,
    [UMLRelationshipType.PetriNetArc]: UMLPetriNetArcComponent,
    [UMLRelationshipType.ReachabilityGraphArc]: UMLReachabilityGraphArcComponent,
    [UMLRelationshipType.SyntaxTreeLink]: SyntaxTreeLinkComponent,
    [UMLRelationshipType.FlowchartFlowline]: FlowchartFlowlineComponent,
    [UMLRelationshipType.BPMNFlow]: BPMNFlowComponent
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/canvas-element.js
  var STROKE = 5;
  var enhance12 = compose(Je, connect_default((state, props) => ({
    hovered: state.hovered[0] === props.id,
    selected: state.selected.includes(props.id),
    remoteSelectors: state.remoteSelection[props.id] || [],
    moving: state.moving.includes(props.id),
    interactive: state.interactive.includes(props.id),
    interactable: state.editor.view === "Exporting" || state.editor.view === "Highlight",
    element: state.elements[props.id],
    zoomFactor: state.editor.zoomFactor,
    selectionBoxActive: state.editor.selectionBoxActive
  }), {}));
  var CanvasElementComponent = class extends import_react105.Component {
    render() {
      const { hovered, selected, remoteSelectors, moving, interactive, interactable: interactable2, element, child: ChildComponent, children, theme, zoomFactor: _zoomFactor, selectionBoxActive: _selectionBoxActive, ...props } = this.props;
      let elements = null;
      if (UMLContainer.isUMLContainer(element) && ChildComponent) {
        elements = element.ownedElements.map((id2) => import_react105.default.createElement(ChildComponent, { key: id2, id: id2 }));
      }
      const ElementComponent = Components[element.type];
      const highlight = interactable2 && interactive ? theme.interactive.normal : interactable2 && hovered ? theme.interactive.hovered : element.highlight ? element.highlight : element.fillColor ? element.fillColor : theme.color.background;
      return import_react105.default.createElement(
        "svg",
        { ...props, ...element.bounds, pointerEvents: moving ? "none" : void 0, fillOpacity: moving ? 0.7 : void 0, fill: highlight },
        import_react105.default.createElement(ElementComponent, { fillColor: highlight, element: UMLElementRepository.get(element) }, elements),
        children,
        !interactable2 && (hovered || selected) && import_react105.default.createElement("rect", { x: -STROKE / 2, y: -STROKE / 2, width: element.bounds.width + STROKE, height: element.bounds.height + STROKE, fill: "none", stroke: "#0064ff", strokeOpacity: "0.2", strokeWidth: STROKE, pointerEvents: "none" }),
        remoteSelectors.length > 0 && import_react105.default.createElement("g", null, remoteSelectors.map((selectedBy, index) => {
          const indicatorPosition = "translate(" + (element.bounds.width + STROKE) + " " + index * 32 + ")";
          return import_react105.default.createElement(
            "g",
            { key: selectedBy.name + "_" + selectedBy.color, id: selectedBy.name + "_" + selectedBy.color },
            import_react105.default.createElement("rect", { x: -STROKE / 2, y: -STROKE / 2, width: element.bounds.width + STROKE, height: element.bounds.height + STROKE, fill: "none", stroke: selectedBy.color, strokeOpacity: "0.2", strokeWidth: STROKE, pointerEvents: "none" }),
            import_react105.default.createElement(
              "g",
              { transform: indicatorPosition, pointerEvents: "none" },
              import_react105.default.createElement("rect", { fillOpacity: "0.2", rx: "10", x: "-40", y: "-20", width: "85px", height: "30px", fill: selectedBy.color }),
              import_react105.default.createElement(
                "text",
                null,
                import_react105.default.createElement("tspan", { textAnchor: "middle" }, selectedBy.name.length < 8 ? selectedBy.name : selectedBy.name.substring(0, 6) + "..")
              )
            )
          );
        }))
      );
    }
  };
  var CanvasElement = enhance12(CanvasElementComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/canvas-relationship.js
  var import_react106 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/utils/touch-event.js
  function convertTouchEndIntoPointerUp(event) {
    if (event.changedTouches.length > 0) {
      const target = document.elementFromPoint(event.changedTouches[event.changedTouches.length - 1].clientX, event.changedTouches[event.changedTouches.length - 1].clientY);
      if (!target) {
        return;
      }
      const pointerEvent = new PointerEvent("pointerup", {
        cancelable: true,
        bubbles: true,
        screenX: event.changedTouches[event.changedTouches.length - 1].pageX,
        screenY: event.changedTouches[event.changedTouches.length - 1].pageY,
        clientX: event.changedTouches[event.changedTouches.length - 1].clientX,
        clientY: event.changedTouches[event.changedTouches.length - 1].clientY
      });
      target.dispatchEvent(pointerEvent);
      return;
    }
  }
  function getClientEventCoordinates(event) {
    const eventClientX = event instanceof PointerEvent ? event.clientX : event.touches[0].clientX;
    const eventClientY = event instanceof PointerEvent ? event.clientY : event.touches[0].clientY;
    return { clientX: eventClientX, clientY: eventClientY };
  }

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/canvas-relationship.js
  var initialState2 = {
    offset: new Point(),
    handlerIndex: 0,
    path: [
      {
        x: 0,
        y: 0
      }
    ]
  };
  var enhance13 = compose(Je, connect_default((state, props) => ({
    hovered: state.hovered[0] === props.id,
    selected: state.selected.includes(props.id),
    remoteSelectors: state.remoteSelection[props.id] || [],
    interactive: state.interactive.includes(props.id),
    interactable: state.editor.view === "Exporting" || state.editor.view === "Highlight",
    reconnecting: !!state.reconnecting[props.id],
    disabled: !!Object.keys(state.reconnecting).length || !!Object.keys(state.connecting).length,
    relationship: state.elements[props.id],
    mode: state.editor.mode,
    readonly: state.editor.readonly || false,
    selectionBoxActive: state.editor.selectionBoxActive
  }), {
    startwaypointslayout: UMLRelationshipRepository.startWaypointsLayout,
    endwaypointslayout: UMLRelationshipRepository.endWaypointsLayout
  }));
  var CanvasRelationshipComponent = class extends import_react106.Component {
    constructor() {
      super(...arguments);
      this.state = initialState2;
      this.onPointerDown = (event, handlerIndex, point) => {
        this.setState({ handlerIndex, offset: new Point(event.clientX - point.mpX, event.clientY - point.mpY) });
        document.addEventListener("pointermove", this.onPointerMove);
        document.addEventListener("pointerup", this.onPointerUp, { once: true });
      };
      this.onPointerMove = (event) => {
        const handlerIndex = this.state.handlerIndex;
        const waypointDirection = handlerIndex % 2 ? "horizontal" : "vertical";
        const clientEventCoordinates = getClientEventCoordinates(event);
        const x2 = clientEventCoordinates.clientX - this.state.offset.x;
        const y2 = clientEventCoordinates.clientY - this.state.offset.y;
        this.updateRelationshipPoints(waypointDirection, handlerIndex, x2, y2);
      };
      this.onPointerUp = (event) => {
        this.props.endwaypointslayout(this.props.id);
        const element = event.currentTarget;
        element.removeEventListener("pointermove", this.onPointerMove);
      };
      this.updateRelationshipPoints = (waypointDirection, handlerIndex, x2, y2) => {
        const startPoint = handlerIndex + 1;
        const endPoint = Number(startPoint) + 1;
        const sourceDirection = this.props.relationship.source.direction;
        switch (waypointDirection) {
          case "horizontal":
            sourceDirection === Direction.Up || sourceDirection === Direction.Down ? this.updateXCoordinate(startPoint, endPoint, x2, y2) : this.updateYCoordinate(startPoint, endPoint, x2, y2);
            break;
          case "vertical":
            sourceDirection === Direction.Up || sourceDirection === Direction.Down ? this.updateYCoordinate(startPoint, endPoint, x2, y2) : this.updateXCoordinate(startPoint, endPoint, x2, y2);
            break;
          default:
            break;
        }
        const points = [new Point()];
        this.props.relationship.path.forEach((path) => {
          points.push(new Point(path.x, path.y));
        });
        const updatedBounds = computeBoundingBox(points);
        updatedBounds.x = this.props.relationship.bounds.x;
        updatedBounds.y = this.props.relationship.bounds.y;
        updatedBounds.width = Math.ceil(updatedBounds.width / 20) * 20;
        updatedBounds.height = Math.ceil(updatedBounds.height / 20) * 20;
        this.setState({ path: this.props.relationship.path });
        this.props.startwaypointslayout(this.props.id, this.props.relationship.path, updatedBounds);
      };
      this.updateXCoordinate = (startPoint, endPoint, x2, y2) => {
        this.props.relationship.path[startPoint].x = x2;
        this.props.relationship.path[endPoint].x = x2;
      };
      this.updateYCoordinate = (startPoint, endPoint, x2, y2) => {
        this.props.relationship.path[startPoint].y = y2;
        this.props.relationship.path[endPoint].y = y2;
      };
    }
    render() {
      const { hovered, selected, remoteSelectors, interactive, interactable: interactable2, reconnecting, disabled, relationship, children, theme, mode, readonly, startwaypointslayout, endwaypointslayout, selectionBoxActive, ...props } = this.props;
      const STROKE2 = mode === ApollonMode.Assessment ? 35 : 15;
      const ChildComponent = Components[relationship.type];
      const points = relationship.path.map((point) => `${point.x} ${point.y}`).join(",");
      const midPoints = [];
      relationship.path.map((point, index) => {
        const mpX = (relationship.path[index].x + relationship.path[index + 1]?.x) / 2;
        const mpY = (relationship.path[index].y + relationship.path[index + 1]?.y) / 2;
        if (!isNaN(mpX) && !isNaN(mpY))
          midPoints.push({ mpX, mpY });
      });
      midPoints.pop();
      midPoints.shift();
      const highlight = interactable2 && interactive ? theme.interactive.normal : interactable2 && hovered ? theme.interactive.hovered : hovered || selected ? "rgba(0, 100, 255, 0.2)" : relationship.highlight ? relationship.highlight : "rgba(0, 100, 255, 0)";
      return import_react106.default.createElement(
        "svg",
        { ...props, ...relationship.bounds, visibility: reconnecting ? "hidden" : void 0, pointerEvents: disabled ? "none" : "stroke" },
        import_react106.default.createElement("polyline", { points, stroke: highlight, fill: "none", strokeWidth: STROKE2 }),
        remoteSelectors.length > 0 && remoteSelectors.map((selector) => import_react106.default.createElement("polyline", { key: selector.name, points, stroke: selector.color, strokeOpacity: "0.2", strokeWidth: STROKE2, fill: "none" })),
        import_react106.default.createElement(ChildComponent, { element: UMLRelationshipRepository.get(relationship) }),
        children,
        midPoints.map((point, index) => {
          return import_react106.default.createElement("circle", { visibility: selectionBoxActive || interactive || interactable2 || readonly ? "hidden" : void 0, pointerEvents: selectionBoxActive || interactive || interactable2 || readonly ? "none" : "all", style: { cursor: "grab" }, key: props.id + "_" + point.mpX + "_" + point.mpY, cx: point.mpX, cy: point.mpY, r: "15", onPointerDown: (e2) => {
            this.onPointerDown(e2, index, point);
          }, fill: highlight });
        })
      );
    }
  };
  var CanvasRelationship = enhance13(CanvasRelationshipComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/connectable/connectable.js
  var import_react107 = __toESM(require_react());
  var import_react_dom4 = __toESM(require_react_dom());
  var import_is_mobile2 = __toESM(require_is_mobile());
  var enhance14 = connect_default((state, props) => {
    return {
      hovered: state.hovered[0] === props.id,
      selected: state.selected.includes(props.id),
      connecting: !!state.connecting.length,
      reconnecting: !!Object.keys(state.reconnecting).length,
      element: state.elements[props.id],
      type: state.elements[props.id].type
    };
  }, {
    start: UMLElementRepository.startConnecting,
    connect: UMLElementRepository.connect,
    reconnect: UMLRelationshipRepository.reconnect
  });
  var Handle = styled((props) => {
    const { alternativePortVisualization, ...otherProps } = props;
    const alternativePortHeight = 10;
    const alternativePortWidth = 5;
    const alternativePortCircleSize = 30;
    const defaultPortSize = 20;
    if (alternativePortVisualization) {
      return import_react107.default.createElement(
        "svg",
        { ...otherProps },
        import_react107.default.createElement("path", { d: `M ${alternativePortWidth / 2} 0 v -${alternativePortHeight} h -${alternativePortWidth} v ${alternativePortHeight} Z` }),
        import_react107.default.createElement("path", { d: `M -${alternativePortCircleSize / 2} -${alternativePortHeight + alternativePortCircleSize / 2} a ${alternativePortCircleSize / 2} ${alternativePortCircleSize / 2} 0 0 1 ${alternativePortCircleSize} 0 a ${alternativePortCircleSize / 2} ${alternativePortCircleSize / 2} 0 0 1 -${alternativePortCircleSize} 0` })
      );
    } else {
      return import_react107.default.createElement(
        "svg",
        { ...otherProps },
        import_react107.default.createElement("path", { d: `M -${defaultPortSize} 0 A ${defaultPortSize / 2} ${defaultPortSize / 2} 0 0 1 ${defaultPortSize} 0` })
      );
    }
  }).attrs(({ direction, ports }) => ({
    fill: "#0064ff",
    fillOpacity: 0.2,
    x: `${ports[direction].x}px`,
    y: `${ports[direction].y}px`,
    rotate: direction === Direction.Up || direction === Direction.Topright || direction === Direction.Topleft ? 0 : direction === Direction.Right || direction === Direction.Upright || direction === Direction.Downright ? 90 : direction === Direction.Down || direction === Direction.Bottomright || direction === Direction.Bottomleft ? 180 : -90
  }))`
  cursor: crosshair;
  pointer-events: all;

  path {
    transform: rotate(${(props) => props.rotate}deg);
  }
`;
  var connectable = (WrappedComponent) => {
    class Connectable2 extends import_react107.Component {
      constructor() {
        super(...arguments);
        this.elementOnPointerUp = (event) => {
          const node = (0, import_react_dom4.findDOMNode)(this);
          if (!(event instanceof PointerEvent)) {
            convertTouchEndIntoPointerUp(event);
            return;
          }
          let direction;
          if (event.target instanceof SVGElement && event.target.parentElement != null && event.target.parentElement.hasAttribute("direction")) {
            direction = event.target.parentElement.getAttribute("direction");
          }
          if (direction == null) {
            const nodeRect = node.getBoundingClientRect();
            const relEventPosition = {
              x: (event.clientX - nodeRect.left) / nodeRect.width,
              y: (event.clientY - nodeRect.top) / nodeRect.height
            };
            const relativePortLocation = {
              [Direction.Up]: new Point(0.5, 0),
              [Direction.Right]: new Point(1, 0.5),
              [Direction.Down]: new Point(0.5, 1),
              [Direction.Left]: new Point(0, 0.5),
              [Direction.Upright]: new Point(1, 0.25),
              [Direction.Downright]: new Point(1, 0.75),
              [Direction.Upleft]: new Point(0, 0.25),
              [Direction.Downleft]: new Point(0, 0.75),
              [Direction.Topright]: new Point(0.75, 0),
              [Direction.Bottomright]: new Point(0.75, 1),
              [Direction.Topleft]: new Point(0.25, 0),
              [Direction.Bottomleft]: new Point(0.25, 1)
            };
            const ports = getPortsForElement(this.props.element);
            const distances = Object.entries(ports).map(([key, value]) => ({
              key,
              distance: Math.sqrt(Math.pow(relativePortLocation[key].x - relEventPosition.x, 2) + Math.pow(relativePortLocation[key].y - relEventPosition.y, 2))
            }));
            const minDistance = Math.min(...distances.map((value) => value.distance));
            direction = distances.filter((value) => minDistance === value.distance)[0].key;
          }
          if (this.props.connecting) {
            this.props.connect({ element: this.props.id, direction });
          }
          if (this.props.reconnecting && !event.defaultPrevented) {
            this.props.reconnect({ element: this.props.id, direction });
            event.preventDefault();
          }
        };
        this.onPointerDown = (event) => {
          const direction = event.currentTarget.getAttribute("direction");
          const id2 = event.currentTarget.parentElement.getAttribute("id");
          this.props.start(direction, id2);
        };
        this.onPointerUp = (event) => {
          const direction = event.currentTarget.getAttribute("direction");
          if (this.props.connecting) {
            this.props.connect({ element: this.props.id, direction });
          }
          if (this.props.reconnecting) {
            this.props.reconnect({ element: this.props.id, direction });
          }
        };
      }
      componentDidMount() {
        const node = (0, import_react_dom4.findDOMNode)(this);
        node.addEventListener("pointerup", this.elementOnPointerUp.bind(this));
        if ((0, import_is_mobile2.default)({ tablet: true })) {
          node.addEventListener("touchend", this.elementOnPointerUp.bind(this));
        }
      }
      componentWillUnmount() {
        const node = (0, import_react_dom4.findDOMNode)(this);
        node.removeEventListener("pointerup", this.elementOnPointerUp);
        if ((0, import_is_mobile2.default)({ tablet: true })) {
          node.removeEventListener("touchend", this.elementOnPointerUp);
        }
      }
      render() {
        const { hovered, selected, connecting, reconnecting, start, connect: _2, reconnect: reconnect2, type, element, ...props } = this.props;
        const features = { ...UMLElements, ...UMLRelationships }[type].features;
        const ports = getPortsForElement(element);
        return import_react107.default.createElement(
          WrappedComponent,
          { ...props },
          props.children,
          (hovered || selected || connecting || reconnecting) && import_react107.default.createElement(
            import_react107.default.Fragment,
            null,
            this.props.type !== "ActivityForkNode" && import_react107.default.createElement(Handle, { ports, direction: Direction.Up, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
            this.props.type !== "ActivityForkNodeHorizontal" && import_react107.default.createElement(Handle, { ports, direction: Direction.Right, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
            this.props.type !== "ActivityForkNode" && import_react107.default.createElement(Handle, { ports, direction: Direction.Down, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
            this.props.type !== "ActivityForkNodeHorizontal" && import_react107.default.createElement(Handle, { ports, direction: Direction.Left, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
            this.props.type === "ActivityForkNode" && this.props.element.bounds.height > 120 && import_react107.default.createElement(
              import_react107.default.Fragment,
              null,
              import_react107.default.createElement(Handle, { ports, direction: Direction.Upright, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
              import_react107.default.createElement(Handle, { ports, direction: Direction.Upleft, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
              import_react107.default.createElement(Handle, { ports, direction: Direction.Downright, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
              import_react107.default.createElement(Handle, { ports, direction: Direction.Downleft, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization })
            ),
            this.props.type === "ActivityForkNodeHorizontal" && this.props.element.bounds.width > 120 && import_react107.default.createElement(
              import_react107.default.Fragment,
              null,
              import_react107.default.createElement(Handle, { ports, direction: Direction.Topright, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
              import_react107.default.createElement(Handle, { ports, direction: Direction.Topleft, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
              import_react107.default.createElement(Handle, { ports, direction: Direction.Bottomright, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization }),
              import_react107.default.createElement(Handle, { ports, direction: Direction.Bottomleft, onPointerDown: this.onPointerDown, onPointerUp: this.onPointerUp, alternativePortVisualization: features.alternativePortVisualization })
            )
          )
        );
      }
    }
    return enhance14(Connectable2);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/droppable/droppable.js
  var import_react108 = __toESM(require_react());
  var droppable = (WrappedComponent) => {
    return class Droppable extends import_react108.Component {
      render() {
        return import_react108.default.createElement(
          Droppable,
          { owner: this.props.id },
          import_react108.default.createElement(WrappedComponent, { ...this.props })
        );
      }
    };
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/hoverable/hoverable.js
  var import_react109 = __toESM(require_react());
  var import_react_dom5 = __toESM(require_react_dom());
  var enhance15 = connect_default((state, props) => {
    return {
      // cannot emmit hover events when the selection box is active
      // or (any object is moving and the object is not a UMLContainer)
      cannotBeHovered: state.editor.selectionBoxActive || state.moving.length > 0 && !UMLContainer.isUMLContainer(state.elements[props.id])
    };
  }, {
    hover: UMLElementRepository.hover,
    leave: UMLElementRepository.leave
  });
  var hoverable = (WrappedComponent) => {
    class Hoverable2 extends import_react109.Component {
      constructor() {
        super(...arguments);
        this.enter = (event) => {
          if (!this.props.cannotBeHovered)
            this.props.hover(this.props.id);
          event.stopPropagation();
        };
        this.leave = (event) => {
          if (!this.props.cannotBeHovered)
            this.props.leave(this.props.id);
          event.stopPropagation();
        };
      }
      componentDidMount() {
        const node = (0, import_react_dom5.findDOMNode)(this);
        node.addEventListener("pointerenter", this.enter);
        node.addEventListener("pointerleave", this.leave);
      }
      componentWillUnmount() {
        const node = (0, import_react_dom5.findDOMNode)(this);
        node.removeEventListener("pointerenter", this.enter);
        node.removeEventListener("pointerleave", this.leave);
      }
      render() {
        const { hover, leave, cannotBeHovered, ...props } = this.props;
        return import_react109.default.createElement(WrappedComponent, { ...props });
      }
    }
    return enhance15(Hoverable2);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/interactable/interactable.js
  var import_react110 = __toESM(require_react());
  var import_react_dom6 = __toESM(require_react_dom());
  var enhance16 = connect_default((state, props) => ({
    hovered: state.hovered[0] === props.id,
    selected: state.interactive.includes(props.id)
  }), {
    select: UMLElementRepository.makeInteractive,
    deselect: UMLElementRepository.unmakeInteractive
  });
  var interactable = (WrappedComponent) => {
    class Interactable2 extends import_react110.Component {
      constructor() {
        super(...arguments);
        this.select = (event) => {
          if (event.which && event.which !== 1 || !this.props.hovered) {
            return;
          }
          if (this.props.selected) {
            this.props.deselect(this.props.id);
            return;
          }
          this.props.select(this.props.id);
        };
      }
      componentDidMount() {
        const node = (0, import_react_dom6.findDOMNode)(this);
        node.addEventListener("pointerdown", this.select);
      }
      componentWillUnmount() {
        const node = (0, import_react_dom6.findDOMNode)(this);
        node.removeEventListener("pointerdown", this.select);
      }
      render() {
        const { hovered, selected, select: select2, deselect, ...props } = this.props;
        return import_react110.default.createElement(WrappedComponent, { ...props });
      }
    }
    return enhance16(Interactable2);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/movable/movable.js
  var import_react111 = __toESM(require_react());
  var import_react_dom7 = __toESM(require_react_dom());
  var import_is_mobile3 = __toESM(require_is_mobile());

  // node_modules/@ls1intum/apollon/lib/es6/utils/debounce.js
  function debounce(func3, wait = 0) {
    let timeout;
    return function(...args) {
      const context2 = this;
      clearTimeout(timeout);
      timeout = window.setTimeout(() => func3.apply(context2, args), wait > 0 ? wait : 300);
    };
  }

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/movable/movable.js
  var initialState3 = {
    offset: new Point()
  };
  var enhance17 = connect_default((state, props) => ({
    movable: state.selected.includes(props.id) && !state.resizing.includes(props.id) && !state.connecting.length,
    moving: state.moving.includes(props.id),
    zoomFactor: state.editor.zoomFactor,
    selectionBoxActive: state.editor.selectionBoxActive
  }), {
    start: UMLElementRepository.startMoving,
    move: UMLElementRepository.move,
    end: UMLElementRepository.endMoving
  });
  var movable = (WrappedComponent) => {
    class Movable2 extends import_react111.Component {
      constructor() {
        super(...arguments);
        this.state = initialState3;
        this.moveWindow = { x: 0, y: 0 };
        this.move = (x2, y2) => {
          const { zoomFactor = 1 } = this.props;
          x2 = Math.round(x2 / 10) * 10;
          y2 = Math.round(y2 / 10) * 10;
          if (x2 === 0 && y2 === 0)
            return;
          this.setState((state) => ({ offset: state.offset.add(x2 * zoomFactor, y2 * zoomFactor) }));
          this.moveWindow = { x: this.moveWindow.x + x2, y: this.moveWindow.y + y2 };
          this.debouncedMove(this.moveWindow);
        };
        this.debouncedMove = debounce(() => {
          this.props.move(this.moveWindow);
          this.moveWindow = { x: 0, y: 0 };
        }, 2);
        this.onPointerDown = (event) => {
          const { zoomFactor = 1 } = this.props;
          if (event.which && event.which !== 1) {
            return;
          }
          const clientEventCoordinates = getClientEventCoordinates(event);
          this.setState({ offset: new Point(clientEventCoordinates.clientX, clientEventCoordinates.clientY) });
          if ((0, import_is_mobile3.default)({ tablet: true })) {
            document.addEventListener("touchmove", this.onPointerMove);
            document.addEventListener("touchend", this.onPointerUp, { once: true });
          } else {
            document.addEventListener("pointermove", this.onPointerMove);
            document.addEventListener("pointerup", this.onPointerUp, { once: true });
          }
          setTimeout(() => !this.props.movable && this.onPointerUp(), 0);
        };
        this.onPointerMove = (event) => {
          const { zoomFactor = 1 } = this.props;
          const clientEventCoordinates = getClientEventCoordinates(event);
          const x2 = (clientEventCoordinates.clientX - this.state.offset.x) / zoomFactor;
          const y2 = (clientEventCoordinates.clientY - this.state.offset.y) / zoomFactor;
          if (!this.props.moving) {
            if (Math.abs(x2) > 5 || Math.abs(y2) > 5) {
              this.props.start();
            }
          } else {
            this.move(x2, y2);
          }
        };
        this.onPointerUp = () => {
          if ((0, import_is_mobile3.default)({ tablet: true })) {
            document.removeEventListener("touchmove", this.onPointerMove);
          } else {
            document.removeEventListener("pointermove", this.onPointerMove);
          }
          if (!this.props.moving) {
            return;
          }
          this.setState(initialState3);
          this.props.end();
        };
      }
      componentDidMount() {
        const node = (0, import_react_dom7.findDOMNode)(this);
        node.style.cursor = "move";
        const child = node.firstChild;
        if ((0, import_is_mobile3.default)({ tablet: true })) {
          child.addEventListener("touchstart", this.onPointerDown);
        } else {
          child.addEventListener("pointerdown", this.onPointerDown);
        }
      }
      componentDidUpdate(prevProps, prevState, snapshot) {
        const node = (0, import_react_dom7.findDOMNode)(this);
        if (this.props.selectionBoxActive) {
          node.style.cursor = "default";
        } else {
          node.style.cursor = "move";
        }
      }
      componentWillUnmount() {
        const node = (0, import_react_dom7.findDOMNode)(this);
        const child = node.firstChild;
        if ((0, import_is_mobile3.default)({ tablet: true })) {
          child.removeEventListener("touchstart", this.onPointerDown);
          document.removeEventListener("touchmove", this.onPointerMove);
          document.removeEventListener("touchend", this.onPointerUp);
        } else {
          child.removeEventListener("pointerdown", this.onPointerDown);
          document.removeEventListener("pointermove", this.onPointerMove);
          document.removeEventListener("pointerup", this.onPointerUp);
        }
      }
      render() {
        const { movable: _movable, zoomFactor: _zoomFactor, start, move, end, ...props } = this.props;
        return import_react111.default.createElement(WrappedComponent, { ...props });
      }
    }
    return enhance17(Movable2);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/reconnectable/reconnectable.js
  var import_react112 = __toESM(require_react());
  var import_is_mobile4 = __toESM(require_is_mobile());
  var initialState4 = {
    offset: new Point(),
    endpoint: null
  };
  var enhance18 = connect_default((state, props) => ({
    path: state.elements[props.id].path,
    reconnecting: !!state.reconnecting[props.id],
    disabled: !!Object.keys(state.reconnecting).length || !!Object.keys(state.connecting).length,
    selectionBoxActive: state.editor.selectionBoxActive
  }), {
    start: UMLRelationshipRepository.startReconnecting,
    reconnect: UMLRelationshipRepository.reconnect
  });
  var Handle2 = styled.line.attrs({
    strokeWidth: 15,
    strokeOpacity: 0,
    stroke: "black"
  })`
  cursor: move;
`;
  var reconnectable = (WrappedComponent) => {
    class Reconnectable2 extends import_react112.Component {
      constructor() {
        super(...arguments);
        this.state = initialState4;
        this.onPointerDown = (event) => {
          if (event.nativeEvent.which && event.nativeEvent.which !== 1) {
            return;
          }
          const endpoint = event.currentTarget.dataset.endpoint;
          this.setState({ endpoint, offset: new Point(event.clientX, event.clientY) });
          if ((0, import_is_mobile4.default)({ tablet: true })) {
            document.addEventListener("touchmove", this.onPointerMove);
            document.addEventListener("touchend", this.onPointerUp, { once: true });
            document.addEventListener("pointerup", this.onPointerUp, { once: true });
          } else {
            document.addEventListener("pointermove", this.onPointerMove);
            document.addEventListener("pointerup", this.onPointerUp, { once: true });
          }
        };
        this.onPointerMove = (event) => {
          const clientEventCoordinates = getClientEventCoordinates(event);
          const x2 = clientEventCoordinates.clientX - this.state.offset.x;
          const y2 = clientEventCoordinates.clientY - this.state.offset.y;
          const { endpoint } = this.state;
          if (!this.props.reconnecting && endpoint) {
            if (Math.abs(x2) > 5 || Math.abs(y2) > 5) {
              this.props.start(endpoint);
            }
          }
        };
        this.onPointerUp = (event) => {
          if (!(event instanceof PointerEvent)) {
            convertTouchEndIntoPointerUp(event);
            return;
          }
          if ((0, import_is_mobile4.default)({ tablet: true })) {
            document.removeEventListener("touchmove", this.onPointerMove);
          } else {
            document.removeEventListener("pointermove", this.onPointerMove);
          }
          this.cancel();
        };
        this.cancel = () => {
          if (!this.props.reconnecting) {
            return;
          }
          this.setState(initialState4);
        };
        this.composePath = (path) => {
          const line = new Path(path);
          const distance = Math.min(line.length / 2, 40);
          return [path[0], line.position(distance)];
        };
      }
      componentWillUnmount() {
        if ((0, import_is_mobile4.default)({ tablet: true })) {
          document.removeEventListener("touchmove", this.onPointerMove);
          document.removeEventListener("touchend", this.onPointerUp);
          document.removeEventListener("pointerup", this.onPointerUp);
        } else {
          document.removeEventListener("pointermove", this.onPointerMove);
          document.removeEventListener("pointerup", this.onPointerUp);
        }
        this.cancel();
      }
      render() {
        const { path, reconnecting, start, reconnect: reconnect2, disabled, selectionBoxActive, ...props } = this.props;
        const sourceHandle = this.composePath(path);
        const targetHandle = this.composePath([...path].reverse());
        return import_react112.default.createElement(
          WrappedComponent,
          { ...props },
          props.children,
          import_react112.default.createElement(Handle2, { x1: sourceHandle[0].x, y1: sourceHandle[0].y, x2: sourceHandle[1].x, y2: sourceHandle[1].y, onPointerDown: this.onPointerDown, "data-endpoint": "target", pointerEvents: selectionBoxActive || disabled ? "none" : "all" }),
          import_react112.default.createElement(Handle2, { x1: targetHandle[0].x, y1: targetHandle[0].y, x2: targetHandle[1].x, y2: targetHandle[1].y, onPointerDown: this.onPointerDown, "data-endpoint": "source", pointerEvents: selectionBoxActive || disabled ? "none" : "all" })
        );
      }
    }
    return enhance18(Reconnectable2);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/resizable/resizable.js
  var import_react113 = __toESM(require_react());
  var initialState5 = {
    resizing: false,
    offset: new Point()
  };
  var enhance19 = connect_default((state) => ({
    zoomFactor: state.editor.zoomFactor,
    selectionBoxActive: state.editor.selectionBoxActive
  }), {
    start: UMLElementRepository.startResizing,
    resize: UMLElementRepository.resize,
    end: UMLElementRepository.endResizing
  });
  var Handle3 = {
    width: 15,
    height: 15,
    transform: "translate(-10, -10)",
    fill: "none"
  };
  var HandleBottomRight = styled.rect.attrs({
    x: "100%",
    y: "100%",
    ...Handle3
  })`
  cursor: nwse-resize;
`;
  var HandleTopLeft = styled.rect.attrs({
    x: "0%",
    y: "0%",
    ...Handle3
  })`
  cursor: nwse-resize;
`;
  var HandleTopRight = styled.rect.attrs({
    x: "100%",
    y: "0%",
    ...Handle3
  })`
  cursor: nesw-resize;
`;
  var HandleBottomLeft = styled.rect.attrs({
    x: "0%",
    y: "100%",
    ...Handle3
  })`
  cursor: nesw-resize;
`;
  var resizable = (options) => (WrappedComponent) => {
    class Resizable2 extends import_react113.Component {
      constructor() {
        super(...arguments);
        this.state = initialState5;
        this.resize = (width, height, resizeFrom) => {
          width = Math.round(width / 10) * 10;
          height = Math.round(height / 10) * 10;
          if (options && options.preventX)
            width = 0;
          if (options && options.preventY)
            height = 0;
          if (width === 0 && height === 0)
            return;
          this.setState((state) => ({ offset: state.offset.add(width, height) }));
          this.props.resize({ width, height }, resizeFrom, this.props.id);
        };
        this.onPointerDown = (event, resizeFrom) => {
          if (event.nativeEvent.which && event.nativeEvent.which !== 1) {
            return;
          }
          let offset = new Point();
          switch (resizeFrom) {
            case "bottomRight":
              offset = new Point(event.clientX, event.clientY);
              break;
            case "topLeft":
              offset = new Point(-event.clientX, -event.clientY);
              break;
            case "topRight":
              offset = new Point(event.clientX, -event.clientY);
              break;
            case "bottomLeft":
              offset = new Point(-event.clientX, event.clientY);
              break;
          }
          this.setState({ resizing: true, offset: offset.scale(1 / this.props.zoomFactor) });
          this.props.start(this.props.id);
          const element = event.currentTarget;
          element.setPointerCapture(event.pointerId);
          element.addEventListener("pointermove", this.onPointerMove);
          element.setAttribute("resizeFrom", resizeFrom);
          element.addEventListener("pointerup", this.onPointerUp, { once: true });
        };
        this.onPointerMove = (event) => {
          const resizeFrom = event.currentTarget.getAttribute("resizeFrom");
          let width = 0;
          let height = 0;
          switch (resizeFrom) {
            case "bottomRight":
              width = event.clientX / this.props.zoomFactor - this.state.offset.x;
              height = event.clientY / this.props.zoomFactor - this.state.offset.y;
              break;
            case "topLeft":
              width = -event.clientX / this.props.zoomFactor - this.state.offset.x;
              height = -event.clientY / this.props.zoomFactor - this.state.offset.y;
              break;
            case "topRight":
              width = event.clientX / this.props.zoomFactor - this.state.offset.x;
              height = -event.clientY / this.props.zoomFactor - this.state.offset.y;
              break;
            case "bottomLeft":
              width = -event.clientX / this.props.zoomFactor - this.state.offset.x;
              height = event.clientY / this.props.zoomFactor - this.state.offset.y;
              break;
          }
          this.resize(width, height, resizeFrom);
          event.stopPropagation();
        };
        this.onPointerUp = (event) => {
          const element = event.currentTarget;
          if (!element) {
            return;
          }
          element.releasePointerCapture(event.pointerId);
          element.removeEventListener("pointermove", this.onPointerMove);
          this.setState(initialState5);
          this.props.end(this.props.id);
          event.stopPropagation();
        };
      }
      componentWillUnmount() {
        document.removeEventListener("pointermove", this.onPointerMove);
        document.removeEventListener("pointerup", this.onPointerUp);
      }
      render() {
        const { start, resize: resize2, end, selectionBoxActive, ...props } = this.props;
        return import_react113.default.createElement(
          WrappedComponent,
          { ...props },
          props.children,
          import_react113.default.createElement(HandleBottomRight, { onPointerDown: (e2) => {
            this.onPointerDown(
              e2,
              "bottomRight"
              /* ResizeFrom.BOTTOMRIGHT */
            );
          }, pointerEvents: selectionBoxActive ? "none" : "all" }),
          import_react113.default.createElement(HandleTopLeft, { onPointerDown: (e2) => {
            this.onPointerDown(
              e2,
              "topLeft"
              /* ResizeFrom.TOPLEFT */
            );
          }, pointerEvents: selectionBoxActive ? "none" : "all" }),
          import_react113.default.createElement(HandleTopRight, { onPointerDown: (e2) => {
            this.onPointerDown(
              e2,
              "topRight"
              /* ResizeFrom.TOPRIGHT */
            );
          }, pointerEvents: selectionBoxActive ? "none" : "all" }),
          import_react113.default.createElement(HandleBottomLeft, { onPointerDown: (e2) => {
            this.onPointerDown(
              e2,
              "bottomLeft"
              /* ResizeFrom.BOTTOMLEFT */
            );
          }, pointerEvents: selectionBoxActive ? "none" : "all" })
        );
      }
    }
    return enhance19(Resizable2);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/selectable/selectable.js
  var import_react114 = __toESM(require_react());
  var import_react_dom8 = __toESM(require_react_dom());
  var enhance20 = connect_default((state, props) => ({
    hovered: state.hovered[0] === props.id,
    selected: state.selected.includes(props.id)
  }), {
    select: UMLElementRepository.select,
    deselect: UMLElementRepository.deselect
  });
  var selectable = (WrappedComponent) => {
    class Selectable2 extends import_react114.Component {
      constructor() {
        super(...arguments);
        this.select = (event) => {
          if (event.which && event.which !== 1 || !this.props.hovered) {
            return;
          }
          if (event.shiftKey && this.props.selected) {
            this.props.deselect(this.props.id);
            return;
          }
          if (!this.props.selected) {
            if (!event.shiftKey) {
              this.props.deselect();
            }
            this.props.select(this.props.id);
          }
        };
      }
      componentDidMount() {
        const node = (0, import_react_dom8.findDOMNode)(this);
        node.addEventListener("pointerdown", this.select);
      }
      componentWillUnmount() {
        const node = (0, import_react_dom8.findDOMNode)(this);
        node.removeEventListener("pointerdown", this.select);
      }
      render() {
        const { hovered, selected, select: select2, deselect, ...props } = this.props;
        return import_react114.default.createElement(WrappedComponent, { ...props });
      }
    }
    return enhance20(Selectable2);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/updatable/updatable.js
  var import_react118 = __toESM(require_react());
  var import_react_dom9 = __toESM(require_react_dom());

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/updatable/FloatingButton.js
  var import_react115 = __toESM(require_react());
  var FloatingButtonContainer = styled.g.attrs((props) => ({
    ...props
  }))`
  transition: all 180ms ease-in-out;
  pointer-events: all;

  path {
    pointer-events: all;
    fill: var(--apollon-primary-contrast);
  }
  rect {
    pointer-events: all;
    fill: var(--apollon-background);
    stroke: var(--apollon-gray);
  }
  :hover {
    transform: translate(0px, -30px);
  }
  :active {
    transform: translate(0px, -30px);
  }
  :hover rect {
    fill: var(--apollon-gray);
    stroke: var(--apollon-gray-variant);
  }
  :active rect {
    fill: var(--apollon-gray);
    stroke: var(--apollon-gray-variant);
  }
`;
  var FloatingButton = ({ children, ...props }) => {
    return import_react115.default.createElement(
      FloatingButtonContainer,
      { ...props },
      import_react115.default.createElement("rect", { height: 30, width: 30, rx: "0.25rem", ry: "0.25rem" }),
      children
    );
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/updatable/icons/EditIcon.js
  var import_react116 = __toESM(require_react());
  var EditIcon = (props) => import_react116.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react116.default.createElement("path", { d: "M2.39999 13.6H3.53999L11.36 5.77999L10.22 4.63999L2.39999 12.46V13.6ZM0.799988 15.2V11.8L11.36 1.25999C11.52 1.11332 11.6967 0.999988 11.89 0.919988C12.0833 0.839988 12.2867 0.799988 12.5 0.799988C12.7133 0.799988 12.92 0.839988 13.12 0.919988C13.32 0.999988 13.4933 1.11999 13.64 1.27999L14.74 2.39999C14.9 2.54665 15.0167 2.71999 15.09 2.91999C15.1633 3.11999 15.2 3.31999 15.2 3.51999C15.2 3.73332 15.1633 3.93665 15.09 4.12999C15.0167 4.32332 14.9 4.49999 14.74 4.65999L4.19999 15.2H0.799988ZM10.78 5.21999L10.22 4.63999L11.36 5.77999L10.78 5.21999Z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/updatable/icons/DeleteIcon.js
  var import_react117 = __toESM(require_react());
  var DeleteIcon = (props) => import_react117.default.createElement(
    "svg",
    { ...props, height: 20, width: 20 },
    import_react117.default.createElement("path", { d: "M4.66666 14C4.29999 14 3.9861 13.8694 3.72499 13.6083C3.46388 13.3472 3.33332 13.0333 3.33332 12.6667V4H2.66666V2.66667H5.99999V2H9.99999V2.66667H13.3333V4H12.6667V12.6667C12.6667 13.0333 12.5361 13.3472 12.275 13.6083C12.0139 13.8694 11.7 14 11.3333 14H4.66666ZM11.3333 4H4.66666V12.6667H11.3333V4ZM5.99999 11.3333H7.33332V5.33333H5.99999V11.3333ZM8.66666 11.3333H9.99999V5.33333H8.66666V11.3333Z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/updatable/updatable.js
  var initialState6 = {};
  var enhance21 = connect_default((state, props) => ({
    hovered: state.hovered[0] === props.id,
    selected: state.selected.includes(props.id)
  }), {
    updateStart: UMLElementRepository.updateStart,
    deleteElement: UMLElementRepository.delete,
    getElementById: UMLElementRepository.getById,
    getRelationshipById: UMLRelationshipRepository.getById
  });
  var updatable = (WrappedComponent) => {
    class Updatable2 extends import_react118.Component {
      constructor() {
        super(...arguments);
        this.state = initialState6;
        this.onStartUpdate = () => {
          this.props.updateStart(this.props.id);
        };
        this.onDelete = () => {
          this.props.deleteElement(this.props.id);
        };
      }
      componentDidMount() {
        const node = (0, import_react_dom9.findDOMNode)(this);
        node.addEventListener("dblclick", this.onStartUpdate);
      }
      componentWillUnmount() {
        const node = (0, import_react_dom9.findDOMNode)(this);
        node.removeEventListener("dblclick", this.onStartUpdate);
      }
      /**
       * Determine the rightmost point in a path
       * @param path The path for which the rightmost point should be determined
       */
      findRightmostPoint(path) {
        let rightmostPoint = void 0;
        for (const currentPoint of path) {
          if (rightmostPoint === void 0 || currentPoint.x > rightmostPoint.x) {
            rightmostPoint = currentPoint;
          }
        }
        return rightmostPoint;
      }
      /**
       * Helper function to determine the base coordinates for the context actions
       * @param element The element for which the context action base coordinates should be determined
       */
      getContextActionBaseCoordinates(element) {
        const isRelationship = UMLRelationship.isUMLRelationship(element);
        if (!isRelationship) {
          return {
            x: element.bounds.width,
            y: -30
          };
        }
        const relationship = element;
        const rightmostPoint = this.findRightmostPoint(relationship.path);
        return {
          x: (rightmostPoint?.x ?? 0) - 40,
          y: (rightmostPoint?.y ?? 0) - 30
        };
      }
      render() {
        const { updateStart, deleteElement: deleteElement2, getElementById, getRelationshipById, hovered, selected, ...props } = this.props;
        const element = getElementById(props.id);
        const relationship = getRelationshipById(props.id);
        const baseCoordinates = this.getContextActionBaseCoordinates(element || relationship);
        return import_react118.default.createElement(
          WrappedComponent,
          { ...props },
          import_react118.default.createElement(
            FloatingButton,
            { style: {
              opacity: selected ? 1 : 0,
              transform: `translate(${baseCoordinates.x}px, ${selected ? baseCoordinates.y - 10 : baseCoordinates.y}px)`
            }, onClick: this.onStartUpdate },
            import_react118.default.createElement(EditIcon, { x: 7, y: 7 })
          ),
          import_react118.default.createElement(
            FloatingButton,
            { style: {
              opacity: selected ? 1 : 0,
              transform: `translate(${baseCoordinates.x}px, ${selected ? baseCoordinates.y - 50 : baseCoordinates.y}px)`
            }, onClick: this.onDelete },
            import_react118.default.createElement(DeleteIcon, { x: 7, y: 7 })
          )
        );
      }
    }
    return enhance21(Updatable2);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/uml-element/uml-element-component.js
  var enhance22 = connect_default((state, props) => ({
    features: state.editor.features,
    type: state.elements[props.id].type,
    readonly: state.editor.readonly,
    view: state.editor.view,
    mode: state.editor.mode
  }));
  var getInitialState2 = (props) => {
    const features = { ...UMLElements, ...UMLRelationships }[props.type].features;
    const component = props.type in UMLRelationshipType ? CanvasRelationship : CanvasElement;
    const decorators = [];
    if (props.mode === ApollonMode.Assessment) {
      decorators.push(assessable, updatable, selectable, hoverable);
    } else if (props.readonly) {
      decorators.push(selectable, hoverable);
    } else if (props.view === "Exporting" || props.view === "Highlight") {
      decorators.push(interactable, hoverable);
    } else if (props.view === "Modelling") {
      if (props.features.hoverable && features.hoverable) {
        decorators.push(hoverable);
      }
      if (features.reconnectable) {
        decorators.push(reconnectable);
      }
      if (props.features.selectable && features.selectable) {
        decorators.push(selectable);
      }
      if (props.features.movable && features.movable) {
        decorators.push(movable);
      }
      if (props.features.resizable && features.resizable) {
        const options = {
          preventY: features.resizable === "WIDTH",
          preventX: features.resizable === "HEIGHT"
        };
        decorators.push(resizable(options));
      }
      if (props.features.connectable && features.connectable) {
        decorators.push(connectable);
      }
      if (props.features.updatable && features.updatable) {
        decorators.push(updatable);
      }
      if (props.features.droppable && features.droppable) {
        decorators.push(droppable);
      }
    }
    return {
      component: compose(...decorators.reverse())(component)
    };
  };
  var UMLElementComponentC = class extends import_react119.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState2(this.props);
    }
    componentDidUpdate(prevProps) {
      if (prevProps !== this.props) {
        this.setState(getInitialState2(this.props));
      }
    }
    render() {
      const { component: ElementComponent } = this.state;
      return import_react119.default.createElement(ElementComponent, { id: this.props.id, child: UMLElementComponent });
    }
  };
  var UMLElementComponent = enhance22(UMLElementComponentC);

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/canvas-styles.js
  var CanvasContainer = styled.svg.attrs({
    tabIndex: -1
  })`
  position: ${({ isStatic }) => isStatic ? "static" : "absolute"};
  top: 0;
  left: 0;
  min-width: 100%;
  min-height: 100%;
  outline: none;
  overflow: visible;
  transform-origin: center center;
  fill: white;
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/canvas.js
  var enhance23 = connect_default((state) => ({
    diagram: state.diagram,
    isStatic: state.editor.readonly,
    elements: state.elements
  }), null, null, { forwardRef: true });
  var CanvasComponent = class extends import_react120.Component {
    constructor() {
      super(...arguments);
      this.layer = (0, import_react120.createRef)();
      this.origin = () => {
        if (!this.layer.current) {
          return new Point();
        }
        const canvasBounds = this.layer.current.getBoundingClientRect();
        return new Point(canvasBounds.left + canvasBounds.width / 2, canvasBounds.top + canvasBounds.height / 2);
      };
      this.snap = (point) => {
        const origin = this.origin();
        return point.subtract(origin).round().add(origin);
      };
    }
    render() {
      const { elements, diagram, isStatic } = this.props;
      let minX = 0;
      let minY = 0;
      if (isStatic) {
        for (const element of Object.values(elements)) {
          if (UMLRelationship.isUMLRelationship(element)) {
            for (const p of element.path) {
              if (p.x < minX)
                minX = p.x;
              if (p.y < minY)
                minY = p.y;
            }
          }
        }
        minX = Math.abs(Math.round(minX));
        minY = Math.abs(Math.round(minY));
      }
      const translateCoordinate = () => {
        return "translate(" + minX / 2 + "px," + minY / 2 + "px)";
      };
      return import_react120.default.createElement(
        Droppable,
        null,
        import_react120.default.createElement(
          CanvasContainer,
          { id: "modeling-editor-canvas", width: diagram.bounds.width + minX, height: diagram.bounds.height + minY, isStatic, ref: this.layer, "data-cy": "modeling-editor-canvas" },
          import_react120.default.createElement("g", { style: { transformOrigin: "top left", transform: `${translateCoordinate()}` } }, this.layer.current && import_react120.default.createElement(
            "svg",
            { x: "50%", y: "50%" },
            diagram.ownedElements.map((element) => import_react120.default.createElement(UMLElementComponent, { key: element, id: element })),
            diagram.ownedRelationships.map((relationship) => import_react120.default.createElement(UMLElementComponent, { key: relationship, id: relationship })),
            import_react120.default.createElement(ConnectionPreview, null)
          ))
        )
      );
    }
  };
  var Canvas = enhance23(CanvasComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/editor.js
  var import_react122 = __toESM(require_react());
  var import_is_mobile5 = __toESM(require_is_mobile());

  // node_modules/@ls1intum/apollon/lib/es6/services/editor/editor-repository.js
  var EditorRepository = class {
  };
  EditorRepository.changeView = (view) => ({
    type: "@@element/CHANGE_VIEW",
    payload: { view },
    undoable: false
  });
  EditorRepository.setZoomFactor = (zoomFactor) => ({
    type: "@@element/SET_ZOOM_FACTOR",
    payload: { zoomFactor },
    undoable: false
  });
  EditorRepository.setSelectionBoxActive = (selectionBoxActive) => ({
    type: "@@element/SET_SELECTION_BOX_ACTIVE",
    payload: { selectionBoxActive },
    undoable: false
  });

  // node_modules/@ls1intum/apollon/lib/es6/utils/clamp.js
  var clamp = (value, min2, max2) => {
    return Math.max(min2, Math.min(value, max2));
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/zoom-pane.js
  var import_react121 = __toESM(require_react());
  var ZoomButton = styled.button`
  background: var(--apollon-background);
  color: var(--apollon-primary-contrast);
  border: 1px solid var(--apollon-gray);
  margin: 0;
  outline: none;
  border-radius: 0.25rem;
  width: 2.25em;
  height: 2.25em;
  display: flex;
  align-items: center;
  justify-content: center;

  :hover {
    background-color: var(--apollon-gray);
    border-color: var(--apollon-gray-variant);
  }

  :active {
    background-color: var(--apollon-gray);
    border-color: var(--apollon-gray-variant);
  }
`;
  var ZoomPaneComponent = (props) => {
    const { min: min2 = 0.5, max: max2 = 5, step = 0.5, value, onChange, style } = props;
    return import_react121.default.createElement(
      "div",
      { style: {
        display: "flex",
        flexDirection: "column",
        position: "absolute",
        right: "0.75em",
        bottom: "0.75em",
        ...style
      } },
      import_react121.default.createElement(ZoomButton, { style: { marginBottom: "0.5em" }, onClick: () => onChange(clamp(value + step, min2, max2)) }, "+"),
      import_react121.default.createElement(ZoomButton, { onClick: () => onChange(clamp(value - step, min2, max2)) }, "-")
    );
  };
  var ZoomPane = ZoomPaneComponent;

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/editor.js
  var minScale = 0.5;
  var maxScale = 5;
  var grid = 10;
  var subdivisions = 5;
  var borderWidth = 1;
  var StyledEditor = styled.div`
  display: block;
  overflow: auto;

  position: relative;
  min-height: inherit;
  max-height: inherit;

  width: ${(props) => clamp(100 / props.scale, 100, 100 / minScale)}%;
  height: ${(props) => clamp(100 / props.scale, 100, 100 / minScale)}%;

  -ms-overflow-style: -ms-autohiding-scrollbar;
  border: ${borderWidth}px solid ${(props) => props.theme.color.gray};
  background-position: calc(50% + ${(grid * subdivisions - borderWidth) / 2}px)
    calc(50% + ${(grid * subdivisions - borderWidth) / 2}px);
  background-size:
    ${grid * subdivisions}px ${grid * subdivisions}px,
    ${grid * subdivisions}px ${grid * subdivisions}px,
    ${grid}px ${grid}px,
    ${grid}px ${grid}px;
  background-image: linear-gradient(to right, ${(props) => props.theme.color.grid} 1px, transparent 1px),
    linear-gradient(to bottom, ${(props) => props.theme.color.grid} 1px, transparent 1px),
    linear-gradient(to right, ${(props) => props.theme.color.gray} 1px, transparent 1px),
    linear-gradient(to bottom, ${(props) => props.theme.color.gray} 1px, transparent 1px);
  background-repeat: repeat;
  background-attachment: local;
  transition:
    transform 500ms,
    width 500ms,
    height 500ms;
  transform-origin: top left;
  transform: scale(${(props) => props.scale ?? 1});
`;
  var enhance24 = connect_default((state) => ({
    moving: [...state.moving],
    connecting: state.connecting.length > 0,
    reconnecting: Object.keys(state.reconnecting).length > 0,
    scale: state.editor.zoomFactor
  }), {
    move: UMLElementRepository.move,
    setZoomFactor: EditorRepository.setZoomFactor
  });
  var getInitialState3 = () => {
    return {
      scrollingDisabled: false,
      gestureStartZoomFactor: 1,
      isMobile: (0, import_is_mobile5.default)({ tablet: true })
    };
  };
  var SCROLL_BORDER = 100;
  var SCROLL_DISTANCE = 5;
  var EditorComponent = class extends import_react122.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState3();
      this.editor = (0, import_react122.createRef)();
      this.zoomContainer = (0, import_react122.createRef)();
      this.customScrolling = (event) => {
        const { scale = 1 } = this.props;
        if (this.editor.current) {
          const clientRect = this.editor.current.getBoundingClientRect();
          const touch = event.touches[event.touches.length - 1];
          const scrollHorizontally = touch.clientX * scale < clientRect.x + SCROLL_BORDER ? -SCROLL_DISTANCE : touch.clientX * scale > clientRect.x + clientRect.width - SCROLL_BORDER ? SCROLL_DISTANCE : 0;
          const scrollVertically = touch.clientY * scale < clientRect.y + SCROLL_BORDER ? -SCROLL_DISTANCE : touch.clientY * scale > clientRect.y + clientRect.height - SCROLL_BORDER ? SCROLL_DISTANCE : 0;
          this.editor.current.scrollBy(scrollHorizontally, scrollVertically);
          if (this.props.moving) {
            this.props.move({ x: scrollHorizontally, y: scrollVertically }, this.props.moving);
          }
        }
        event.preventDefault();
        event.stopPropagation();
      };
      this.activateScrolling = (target) => {
        if (target) {
          target.style.overflow = "auto";
          document.body.style.overflowY = "auto";
          target.style.overscrollBehavior = "auto";
          this.setState({ scrollingDisabled: false });
        }
      };
      this.deactivateScrolling = (target) => {
        if (target) {
          target.style.overflow = "hidden";
          document.body.style.overflowY = "hidden";
          target.style.overscrollBehavior = "none";
          this.setState({ scrollingDisabled: true });
        }
      };
    }
    componentDidMount() {
      window.addEventListener("wheel", (event) => {
        if (event.ctrlKey) {
          event.preventDefault();
        }
      }, { passive: false });
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.state.isMobile) {
        if (this.editor.current) {
          const { moving, connecting, reconnecting } = this.props;
          const deactivateScroll = moving.length > 0 || connecting || reconnecting;
          if (deactivateScroll && !this.state.scrollingDisabled) {
            this.deactivateScrolling(this.editor.current);
          } else if (!deactivateScroll && this.state.scrollingDisabled) {
            this.activateScrolling(this.editor.current);
          }
        }
      }
    }
    render() {
      const { moving, connecting, reconnecting, scale = 1, ...props } = this.props;
      if (this.state.isMobile) {
        return import_react122.default.createElement(
          "div",
          { ref: this.zoomContainer, style: { width: "100%", overflow: scale > 1 ? "auto" : "hidden" } },
          import_react122.default.createElement(StyledEditor, { ref: this.editor, ...props, onTouchMove: this.customScrolling, scale }),
          import_react122.default.createElement(ZoomPane, { value: scale, onChange: (zoomFactor) => this.props.setZoomFactor(zoomFactor), min: minScale, max: maxScale, step: 0.2 })
        );
      } else {
        return import_react122.default.createElement(
          "div",
          { ref: this.zoomContainer, style: { width: "100%", overflow: scale > 1 ? "auto" : "hidden" } },
          import_react122.default.createElement(StyledEditor, { ref: this.editor, ...props, scale }),
          import_react122.default.createElement(ZoomPane, { value: scale, onChange: (zoomFactor) => this.props.setZoomFactor(zoomFactor), min: minScale, max: maxScale, step: 0.2 })
        );
      }
    }
  };
  var Editor = enhance24(EditorComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/keyboard-eventlistener.js
  var import_react123 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/services/copypaste/copy-repository.js
  var CopyRepository = class _CopyRepository {
    static transformElementsForCopy(umlElements) {
      const roots = umlElements.filter((element) => !element.owner || umlElements.every((innerElement) => innerElement.id !== element.owner));
      const cloneMap = {};
      const copies = roots.reduce((clonedElements, element) => {
        element.owner = null;
        element.bounds.x = element.bounds.x + 10 * _CopyRepository.pasteCounter;
        element.bounds.y = element.bounds.y + 10 * _CopyRepository.pasteCounter;
        const clones = clone(element, umlElements);
        cloneMap[element.id] = clones[0].id;
        return clonedElements.concat(...clones);
      }, []);
      return { copiedElements: copies.map((element) => ({ ...element })), cloneMap };
    }
    static transformRelationshipsForCopy(umlRelationships, cloneMap) {
      const roots = umlRelationships.filter((element) => !element.owner || umlRelationships.every((innerElement) => innerElement.id !== element.owner));
      const copies = roots.reduce((clonedElements, element) => {
        element.owner = null;
        element.bounds.x = element.bounds.x + 10 * _CopyRepository.pasteCounter;
        element.bounds.y = element.bounds.y + 10 * _CopyRepository.pasteCounter;
        element.source.element = cloneMap[element.source.element];
        element.target.element = cloneMap[element.target.element];
        const newPath = element.path.map((pathPoint) => ({ x: pathPoint.x + 10, y: pathPoint.y + 10 }));
        element.path = [newPath[0], newPath[1], ...newPath.slice(2)];
        const clones = [element.cloneRelationship()];
        return clonedElements.concat(...clones);
      }, []);
      return copies.map((relationship) => ({ ...relationship }));
    }
  };
  CopyRepository.pasteCounter = 0;
  CopyRepository.copy = (id2) => (dispatch, getState) => {
    CopyRepository.pasteCounter = 0;
    const { elements, selected } = getState();
    const ids = id2 ? Array.isArray(id2) ? id2 : [id2] : selected;
    const idsToClone = getChildren(ids, getState().elements);
    const result = idsToClone.map((idToClone) => UMLElementRepository.get(elements[idToClone])).filter(notEmpty);
    if (getState().editor.enableCopyPasteToClipboard) {
      navigator.clipboard.writeText(JSON.stringify(result));
      return;
    } else {
      return dispatch({
        type: "@@copy/COPY",
        payload: idsToClone,
        undoable: false
      });
    }
  };
  CopyRepository.paste = () => (dispatch, getState) => {
    CopyRepository.pasteCounter++;
    if (getState().editor.enableCopyPasteToClipboard) {
      navigator.clipboard.readText().then((value) => {
        const parsedElements = JSON.parse(value);
        const currentDiagramType = getState().diagram.type;
        const diagramElements = parsedElements.map((x2) => UMLElementRepository.get(x2)).filter(notEmpty).filter((element) => element.type in UMLElementsForDiagram[currentDiagramType]);
        return CopyRepository.transformElementsForCopy(diagramElements);
      }).then(({ copiedElements }) => {
        dispatch(UMLElementRepository.create(copiedElements));
        dispatch(UMLElementRepository.deselect());
        dispatch(UMLElementRepository.select(filterRoots(copiedElements.map((element) => element.id), getState().elements)));
      });
    } else {
      const { copy } = getState();
      dispatch({ type: "@@copy/PASTE", payload: {}, undoable: false });
      const { elements } = getState();
      const elementsToCopy = copy.map((IdOfCopyElement) => UMLElementRepository.get(elements[IdOfCopyElement])).filter(notEmpty);
      const relationshipsToCopy = copy.map((IdOfCopyElement) => UMLRelationshipRepository.get(elements[IdOfCopyElement])).filter(notEmpty).filter((relationship) => relationship.source && relationship.target && copy.includes(relationship.source.element) && copy.includes(relationship.target.element));
      const { copiedElements, cloneMap } = CopyRepository.transformElementsForCopy(elementsToCopy);
      dispatch(UMLElementRepository.create(copiedElements));
      dispatch(UMLElementRepository.deselect());
      const copiedRelationships = CopyRepository.transformRelationshipsForCopy(relationshipsToCopy, cloneMap);
      dispatch(UMLElementRepository.create(copiedRelationships));
      dispatch(UMLElementRepository.select(filterRoots([...copiedElements, ...copiedRelationships].map((element) => element.id), getState().elements)));
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/undo/undo-repository.js
  var UndoRepository = class {
  };
  UndoRepository.undo = () => ({ type: "@@undo/UNDO", payload: {}, undoable: false });
  UndoRepository.redo = () => ({ type: "@@undo/REDO", payload: {}, undoable: false });

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/keyboard-eventlistener.js
  var enhance25 = compose(withCanvas, connect_default((state) => ({
    readonly: state.editor.readonly,
    mode: state.editor.mode
  }), {
    undo: UndoRepository.undo,
    redo: UndoRepository.redo,
    copy: CopyRepository.copy,
    paste: CopyRepository.paste,
    select: UMLElementRepository.select,
    deselect: UMLElementRepository.deselect,
    startMoving: UMLElementRepository.startMoving,
    move: UMLElementRepository.move,
    endMoving: UMLElementRepository.endMoving,
    delete: UMLElementRepository.delete
  }));
  var KeyboardEventListenerComponent = class extends import_react123.Component {
    constructor() {
      super(...arguments);
      this.pointerDown = (event) => {
        if (event.target !== event.currentTarget || event.shiftKey) {
          return;
        }
        this.props.deselect();
      };
      this.keyDown = (event) => {
        switch (event.key) {
          case "ArrowUp":
            event.preventDefault();
            if (!event.repeat) {
              this.props.startMoving();
            }
            this.props.move({ x: 0, y: -10 });
            break;
          case "ArrowRight":
            event.preventDefault();
            if (!event.repeat) {
              this.props.startMoving();
            }
            this.props.move({ x: 10, y: 0 });
            break;
          case "ArrowDown":
            event.preventDefault();
            if (!event.repeat) {
              this.props.startMoving();
            }
            this.props.move({ x: 0, y: 10 });
            break;
          case "ArrowLeft":
            event.preventDefault();
            if (!event.repeat) {
              this.props.startMoving();
            }
            this.props.move({ x: -10, y: 0 });
            break;
          case "Backspace":
          case "Delete":
            event.preventDefault();
            this.props.delete();
            break;
          case "Escape":
            event.preventDefault();
            this.props.deselect();
            break;
        }
        if (event.metaKey || event.ctrlKey) {
          switch (event.key) {
            case "a":
              event.preventDefault();
              this.props.select();
              break;
            case "c":
              event.preventDefault();
              this.props.copy();
              break;
            case "v":
              event.preventDefault();
              this.props.paste();
              break;
            case "z":
              event.preventDefault();
              event.shiftKey ? this.props.redo() : this.props.undo();
              break;
          }
        }
      };
      this.keyUp = (event) => {
        switch (event.key) {
          case "ArrowUp":
          case "ArrowRight":
          case "ArrowDown":
          case "ArrowLeft":
            this.props.endMoving(void 0, true);
            break;
        }
      };
    }
    componentDidMount() {
      const { layer } = this.props.canvas;
      if (!this.props.readonly && this.props.mode !== ApollonMode.Assessment) {
        layer.addEventListener("keydown", this.keyDown);
        layer.addEventListener("keyup", this.keyUp);
      }
      layer.addEventListener("pointerdown", this.pointerDown);
    }
    render() {
      return null;
    }
  };
  var KeyboardEventListener = enhance25(KeyboardEventListenerComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/draggable/draggable-layer.js
  var import_react126 = __toESM(require_react());
  var import_react_dom10 = __toESM(require_react_dom());

  // node_modules/@ls1intum/apollon/lib/es6/components/draggable/ghost.js
  var Ghost = styled.div.attrs(({ position }) => ({
    style: { transform: `translate(${position.x}px, ${position.y}px)` }
  }))`
  position: absolute;
  top: 0;
  left: 0;
  will-change: transform;
  pointer-events: none;
  margin: -5px;
  font-family: ${(props) => props.theme.font.family}, sans-serif;
  font-size: ${(props) => props.theme.font.size}px;

  svg {
    fill-opacity: 0.7;
  }
  text {
    fill: black;
    fill-opacity: 0.7;
  }
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/root/with-root.js
  var import_react125 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/root/root-context.js
  var import_react124 = __toESM(require_react());
  var { Consumer: RootConsumer, Provider: RootProvider } = (0, import_react124.createContext)(null);

  // node_modules/@ls1intum/apollon/lib/es6/components/root/with-root.js
  var withRoot = (WrappedComponent) => (0, import_react125.forwardRef)((props, ref) => import_react125.default.createElement(RootConsumer, null, (context2) => import_react125.default.createElement(WrappedComponent, { ref, ...props, ...context2 })));

  // node_modules/@ls1intum/apollon/lib/es6/components/draggable/draggable-layer.js
  var import_is_mobile6 = __toESM(require_is_mobile());
  var initialState7 = {
    dragging: false,
    offset: new Point(),
    position: new Point(),
    resolve: null,
    reject: null
  };
  var enhance26 = compose(withCanvas, withRoot, connect_default((state) => ({
    zoomFactor: state.editor.zoomFactor
  })));
  var DraggableLayerComponent = class extends import_react126.Component {
    constructor() {
      super(...arguments);
      this.state = initialState7;
      this.ghost = (0, import_react126.createRef)();
      this.onDragStart = (event) => {
        const element = event.currentTarget;
        const bounds = element.getBoundingClientRect();
        const rootBounds = this.props.root.getBoundingClientRect();
        let offset;
        let position;
        if (event instanceof PointerEvent) {
          offset = new Point(event.pageX - (bounds.left - rootBounds.x), event.pageY - (bounds.top - rootBounds.y));
          position = new Point(Math.round((event.pageX - offset.x) / 10) * 10, Math.round((event.pageY - offset.y) / 10) * 10);
        } else {
          offset = new Point(event.targetTouches[0].pageX - (bounds.left - rootBounds.x), event.targetTouches[0].pageY - (bounds.top - rootBounds.y));
          position = new Point(Math.round((event.targetTouches[0].pageX - offset.x) / 10) * 10, Math.round((event.targetTouches[0].pageY - offset.y) / 10) * 10);
        }
        if ((0, import_is_mobile6.default)({ tablet: true })) {
          document.addEventListener("touchmove", this.onPointerMove);
          document.addEventListener("touchend", this.cancel, { once: true });
        } else {
          document.addEventListener("pointermove", this.onPointerMove);
          document.addEventListener("pointerup", this.cancel, { once: true });
        }
        return new Promise((resolve, reject) => this.setState({ dragging: true, offset, position, resolve, reject }, () => {
          const container = this.ghost.current;
          container.append(element.cloneNode(true));
        }));
      };
      this.onPointerMove = (event) => {
        let position;
        if (event instanceof PointerEvent) {
          position = new Point(event.pageX - this.state.offset.x, event.pageY - this.state.offset.y);
        } else {
          position = new Point(event.targetTouches[0].pageX - this.state.offset.x, event.targetTouches[0].pageY - this.state.offset.y);
        }
        position.x = Math.round(position.x / 10) * 10;
        position.y = Math.round(position.y / 10) * 10;
        this.setState({ position });
      };
      this.onDragEnd = (owner) => (event) => {
        const { zoomFactor = 1 } = this.props;
        if (!this.state.dragging)
          return;
        const dropEvent = {
          owner,
          // transformation to new relational point origin, which is in the center of the canvas
          position: this.state.position.subtract(this.props.canvas.origin().subtract(this.props.root.getBoundingClientRect().x, this.props.root.getBoundingClientRect().y))
        };
        dropEvent.position.x = Math.round(dropEvent.position.x / zoomFactor / 10) * 10;
        dropEvent.position.y = Math.round(dropEvent.position.y / zoomFactor / 10) * 10;
        if (this.state.resolve) {
          this.state.resolve(dropEvent);
        }
      };
      this.cancel = () => {
        if (this.state.reject) {
          this.state.reject();
        }
        if ((0, import_is_mobile6.default)({ tablet: true })) {
          document.removeEventListener("touchmove", this.onPointerMove);
        } else {
          document.removeEventListener("pointermove", this.onPointerMove);
        }
        this.setState(initialState7);
      };
    }
    render() {
      const context2 = {
        onDragStart: this.onDragStart,
        onDragEnd: this.onDragEnd
      };
      const { dragging, position } = this.state;
      return import_react126.default.createElement(
        DraggableProvider,
        { value: context2 },
        this.props.children,
        (0, import_react_dom10.createPortal)(dragging && import_react126.default.createElement(Ghost, { ref: this.ghost, position }), this.props.root)
      );
    }
  };
  var DraggableLayer = enhance26(DraggableLayerComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/i18n/i18n-provider.js
  var import_react128 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/i18n/de.json
  var de_default = {
    views: {
      modelling: "Modellierung",
      exporting: "Interaktiv",
      highlight: "Zeige interaktive Elemente"
    },
    sidebar: {
      classAttribute: "+ attribut: Typ",
      classMethod: "+ methode()",
      enumAttribute: "Fall",
      objectAttribute: "attribut = Wert"
    },
    popup: {
      attributes: "Attribute",
      methods: "Methoden",
      relationship: "Beziehung",
      association: "Assoziation",
      multiplicity: "Multiziplit\xE4t",
      role: "Rolle",
      messages: "Nachrichten",
      condition: "Bedingungen",
      tokens: "Tokens",
      capacity: "Kapazit\xE4t"
    },
    assessment: {
      assessment: "Bewertung f\xFCr",
      score: "Punkte",
      feedback: "Feedback",
      feedbackPlaceholder: "Du kannst hier Feedback abgeben...",
      additionalFeedbackPlaceholder: "Du kannst hier zus\xE4tzliches Feedback abgeben..."
    },
    packages: {
      ClassDiagram: {
        Package: "Paket",
        Class: "Klasse",
        AbstractClass: "Abstrakt",
        Interface: "Schnittstelle",
        Enumeration: "Aufz\xE4hlung",
        ClassAttribute: "Attribut",
        ClassMethod: "Methode",
        ClassAggregation: "Aggregation",
        ClassBidirectional: "Assoziation (bidirektional)",
        ClassComposition: "Komposition",
        ClassDependency: "Abh\xE4ngigkeit",
        ClassInheritance: "Vererbung",
        ClassRealization: "Realisierung",
        ClassUnidirectional: "Assoziation (unidirektional)"
      },
      ObjectDiagram: {
        ObjectName: "Objekt",
        ObjectAttribute: "Attribut",
        ObjectMethod: "Methode",
        ObjectLink: "Beziehung"
      },
      ActivityDiagram: {
        Activity: "Aktivit\xE4t",
        ActivityActionNode: "Aktion",
        ActivityFinalNode: "Endknoten",
        ActivityForkNode: "Verzweigungsknoten",
        ActivityInitialNode: "Startknoten",
        ActivityMergeNode: "Bedingung",
        ActivityObjectNode: "Objekt",
        ActivityControlFlow: "Kontrollfluss"
      },
      UseCaseDiagram: {
        UseCase: "Anwendungsfall",
        UseCaseActor: "Akteur",
        UseCaseSystem: "System",
        UseCaseAssociation: "Assoziation",
        UseCaseExtend: "Extend",
        UseCaseGeneralization: "Generalisierung",
        UseCaseInclude: "Include"
      },
      CommunicationDiagram: {
        ObjectName: "Objekt",
        ObjectAttribute: "Attribut",
        ObjectMethod: "Methode",
        CommunicationLink: "Kommunikation"
      },
      ComponentDiagram: {
        Component: "Komponente",
        Subsystem: "Teilsystem",
        ComponentDependency: "Abh\xE4ngigkeit",
        ComponentInterface: "Schnittstelle",
        ComponentInterfaceProvided: "Bereitgestellte Schnittstelle",
        ComponentInterfaceRequired: "Verwendete Schnittstelle"
      },
      DeploymentDiagram: {
        DeploymentNode: "Knoten",
        DeploymentComponent: "Komponente",
        DeploymentArtifact: "Artefakt",
        DeploymentInterface: "Schnittstelle",
        DeploymentInterfaceProvided: "Bereitgestellte Schnittstelle",
        DeploymentInterfaceRequired: "Verwendete Schnittstelle",
        DeploymentAssociation: "Deployment Verbindung",
        DeploymentDependency: "Deployment Abh\xE4ngigkeit"
      },
      PetriNet: {
        PetriNetPlace: "Platz",
        PetriNetTransition: "Transition"
      },
      ReachabilityGraph: {
        ReachabilityGraphIsInitialMarking: "Ist Anfangsmarkierung",
        ReachabilityGraphMarking: "Markierung"
      },
      SyntaxTree: {
        SyntaxTreeTerminal: "Terminal",
        SyntaxTreeNonterminal: "Nichtterminal",
        SyntaxTreeLink: "Verbindung"
      },
      Flowchart: {
        FlowchartTerminal: "Terminator",
        FlowchartDecision: "Entscheidung",
        FlowchartProcess: "Operation",
        FlowchartFunctionCall: "Unterprogramm ausf\xFChren",
        FlowchartInputOutput: "Ein- und Ausgabe",
        FlowchartFlowline: "Verbindung"
      },
      ColorLegend: {
        ColorLegend: "Farbe Beschreibung"
      },
      BPMN: {
        BPMNTask: "Task",
        BPMNUserTask: "User Task",
        BPMNSendTask: "Send Task",
        BPMNReceiveTask: "Receive Task",
        BPMNManualTask: "Manual Task",
        BPMNBusinessRuleTask: "Business Rule Task",
        BPMNScriptTask: "Script Task",
        BPMNSubprocess: "Sub-Prozess",
        BPMNTransaction: "Transaktion",
        BPMNCallActivity: "Aufruf-Aktivit\xE4t",
        BPMNAnnotation: "Annotation",
        BPMNStartEvent: "Start-Ereignis",
        BPMNMessageStartEvent: "Message Start Event",
        BPMNTimerStartEvent: "Timer Start Event",
        BPMNConditionalStartEvent: "Conditional Start Event",
        BPMNSignalStartEvent: "Signal Start Event",
        BPMNIntermediateEvent: "Zwischenereignis",
        BPMNMessageIntermediateCatchEvent: "Message Intermediate Catch Event",
        BPMNMessageIntermediateThrowEvent: "Message Intermediate Throw Event",
        BPMNTimerIntermediateCatchEvent: "Timer Intermediate Catch Event",
        BPMNEscalationIntermediateThrowEvent: "Escalation Intermediate Throw Event",
        BPMNConditionalIntermediateCatchEvent: "Conditional Intermediate Catch Event",
        BPMNLinkIntermediateCatchEvent: "Link Intermediate Catch Event",
        BPMNLinkIntermediateThrowEvent: "Link Intermediate Throw Event",
        BPMNCompensationIntermediateThrowEvent: "Compensation Intermediate Throw Event",
        BPMNSignalIntermediateCatchEvent: "Signal Intermediate Catch Event",
        BPMNSignalIntermediateThrowEvent: "Signal Intermediate Throw Event",
        BPMNEndEvent: "End-Ereignis",
        "BPMNMessageEndEvent:": "Message End Event",
        BPMNEscalationEndEvent: "Escalation End Event",
        BPMNErrorEndEvent: "Error End Event",
        BPMNCompensationEndEvent: "Compensation End Event",
        BPMNSignalEndEvent: "Signal End Event",
        BPMNTerminateEndEvent: "Terminate End Event",
        BPMNGateway: "Gateway",
        BPMNComplexGateway: "Komplex",
        BPMNEventBasedGateway: "Ereignis-basiert",
        BPMNExclusiveGateway: "Exklusiv",
        BPMNInclusiveGateway: "Inklusiv",
        BPMNParallelGateway: "Parallel",
        BPMNConversation: "Konversation",
        BPMNCallConversation: "Aufruf-Konversation",
        BPMNSequenceFlow: "Sequenz",
        BPMNMessageFlow: "Nachricht",
        BPMNAssociationFlow: "Assoziation",
        BPMNDataAssociationFlow: "Daten-Assoziation",
        BPMNDataObject: "Datenobjekt",
        BPMNPool: "Pool",
        BPMNSwimlane: "Bahn",
        BPMNSwimlanes: "Bahnen",
        BPMNGroup: "Gruppe"
      }
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/i18n/en.json
  var en_default = {
    views: {
      modelling: "Modeling",
      exporting: "Interactive",
      highlight: "Show interactive elements"
    },
    sidebar: {
      classAttribute: "+ attribute: Type",
      classMethod: "+ method()",
      enumAttribute: "Case",
      objectAttribute: "attribute = value"
    },
    popup: {
      attributes: "Attributes",
      methods: "Methods",
      relationship: "Relationship",
      association: "Association",
      multiplicity: "Multiplicity",
      role: "Role",
      messages: "Messages",
      condition: "Conditions",
      tokens: "Tokens",
      capacity: "Capacity"
    },
    assessment: {
      assessment: "Assessment for",
      score: "Points",
      feedback: "Feedback",
      feedbackPlaceholder: "You can enter feedback here...",
      additionalFeedbackPlaceholder: "You can enter additional feedback here..."
    },
    packages: {
      ClassDiagram: {
        Package: "Package",
        Class: "Class",
        AbstractClass: "Abstract",
        Interface: "Interface",
        Enumeration: "Enumeration",
        ClassAttribute: "Attribute",
        ClassMethod: "Method",
        ClassAggregation: "Aggregation",
        ClassBidirectional: "Association (bidirectional)",
        ClassComposition: "Composition",
        ClassDependency: "Dependency",
        ClassInheritance: "Inheritance",
        ClassRealization: "Realization",
        ClassUnidirectional: "Association (unidirectional)"
      },
      ObjectDiagram: {
        ObjectName: "Object",
        ObjectAttribute: "Attribute",
        ObjectMethod: "Method",
        ObjectLink: "Relationship"
      },
      ActivityDiagram: {
        Activity: "Activity",
        ActivityActionNode: "Action",
        ActivityFinalNode: "Final Node",
        ActivityForkNode: "Fork Node",
        ActivityInitialNode: "Initial Node",
        ActivityMergeNode: "Condition",
        ActivityObjectNode: "Object",
        ActivityControlFlow: "Control Flow"
      },
      UseCaseDiagram: {
        UseCase: "UseCase",
        UseCaseActor: "Actor",
        UseCaseSystem: "System",
        UseCaseAssociation: "Association",
        UseCaseExtend: "Extend",
        UseCaseGeneralization: "Generalization",
        UseCaseInclude: "Include"
      },
      CommunicationDiagram: {
        ObjectName: "Object",
        ObjectAttribute: "Attribute",
        ObjectMethod: "Method",
        CommunicationLink: "Communication Link"
      },
      ComponentDiagram: {
        Component: "Component",
        Subsystem: "Subsystem",
        ComponentDependency: "Dependency",
        ComponentInterface: "Interface",
        ComponentInterfaceProvided: "Provided Interface",
        ComponentInterfaceRequired: "Required Interface"
      },
      DeploymentDiagram: {
        DeploymentNode: "Node",
        DeploymentComponent: "Component",
        DeploymentArtifact: "Artifact",
        DeploymentInterface: "Interface",
        DeploymentInterfaceProvided: "Provided Interface",
        DeploymentInterfaceRequired: "Required Interface",
        DeploymentAssociation: "Deployment Association",
        DeploymentDependency: "Deployment Dependency"
      },
      PetriNet: {
        PetriNetPlace: "Place",
        PetriNetTransition: "Transition"
      },
      ReachabilityGraph: {
        ReachabilityGraphIsInitialMarking: "Is initial marking",
        ReachabilityGraphMarking: "Marking"
      },
      SyntaxTree: {
        SyntaxTreeTerminal: "Terminal",
        SyntaxTreeNonterminal: "Nonterminal",
        SyntaxTreeLink: "Link"
      },
      Flowchart: {
        FlowchartTerminal: "Terminal",
        FlowchartDecision: "Decision",
        FlowchartProcess: "Process",
        FlowchartFunctionCall: "Function Call",
        FlowchartInputOutput: "Input Output",
        FlowchartFlowline: "Flowline"
      },
      ColorLegend: {
        ColorLegend: "Color Description"
      },
      BPMN: {
        BPMNTask: "Task",
        BPMNUserTask: "User Task",
        BPMNSendTask: "Send Task",
        BPMNReceiveTask: "Receive Task",
        BPMNManualTask: "Manual Task",
        BPMNBusinessRuleTask: "Business Rule Task",
        BPMNScriptTask: "Script Task",
        BPMNSubprocess: "Subprocess",
        BPMNTransaction: "Transaction",
        BPMNCallActivity: "Call Activity",
        BPMNAnnotation: "Annotation",
        BPMNStartEvent: "Start Event",
        BPMNMessageStartEvent: "Message Start Event",
        BPMNTimerStartEvent: "Timer Start Event",
        BPMNConditionalStartEvent: "Conditional Start Event",
        BPMNSignalStartEvent: "Signal Start Event",
        BPMNIntermediateEvent: "Intermediate Event",
        BPMNMessageIntermediateCatchEvent: "Message Intermediate Catch Event",
        BPMNMessageIntermediateThrowEvent: "Message Intermediate Throw Event",
        BPMNTimerIntermediateCatchEvent: "Timer Intermediate Catch Event",
        BPMNEscalationIntermediateThrowEvent: "Escalation Intermediate Throw Event",
        BPMNConditionalIntermediateCatchEvent: "Conditional Intermediate Catch Event",
        BPMNLinkIntermediateCatchEvent: "Link Intermediate Catch Event",
        BPMNLinkIntermediateThrowEvent: "Link Intermediate Throw Event",
        BPMNCompensationIntermediateThrowEvent: "Compensation Intermediate Throw Event",
        BPMNSignalIntermediateCatchEvent: "Signal Intermediate Catch Event",
        BPMNSignalIntermediateThrowEvent: "Signal Intermediate Throw Event",
        BPMNEndEvent: "End Event",
        BPMNMessageEndEvent: "Message End Event",
        BPMNEscalationEndEvent: "Escalation End Event",
        BPMNErrorEndEvent: "Error End Event",
        BPMNCompensationEndEvent: "Compensation End Event",
        BPMNSignalEndEvent: "Signal End Event",
        BPMNTerminateEndEvent: "Terminate End Event",
        BPMNGateway: "Gateway",
        BPMNComplexGateway: "Complex",
        BPMNEventBasedGateway: "Event-based",
        BPMNInclusiveGateway: "Inclusive",
        BPMNExclusiveGateway: "Exclusive",
        BPMNParallelGateway: "Parallel",
        BPMNConversation: "Conversation",
        BPMNCallConversation: "Call Conversation",
        BPMNSequenceFlow: "Sequence",
        BPMNMessageFlow: "Message",
        BPMNAssociationFlow: "Association",
        BPMNDataAssociationFlow: "Data Association",
        BPMNDataObject: "Data Object",
        BPMNPool: "Pool",
        BPMNSwimlane: "Lane",
        BPMNSwimlanes: "Lanes",
        BPMNGroup: "Group"
      }
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/i18n/i18n-context.js
  var import_react127 = __toESM(require_react());
  var { Provider: I18nProvider, Consumer: I18nConsumer } = (0, import_react127.createContext)(null);

  // node_modules/@ls1intum/apollon/lib/es6/components/i18n/i18n-provider.js
  var defaultLocale = Locale.en;
  var dictionary = {
    [Locale.de]: de_default,
    [Locale.en]: en_default
  };
  var I18nProvider2 = class extends import_react128.Component {
    constructor() {
      super(...arguments);
      this.translate = (key) => {
        try {
          let translations = dictionary[this.props.locale];
          let translation = key.split(".").reduce((result, current2) => result[current2], translations);
          if (!translation) {
            translations = dictionary[defaultLocale];
            translation = key.split(".").reduce((result, current2) => result[current2], translations);
          }
          return translation;
        } catch (error) {
          console.error(error);
          return "";
        }
      };
    }
    render() {
      const value = {
        translate: this.translate
      };
      return import_react128.default.createElement(I18nProvider, { value }, this.props.children);
    }
  };
  I18nProvider2.defaultProps = {
    locale: defaultLocale
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/sidebar/sidebar-component.js
  var import_react134 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/create-pane/create-pane.js
  var import_react133 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/activity-preview.js
  var composeActivityPreview = (layer, translate) => {
    const elements = [];
    UMLActivityForkNode.defaultWidth = Math.round(20 / 10) * 10;
    UMLActivityForkNode.defaultHeight = Math.round(60 / 10) * 10;
    UMLActivityForkNodeHorizontal.defaultWidth = Math.round(60 / 10) * 10;
    UMLActivityForkNodeHorizontal.defaultHeight = Math.round(20 / 10) * 10;
    const activity = new UMLActivity({ name: translate("packages.ActivityDiagram.Activity") });
    activity.bounds = {
      ...activity.bounds,
      width: activity.bounds.width,
      height: activity.bounds.height
    };
    elements.push(activity);
    const activityInitialNode = new UMLActivityInitialNode({
      bounds: { x: 0, y: 0, width: 45, height: 45 }
    });
    elements.push(activityInitialNode);
    const activityFinalNode = new UMLActivityFinalNode({
      bounds: { x: 0, y: 0, width: 45, height: 45 }
    });
    elements.push(activityFinalNode);
    const activityActionNode = new UMLActivityActionNode({
      name: translate("packages.ActivityDiagram.ActivityActionNode")
    });
    activityActionNode.bounds = {
      ...activityActionNode.bounds,
      width: activityActionNode.bounds.width,
      height: activityActionNode.bounds.height
    };
    elements.push(activityActionNode);
    const activityObjectNode = new UMLActivityObjectNode({
      name: translate("packages.ActivityDiagram.ActivityObjectNode")
    });
    activityObjectNode.bounds = {
      ...activityObjectNode.bounds,
      width: activityObjectNode.bounds.width,
      height: activityObjectNode.bounds.height
    };
    elements.push(activityObjectNode);
    const activityMergeNode = new UMLActivityMergeNode({ name: translate("packages.ActivityDiagram.ActivityMergeNode") });
    activityMergeNode.bounds = {
      ...activityMergeNode.bounds,
      width: activityMergeNode.bounds.width,
      height: activityMergeNode.bounds.height
    };
    elements.push(activityMergeNode);
    const activityForkNode = new UMLActivityForkNode();
    elements.push(activityForkNode);
    const activityForkNodeHorizontal = new UMLActivityForkNodeHorizontal();
    elements.push(activityForkNodeHorizontal);
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/class-preview.js
  var composeClassPreview = (layer, translate) => {
    const elements = [];
    UMLClassifier.stereotypeHeaderHeight = computeDimension(1, 50);
    UMLClassifier.nonStereotypeHeaderHeight = computeDimension(1, 40);
    const umlPackage = new UMLClassPackage({ name: translate("packages.ClassDiagram.Package") });
    umlPackage.bounds = {
      ...umlPackage.bounds,
      width: umlPackage.bounds.width,
      height: umlPackage.bounds.height
    };
    elements.push(umlPackage);
    const umlClass = new UMLClass({ name: translate("packages.ClassDiagram.Class") });
    umlClass.bounds = {
      ...umlClass.bounds,
      width: umlClass.bounds.width,
      height: umlClass.bounds.height
    };
    const umlClassAttribute = new UMLClassAttribute({
      name: translate("sidebar.classAttribute"),
      owner: umlClass.id,
      bounds: {
        x: 0,
        y: 0,
        width: computeDimension(1, 200),
        height: computeDimension(1, 30)
      }
    });
    const umlClassMethod = new UMLClassMethod({
      name: translate("sidebar.classMethod"),
      owner: umlClass.id,
      bounds: {
        x: 0,
        y: 0,
        width: computeDimension(1, 200),
        height: computeDimension(1, 30)
      }
    });
    umlClass.ownedElements = [umlClassAttribute.id, umlClassMethod.id];
    elements.push(...umlClass.render(layer, [umlClassAttribute, umlClassMethod]));
    const umlAbstract = new UMLAbstractClass({ name: translate("packages.ClassDiagram.AbstractClass") });
    umlAbstract.bounds = {
      ...umlAbstract.bounds,
      width: umlAbstract.bounds.width,
      height: umlAbstract.bounds.height
    };
    const umlAbstractAttribute = new UMLClassAttribute({
      name: translate("sidebar.classAttribute"),
      owner: umlAbstract.id,
      bounds: {
        x: 0,
        y: 40,
        width: computeDimension(1, 200),
        height: computeDimension(1, 30)
      }
    });
    const umlAbstractMethod = new UMLClassMethod({
      name: translate("sidebar.classMethod"),
      owner: umlAbstract.id,
      bounds: {
        x: 0,
        y: 70,
        width: computeDimension(1, 200),
        height: computeDimension(1, 30)
      }
    });
    umlAbstract.ownedElements = [umlAbstractAttribute.id, umlAbstractMethod.id];
    elements.push(...umlAbstract.render(layer, [umlAbstractAttribute, umlAbstractMethod]));
    const umlInterface = new UMLInterface({
      name: translate("packages.ClassDiagram.Interface"),
      bounds: { height: 110 }
    });
    umlInterface.bounds = {
      ...umlInterface.bounds,
      width: umlInterface.bounds.width,
      height: umlInterface.bounds.height
    };
    const umlInterfaceAttribute = new UMLClassAttribute({
      name: translate("sidebar.classAttribute"),
      owner: umlInterface.id,
      bounds: {
        x: 0,
        y: 50,
        width: computeDimension(1, 200),
        height: computeDimension(1, 30)
      }
    });
    const umlInterfaceMethod = new UMLClassMethod({
      name: translate("sidebar.classMethod"),
      owner: umlInterface.id,
      bounds: {
        x: 0,
        y: 80,
        width: computeDimension(1, 200),
        height: computeDimension(1, 30)
      }
    });
    umlInterface.ownedElements = [umlInterfaceAttribute.id, umlInterfaceMethod.id];
    elements.push(...umlInterface.render(layer, [umlInterfaceAttribute, umlInterfaceMethod]));
    const umlEnumeration = new UMLEnumeration({
      name: translate("packages.ClassDiagram.Enumeration"),
      bounds: { height: 140 }
    });
    umlEnumeration.bounds = {
      ...umlEnumeration.bounds,
      width: umlEnumeration.bounds.width,
      height: umlEnumeration.bounds.height
    };
    const umlEnumerationCase1 = new UMLClassAttribute({
      name: translate("sidebar.enumAttribute") + " 1",
      owner: umlEnumeration.id,
      bounds: {
        x: 0,
        y: 50,
        width: computeDimension(1, 200),
        height: computeDimension(1, 30)
      }
    });
    const umlEnumerationCase2 = new UMLClassAttribute({
      name: translate("sidebar.enumAttribute") + " 2",
      owner: umlEnumeration.id,
      bounds: {
        x: 0,
        y: 80,
        width: computeDimension(1, 200),
        height: computeDimension(1, 30)
      }
    });
    const umlEnumerationCase3 = new UMLClassAttribute({
      name: translate("sidebar.enumAttribute") + " 3",
      owner: umlEnumeration.id,
      bounds: {
        x: 0,
        y: 110,
        width: computeDimension(1, 200),
        height: computeDimension(1, 30)
      }
    });
    umlEnumeration.ownedElements = [umlEnumerationCase1.id, umlEnumerationCase2.id, umlEnumerationCase3.id];
    elements.push(...umlEnumeration.render(layer, [umlEnumerationCase1, umlEnumerationCase2, umlEnumerationCase3]));
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-communication-diagram/communication-preview.js
  var composeCommunicationPreview = (layer, translate) => {
    const elements = [];
    const umlObject = new UMLObjectName({ name: translate("packages.CommunicationDiagram.ObjectName") });
    umlObject.bounds = {
      ...umlObject.bounds,
      width: umlObject.bounds.width,
      height: umlObject.bounds.height
    };
    const umlObjectAttribute = new UMLObjectAttribute({
      name: translate("sidebar.classAttribute"),
      owner: umlObject.id,
      bounds: {
        x: 0,
        y: 0,
        width: computeDimension(1, 200),
        height: computeDimension(1, 25)
      }
    });
    umlObject.ownedElements = [umlObjectAttribute.id];
    elements.push(...umlObject.render(layer, [umlObjectAttribute]));
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/component-preview.js
  var composeComponentPreview = (layer, translate) => {
    const elements = [];
    const umlComponent = new UMLComponentComponent({ name: translate("packages.ComponentDiagram.Component") });
    umlComponent.bounds = {
      ...umlComponent.bounds,
      width: umlComponent.bounds.width,
      height: umlComponent.bounds.height
    };
    elements.push(umlComponent);
    const umlSubsystem = new UMLSubsystem({ name: translate("packages.ComponentDiagram.Subsystem") });
    umlSubsystem.bounds = {
      ...umlSubsystem.bounds,
      width: umlSubsystem.bounds.width,
      height: umlSubsystem.bounds.height
    };
    elements.push(umlSubsystem);
    const umlComponentInterface = new UMLComponentInterface({
      name: translate("packages.ComponentDiagram.ComponentInterface")
    });
    umlComponentInterface.bounds = {
      ...umlComponentInterface.bounds,
      width: umlComponentInterface.bounds.width,
      height: umlComponentInterface.bounds.height
    };
    const [umlInterface] = umlComponentInterface.render(layer);
    umlInterface.styles = { paddingTop: 8 };
    elements.push(umlInterface);
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/deployment-preview.js
  var composeDeploymentPreview = (layer, translate) => {
    const elements = [];
    const umlDeploymentNode = new UMLDeploymentNode({ name: translate("packages.DeploymentDiagram.DeploymentNode") });
    umlDeploymentNode.bounds = {
      ...umlDeploymentNode.bounds,
      width: umlDeploymentNode.bounds.width,
      height: umlDeploymentNode.bounds.height
    };
    elements.push(umlDeploymentNode);
    const umlComponent = new UMLDeploymentComponent({
      name: translate("packages.DeploymentDiagram.DeploymentComponent")
    });
    umlComponent.bounds = {
      ...umlComponent.bounds,
      width: umlComponent.bounds.width,
      height: umlComponent.bounds.height
    };
    elements.push(umlComponent);
    const umlDeploymentArtifact = new UMLDeploymentArtifact({
      name: translate("packages.DeploymentDiagram.DeploymentArtifact")
    });
    umlDeploymentArtifact.bounds = {
      ...umlDeploymentArtifact.bounds,
      width: umlDeploymentArtifact.bounds.width
    };
    elements.push(umlDeploymentArtifact);
    const umlDeploymentInterface = new UMLDeploymentInterface({
      name: translate("packages.DeploymentDiagram.DeploymentInterface")
    });
    umlDeploymentInterface.bounds = {
      ...umlDeploymentInterface.bounds,
      width: umlDeploymentInterface.bounds.width,
      height: umlDeploymentInterface.bounds.height
    };
    elements.push(umlDeploymentInterface);
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-object-diagram/object-preview.js
  var composeObjectPreview = (layer, translate) => {
    const elements = [];
    const umlObject = new UMLObjectName({ name: translate("packages.ObjectDiagram.ObjectName") });
    umlObject.bounds = {
      ...umlObject.bounds,
      width: umlObject.bounds.width,
      height: umlObject.bounds.height
    };
    const umlObjectMember = new UMLObjectAttribute({
      name: translate("sidebar.objectAttribute"),
      owner: umlObject.id,
      bounds: {
        x: 0,
        y: 0,
        width: computeDimension(1, 200),
        height: computeDimension(1, 25)
      }
    });
    umlObject.ownedElements = [umlObjectMember.id];
    elements.push(...umlObject.render(layer, [umlObjectMember]));
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/use-case-preview.js
  var composeUseCasePreview = (layer, translate) => {
    const elements = [];
    const umlUseCase = new UMLUseCase({ name: translate("packages.UseCaseDiagram.UseCase") });
    umlUseCase.bounds = {
      ...umlUseCase.bounds,
      width: umlUseCase.bounds.width,
      height: umlUseCase.bounds.height
    };
    elements.push(umlUseCase);
    const umlActor = new UMLUseCaseActor({
      name: translate("packages.UseCaseDiagram.UseCaseActor"),
      bounds: {
        x: 0,
        y: 0,
        width: computeDimension(1, 80),
        height: computeDimension(1, 140)
      }
    });
    elements.push(umlActor);
    const umlSystem = new UMLUseCaseSystem({ name: translate("packages.UseCaseDiagram.UseCaseSystem") });
    umlSystem.bounds = {
      ...umlSystem.bounds,
      width: umlSystem.bounds.width,
      height: umlSystem.bounds.height
    };
    elements.push(umlSystem);
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/i18n/localized.js
  var import_react129 = __toESM(require_react());
  function localized(Component71) {
    return function LocalizedComponent(props) {
      return import_react129.default.createElement(I18nConsumer, null, (i18n) => import_react129.default.createElement(Component71, { ...props, ...i18n }));
    };
  }

  // node_modules/@ls1intum/apollon/lib/es6/components/store/model-store.js
  var import_react130 = __toESM(require_react());

  // node_modules/@redux-saga/symbols/dist/redux-saga-symbols.esm.js
  var createSymbol = function createSymbol2(name) {
    return "@@redux-saga/" + name;
  };
  var CANCEL = /* @__PURE__ */ createSymbol("CANCEL_PROMISE");
  var CHANNEL_END_TYPE = /* @__PURE__ */ createSymbol("CHANNEL_END");
  var IO = /* @__PURE__ */ createSymbol("IO");
  var MATCH = /* @__PURE__ */ createSymbol("MATCH");
  var MULTICAST = /* @__PURE__ */ createSymbol("MULTICAST");
  var SAGA_ACTION = /* @__PURE__ */ createSymbol("SAGA_ACTION");
  var SELF_CANCELLATION = /* @__PURE__ */ createSymbol("SELF_CANCELLATION");
  var TASK = /* @__PURE__ */ createSymbol("TASK");
  var TASK_CANCEL = /* @__PURE__ */ createSymbol("TASK_CANCEL");
  var TERMINATE = /* @__PURE__ */ createSymbol("TERMINATE");
  var SAGA_LOCATION = /* @__PURE__ */ createSymbol("LOCATION");

  // node_modules/@redux-saga/is/dist/redux-saga-is.esm.js
  var undef = function undef2(v2) {
    return v2 === null || v2 === void 0;
  };
  var notUndef = function notUndef2(v2) {
    return v2 !== null && v2 !== void 0;
  };
  var func = function func2(f) {
    return typeof f === "function";
  };
  var string = function string2(s2) {
    return typeof s2 === "string";
  };
  var array = Array.isArray;
  var object = function object2(obj) {
    return obj && !array(obj) && typeof obj === "object";
  };
  var promise = function promise2(p) {
    return p && func(p.then);
  };
  var iterator = function iterator2(it) {
    return it && func(it.next) && func(it.throw);
  };
  var task = function task2(t2) {
    return t2 && t2[TASK];
  };
  var buffer = function buffer2(buf) {
    return buf && func(buf.isEmpty) && func(buf.take) && func(buf.put);
  };
  var pattern = function pattern2(pat) {
    return pat && (string(pat) || symbol(pat) || func(pat) || array(pat) && pat.every(pattern2));
  };
  var channel = function channel2(ch) {
    return ch && func(ch.take) && func(ch.close);
  };
  var stringableFunc = function stringableFunc2(f) {
    return func(f) && f.hasOwnProperty("toString");
  };
  var symbol = function symbol2(sym) {
    return Boolean(sym) && typeof Symbol === "function" && sym.constructor === Symbol && sym !== Symbol.prototype;
  };
  var multicast = function multicast2(ch) {
    return channel(ch) && ch[MULTICAST];
  };
  var effect = function effect2(eff) {
    return eff && eff[IO];
  };

  // node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.esm.js
  var MAX_SIGNED_INT = 2147483647;
  function delayP(ms, val) {
    if (val === void 0) {
      val = true;
    }
    if (ms > MAX_SIGNED_INT) {
      throw new Error("delay only supports a maximum value of " + MAX_SIGNED_INT + "ms");
    }
    var timeoutId;
    var promise3 = new Promise(function(resolve) {
      timeoutId = setTimeout(resolve, Math.min(MAX_SIGNED_INT, ms), val);
    });
    promise3[CANCEL] = function() {
      clearTimeout(timeoutId);
    };
    return promise3;
  }
  var redux_saga_delay_p_esm_default = delayP;

  // node_modules/@redux-saga/core/dist/io-22ea0cf9.js
  var konst = function konst2(v2) {
    return function() {
      return v2;
    };
  };
  var kTrue = /* @__PURE__ */ konst(true);
  var noop = function noop2() {
  };
  if (typeof Proxy !== "undefined") {
    noop = /* @__PURE__ */ new Proxy(noop, {
      set: function set3() {
        throw internalErr("There was an attempt to assign a property to internal `noop` function.");
      }
    });
  }
  var identity = function identity2(v2) {
    return v2;
  };
  var hasSymbol = typeof Symbol === "function";
  var asyncIteratorSymbol = hasSymbol && Symbol.asyncIterator ? Symbol.asyncIterator : "@@asyncIterator";
  function check(value, predicate3, error) {
    if (!predicate3(value)) {
      throw new Error(error);
    }
  }
  var assignWithSymbols = function assignWithSymbols2(target, source) {
    _extends(target, source);
    if (Object.getOwnPropertySymbols) {
      Object.getOwnPropertySymbols(source).forEach(function(s2) {
        target[s2] = source[s2];
      });
    }
  };
  var flatMap = function flatMap2(mapper, arr) {
    var _ref;
    return (_ref = []).concat.apply(_ref, arr.map(mapper));
  };
  function remove(array4, item) {
    var index = array4.indexOf(item);
    if (index >= 0) {
      array4.splice(index, 1);
    }
  }
  function once(fn) {
    var called = false;
    return function() {
      if (called) {
        return;
      }
      called = true;
      fn();
    };
  }
  var kThrow = function kThrow2(err) {
    throw err;
  };
  var kReturn = function kReturn2(value) {
    return {
      value,
      done: true
    };
  };
  function makeIterator(next, thro, name) {
    if (thro === void 0) {
      thro = kThrow;
    }
    if (name === void 0) {
      name = "iterator";
    }
    var iterator4 = {
      meta: {
        name
      },
      next,
      throw: thro,
      return: kReturn,
      isSagaIterator: true
    };
    if (typeof Symbol !== "undefined") {
      iterator4[Symbol.iterator] = function() {
        return iterator4;
      };
    }
    return iterator4;
  }
  function logError(error, _ref2) {
    var sagaStack2 = _ref2.sagaStack;
    console.error(error);
    console.error(sagaStack2);
  }
  var internalErr = function internalErr2(err) {
    return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: " + err + "\n");
  };
  var createSetContextWarning = function createSetContextWarning2(ctx, props) {
    return (ctx ? ctx + "." : "") + "setContext(props): argument " + props + " is not a plain object";
  };
  var FROZEN_ACTION_ERROR = "You can't put (a.k.a. dispatch from saga) frozen actions.\nWe have to define a special non-enumerable property on those actions for scheduling purposes.\nOtherwise you wouldn't be able to communicate properly between sagas & other subscribers (action ordering would become far less predictable).\nIf you are using redux and you care about this behaviour (frozen actions),\nthen you might want to switch to freezing actions in a middleware rather than in action creator.\nExample implementation:\n\nconst freezeActions = store => next => action => next(Object.freeze(action))\n";
  var createEmptyArray = function createEmptyArray2(n2) {
    return Array.apply(null, new Array(n2));
  };
  var wrapSagaDispatch = function wrapSagaDispatch2(dispatch) {
    return function(action) {
      if (true) {
        check(action, function(ac) {
          return !Object.isFrozen(ac);
        }, FROZEN_ACTION_ERROR);
      }
      return dispatch(Object.defineProperty(action, SAGA_ACTION, {
        value: true
      }));
    };
  };
  var shouldTerminate = function shouldTerminate2(res) {
    return res === TERMINATE;
  };
  var shouldCancel = function shouldCancel2(res) {
    return res === TASK_CANCEL;
  };
  var shouldComplete = function shouldComplete2(res) {
    return shouldTerminate(res) || shouldCancel(res);
  };
  function createAllStyleChildCallbacks(shape, parentCallback) {
    var keys3 = Object.keys(shape);
    var totalCount = keys3.length;
    if (true) {
      check(totalCount, function(c2) {
        return c2 > 0;
      }, "createAllStyleChildCallbacks: get an empty array or object");
    }
    var completedCount = 0;
    var completed;
    var results = array(shape) ? createEmptyArray(totalCount) : {};
    var childCallbacks = {};
    function checkEnd() {
      if (completedCount === totalCount) {
        completed = true;
        parentCallback(results);
      }
    }
    keys3.forEach(function(key) {
      var chCbAtKey = function chCbAtKey2(res, isErr) {
        if (completed) {
          return;
        }
        if (isErr || shouldComplete(res)) {
          parentCallback.cancel();
          parentCallback(res, isErr);
        } else {
          results[key] = res;
          completedCount++;
          checkEnd();
        }
      };
      chCbAtKey.cancel = noop;
      childCallbacks[key] = chCbAtKey;
    });
    parentCallback.cancel = function() {
      if (!completed) {
        completed = true;
        keys3.forEach(function(key) {
          return childCallbacks[key].cancel();
        });
      }
    };
    return childCallbacks;
  }
  function getMetaInfo(fn) {
    return {
      name: fn.name || "anonymous",
      location: getLocation(fn)
    };
  }
  function getLocation(instrumented) {
    return instrumented[SAGA_LOCATION];
  }
  function compose2() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) {
      return function(arg) {
        return arg;
      };
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce(function(a2, b2) {
      return function() {
        return a2(b2.apply(void 0, arguments));
      };
    });
  }
  var BUFFER_OVERFLOW = "Channel's Buffer overflow!";
  var ON_OVERFLOW_THROW = 1;
  var ON_OVERFLOW_SLIDE = 3;
  var ON_OVERFLOW_EXPAND = 4;
  function ringBuffer(limit, overflowAction) {
    if (limit === void 0) {
      limit = 10;
    }
    var arr = new Array(limit);
    var length = 0;
    var pushIndex = 0;
    var popIndex = 0;
    var push2 = function push3(it) {
      arr[pushIndex] = it;
      pushIndex = (pushIndex + 1) % limit;
      length++;
    };
    var take2 = function take3() {
      if (length != 0) {
        var it = arr[popIndex];
        arr[popIndex] = null;
        length--;
        popIndex = (popIndex + 1) % limit;
        return it;
      }
    };
    var flush3 = function flush4() {
      var items = [];
      while (length) {
        items.push(take2());
      }
      return items;
    };
    return {
      isEmpty: function isEmpty() {
        return length == 0;
      },
      put: function put2(it) {
        if (length < limit) {
          push2(it);
        } else {
          var doubledLimit;
          switch (overflowAction) {
            case ON_OVERFLOW_THROW:
              throw new Error(BUFFER_OVERFLOW);
            case ON_OVERFLOW_SLIDE:
              arr[pushIndex] = it;
              pushIndex = (pushIndex + 1) % limit;
              popIndex = pushIndex;
              break;
            case ON_OVERFLOW_EXPAND:
              doubledLimit = 2 * limit;
              arr = flush3();
              length = arr.length;
              pushIndex = arr.length;
              popIndex = 0;
              arr.length = doubledLimit;
              limit = doubledLimit;
              push2(it);
              break;
            default:
          }
        }
      },
      take: take2,
      flush: flush3
    };
  }
  var expanding = function expanding2(initialSize) {
    return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
  };
  var TAKE = "TAKE";
  var PUT = "PUT";
  var ALL = "ALL";
  var RACE = "RACE";
  var CALL = "CALL";
  var CPS = "CPS";
  var FORK = "FORK";
  var JOIN = "JOIN";
  var CANCEL2 = "CANCEL";
  var SELECT = "SELECT";
  var ACTION_CHANNEL = "ACTION_CHANNEL";
  var CANCELLED = "CANCELLED";
  var FLUSH = "FLUSH";
  var GET_CONTEXT = "GET_CONTEXT";
  var SET_CONTEXT = "SET_CONTEXT";
  var TEST_HINT = "\n(HINT: if you are getting these errors in tests, consider using createMockTask from @redux-saga/testing-utils)";
  var makeEffect = function makeEffect2(type, payload) {
    var _ref;
    return _ref = {}, _ref[IO] = true, _ref.combinator = false, _ref.type = type, _ref.payload = payload, _ref;
  };
  var isForkEffect = function isForkEffect2(eff) {
    return effect(eff) && eff.type === FORK;
  };
  var detach = function detach2(eff) {
    if (true) {
      check(eff, isForkEffect, "detach(eff): argument must be a fork effect");
    }
    return makeEffect(FORK, _extends({}, eff.payload, {
      detached: true
    }));
  };
  function take(patternOrChannel, multicastPattern) {
    if (patternOrChannel === void 0) {
      patternOrChannel = "*";
    }
    if (arguments.length) {
      check(arguments[0], notUndef, "take(patternOrChannel): patternOrChannel is undefined");
    }
    if (pattern(patternOrChannel)) {
      if (notUndef(multicastPattern)) {
        console.warn("take(pattern) takes one argument but two were provided. Consider passing an array for listening to several action types");
      }
      return makeEffect(TAKE, {
        pattern: patternOrChannel
      });
    }
    if (multicast(patternOrChannel) && notUndef(multicastPattern) && pattern(multicastPattern)) {
      return makeEffect(TAKE, {
        channel: patternOrChannel,
        pattern: multicastPattern
      });
    }
    if (channel(patternOrChannel)) {
      if (notUndef(multicastPattern)) {
        console.warn("take(channel) takes one argument but two were provided. Second argument is ignored.");
      }
      return makeEffect(TAKE, {
        channel: patternOrChannel
      });
    }
    if (true) {
      throw new Error("take(patternOrChannel): argument " + patternOrChannel + " is not valid channel or a valid pattern");
    }
  }
  function put(channel$1, action) {
    if (true) {
      if (arguments.length > 1) {
        check(channel$1, notUndef, "put(channel, action): argument channel is undefined");
        check(channel$1, channel, "put(channel, action): argument " + channel$1 + " is not a valid channel");
        check(action, notUndef, "put(channel, action): argument action is undefined");
      } else {
        check(channel$1, notUndef, "put(action): argument action is undefined");
      }
    }
    if (undef(action)) {
      action = channel$1;
      channel$1 = void 0;
    }
    return makeEffect(PUT, {
      channel: channel$1,
      action
    });
  }
  function all(effects) {
    var eff = makeEffect(ALL, effects);
    eff.combinator = true;
    return eff;
  }
  function race(effects) {
    var eff = makeEffect(RACE, effects);
    eff.combinator = true;
    return eff;
  }
  var validateFnDescriptor = function validateFnDescriptor2(effectName, fnDescriptor) {
    check(fnDescriptor, notUndef, effectName + ": argument fn is undefined or null");
    if (func(fnDescriptor)) {
      return;
    }
    var context2 = null;
    var fn;
    if (array(fnDescriptor)) {
      context2 = fnDescriptor[0];
      fn = fnDescriptor[1];
      check(fn, notUndef, effectName + ": argument of type [context, fn] has undefined or null `fn`");
    } else if (object(fnDescriptor)) {
      context2 = fnDescriptor.context;
      fn = fnDescriptor.fn;
      check(fn, notUndef, effectName + ": argument of type {context, fn} has undefined or null `fn`");
    } else {
      check(fnDescriptor, func, effectName + ": argument fn is not function");
      return;
    }
    if (context2 && string(fn)) {
      check(context2[fn], func, effectName + ': context arguments has no such method - "' + fn + '"');
      return;
    }
    check(fn, func, effectName + ": unpacked fn argument (from [context, fn] or {context, fn}) is not a function");
  };
  function getFnCallDescriptor(fnDescriptor, args) {
    var context2 = null;
    var fn;
    if (func(fnDescriptor)) {
      fn = fnDescriptor;
    } else {
      if (array(fnDescriptor)) {
        context2 = fnDescriptor[0];
        fn = fnDescriptor[1];
      } else {
        context2 = fnDescriptor.context;
        fn = fnDescriptor.fn;
      }
      if (context2 && string(fn) && func(context2[fn])) {
        fn = context2[fn];
      }
    }
    return {
      context: context2,
      fn,
      args
    };
  }
  var isNotDelayEffect = function isNotDelayEffect2(fn) {
    return fn !== delay;
  };
  function call(fnDescriptor) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (true) {
      var arg0 = typeof args[0] === "number" ? args[0] : "ms";
      check(fnDescriptor, isNotDelayEffect, "instead of writing `yield call(delay, " + arg0 + ")` where delay is an effect from `redux-saga/effects` you should write `yield delay(" + arg0 + ")`");
      validateFnDescriptor("call", fnDescriptor);
    }
    return makeEffect(CALL, getFnCallDescriptor(fnDescriptor, args));
  }
  function fork(fnDescriptor) {
    if (true) {
      validateFnDescriptor("fork", fnDescriptor);
      check(fnDescriptor, function(arg) {
        return !effect(arg);
      }, "fork: argument must not be an effect");
    }
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    return makeEffect(FORK, getFnCallDescriptor(fnDescriptor, args));
  }
  function spawn(fnDescriptor) {
    if (true) {
      validateFnDescriptor("spawn", fnDescriptor);
    }
    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      args[_key4 - 1] = arguments[_key4];
    }
    return detach(fork.apply(void 0, [fnDescriptor].concat(args)));
  }
  function cancel(taskOrTasks) {
    if (taskOrTasks === void 0) {
      taskOrTasks = SELF_CANCELLATION;
    }
    if (true) {
      if (arguments.length > 1) {
        throw new Error("cancel(...tasks) is not supported any more. Please use cancel([...tasks]) to cancel multiple tasks.");
      }
      if (array(taskOrTasks)) {
        taskOrTasks.forEach(function(t2) {
          check(t2, task, "cancel([...tasks]): argument " + t2 + " is not a valid Task object " + TEST_HINT);
        });
      } else if (taskOrTasks !== SELF_CANCELLATION && notUndef(taskOrTasks)) {
        check(taskOrTasks, task, "cancel(task): argument " + taskOrTasks + " is not a valid Task object " + TEST_HINT);
      }
    }
    return makeEffect(CANCEL2, taskOrTasks);
  }
  function select(selector) {
    if (selector === void 0) {
      selector = identity;
    }
    for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      args[_key5 - 1] = arguments[_key5];
    }
    if (arguments.length) {
      check(arguments[0], notUndef, "select(selector, [...]): argument selector is undefined");
      check(selector, func, "select(selector, [...]): argument " + selector + " is not a function");
    }
    return makeEffect(SELECT, {
      selector,
      args
    });
  }
  function getContext2(prop) {
    if (true) {
      check(prop, string, "getContext(prop): argument " + prop + " is not a string");
    }
    return makeEffect(GET_CONTEXT, prop);
  }
  var delay = /* @__PURE__ */ call.bind(null, redux_saga_delay_p_esm_default);

  // node_modules/@redux-saga/deferred/dist/redux-saga-deferred.esm.js
  function deferred() {
    var def = {};
    def.promise = new Promise(function(resolve, reject) {
      def.resolve = resolve;
      def.reject = reject;
    });
    return def;
  }
  var redux_saga_deferred_esm_default = deferred;

  // node_modules/@redux-saga/core/dist/redux-saga-core.esm.js
  var queue = [];
  var semaphore = 0;
  function exec(task3) {
    try {
      suspend();
      task3();
    } finally {
      release();
    }
  }
  function asap(task3) {
    queue.push(task3);
    if (!semaphore) {
      suspend();
      flush();
    }
  }
  function immediately(task3) {
    try {
      suspend();
      return task3();
    } finally {
      flush();
    }
  }
  function suspend() {
    semaphore++;
  }
  function release() {
    semaphore--;
  }
  function flush() {
    release();
    var task3;
    while (!semaphore && (task3 = queue.shift()) !== void 0) {
      exec(task3);
    }
  }
  var array2 = function array3(patterns) {
    return function(input) {
      return patterns.some(function(p) {
        return matcher(p)(input);
      });
    };
  };
  var predicate = function predicate2(_predicate) {
    return function(input) {
      return _predicate(input);
    };
  };
  var string3 = function string4(pattern3) {
    return function(input) {
      return input.type === String(pattern3);
    };
  };
  var symbol3 = function symbol4(pattern3) {
    return function(input) {
      return input.type === pattern3;
    };
  };
  var wildcard = function wildcard2() {
    return kTrue;
  };
  function matcher(pattern3) {
    var matcherCreator = pattern3 === "*" ? wildcard : string(pattern3) ? string3 : array(pattern3) ? array2 : stringableFunc(pattern3) ? string3 : func(pattern3) ? predicate : symbol(pattern3) ? symbol3 : null;
    if (matcherCreator === null) {
      throw new Error("invalid pattern: " + pattern3);
    }
    return matcherCreator(pattern3);
  }
  var END = {
    type: CHANNEL_END_TYPE
  };
  var isEnd = function isEnd2(a2) {
    return a2 && a2.type === CHANNEL_END_TYPE;
  };
  var CLOSED_CHANNEL_WITH_TAKERS = "Cannot have a closed channel with pending takers";
  var INVALID_BUFFER = "invalid buffer passed to channel factory function";
  var UNDEFINED_INPUT_ERROR = "Saga or channel was provided with an undefined action\nHints:\n  - check that your Action Creator returns a non-undefined value\n  - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners";
  function channel3(buffer$1) {
    if (buffer$1 === void 0) {
      buffer$1 = expanding();
    }
    var closed = false;
    var takers = [];
    if (true) {
      check(buffer$1, buffer, INVALID_BUFFER);
    }
    function checkForbiddenStates() {
      if (closed && takers.length) {
        throw internalErr(CLOSED_CHANNEL_WITH_TAKERS);
      }
      if (takers.length && !buffer$1.isEmpty()) {
        throw internalErr("Cannot have pending takers with non empty buffer");
      }
    }
    function put2(input) {
      if (true) {
        checkForbiddenStates();
        check(input, notUndef, UNDEFINED_INPUT_ERROR);
      }
      if (closed) {
        return;
      }
      if (takers.length === 0) {
        return buffer$1.put(input);
      }
      var cb = takers.shift();
      cb(input);
    }
    function take2(cb) {
      if (true) {
        checkForbiddenStates();
        check(cb, func, "channel.take's callback must be a function");
      }
      if (closed && buffer$1.isEmpty()) {
        cb(END);
      } else if (!buffer$1.isEmpty()) {
        cb(buffer$1.take());
      } else {
        takers.push(cb);
        cb.cancel = function() {
          remove(takers, cb);
        };
      }
    }
    function flush3(cb) {
      if (true) {
        checkForbiddenStates();
        check(cb, func, "channel.flush' callback must be a function");
      }
      if (closed && buffer$1.isEmpty()) {
        cb(END);
        return;
      }
      cb(buffer$1.flush());
    }
    function close() {
      if (true) {
        checkForbiddenStates();
      }
      if (closed) {
        return;
      }
      closed = true;
      var arr = takers;
      takers = [];
      for (var i2 = 0, len = arr.length; i2 < len; i2++) {
        var taker = arr[i2];
        taker(END);
      }
    }
    return {
      take: take2,
      put: put2,
      flush: flush3,
      close
    };
  }
  function multicastChannel() {
    var _ref;
    var closed = false;
    var currentTakers = [];
    var nextTakers = currentTakers;
    function checkForbiddenStates() {
      if (closed && nextTakers.length) {
        throw internalErr(CLOSED_CHANNEL_WITH_TAKERS);
      }
    }
    var ensureCanMutateNextTakers = function ensureCanMutateNextTakers2() {
      if (nextTakers !== currentTakers) {
        return;
      }
      nextTakers = currentTakers.slice();
    };
    var close = function close2() {
      if (true) {
        checkForbiddenStates();
      }
      closed = true;
      var takers = currentTakers = nextTakers;
      nextTakers = [];
      takers.forEach(function(taker) {
        taker(END);
      });
    };
    return _ref = {}, _ref[MULTICAST] = true, _ref.put = function put2(input) {
      if (true) {
        checkForbiddenStates();
        check(input, notUndef, UNDEFINED_INPUT_ERROR);
      }
      if (closed) {
        return;
      }
      if (isEnd(input)) {
        close();
        return;
      }
      var takers = currentTakers = nextTakers;
      for (var i2 = 0, len = takers.length; i2 < len; i2++) {
        var taker = takers[i2];
        if (taker[MATCH](input)) {
          taker.cancel();
          taker(input);
        }
      }
    }, _ref.take = function take2(cb, matcher2) {
      if (matcher2 === void 0) {
        matcher2 = wildcard;
      }
      if (true) {
        checkForbiddenStates();
      }
      if (closed) {
        cb(END);
        return;
      }
      cb[MATCH] = matcher2;
      ensureCanMutateNextTakers();
      nextTakers.push(cb);
      cb.cancel = once(function() {
        ensureCanMutateNextTakers();
        remove(nextTakers, cb);
      });
    }, _ref.close = close, _ref;
  }
  function stdChannel() {
    var chan = multicastChannel();
    var put2 = chan.put;
    chan.put = function(input) {
      if (input[SAGA_ACTION]) {
        put2(input);
        return;
      }
      asap(function() {
        put2(input);
      });
    };
    return chan;
  }
  var RUNNING = 0;
  var CANCELLED2 = 1;
  var ABORTED = 2;
  var DONE = 3;
  function resolvePromise(promise3, cb) {
    var cancelPromise = promise3[CANCEL];
    if (func(cancelPromise)) {
      cb.cancel = cancelPromise;
    }
    promise3.then(cb, function(error) {
      cb(error, true);
    });
  }
  var current = 0;
  var nextSagaId = function() {
    return ++current;
  };
  var _effectRunnerMap;
  function getIteratorMetaInfo(iterator4, fn) {
    if (iterator4.isSagaIterator) {
      return {
        name: iterator4.meta.name
      };
    }
    return getMetaInfo(fn);
  }
  function createTaskIterator(_ref) {
    var context2 = _ref.context, fn = _ref.fn, args = _ref.args;
    try {
      var result = fn.apply(context2, args);
      if (iterator(result)) {
        return result;
      }
      var resolved = false;
      var next = function next2(arg) {
        if (!resolved) {
          resolved = true;
          return {
            value: result,
            done: !promise(result)
          };
        } else {
          return {
            value: arg,
            done: true
          };
        }
      };
      return makeIterator(next);
    } catch (err) {
      return makeIterator(function() {
        throw err;
      });
    }
  }
  function runPutEffect(env, _ref2, cb) {
    var channel4 = _ref2.channel, action = _ref2.action, resolve = _ref2.resolve;
    asap(function() {
      var result;
      try {
        result = (channel4 ? channel4.put : env.dispatch)(action);
      } catch (error) {
        cb(error, true);
        return;
      }
      if (resolve && promise(result)) {
        resolvePromise(result, cb);
      } else {
        cb(result);
      }
    });
  }
  function runTakeEffect(env, _ref3, cb) {
    var _ref3$channel = _ref3.channel, channel4 = _ref3$channel === void 0 ? env.channel : _ref3$channel, pattern3 = _ref3.pattern, maybe = _ref3.maybe;
    var takeCb = function takeCb2(input) {
      if (input instanceof Error) {
        cb(input, true);
        return;
      }
      if (isEnd(input) && !maybe) {
        cb(TERMINATE);
        return;
      }
      cb(input);
    };
    try {
      channel4.take(takeCb, notUndef(pattern3) ? matcher(pattern3) : null);
    } catch (err) {
      cb(err, true);
      return;
    }
    cb.cancel = takeCb.cancel;
  }
  function runCallEffect(env, _ref4, cb, _ref5) {
    var context2 = _ref4.context, fn = _ref4.fn, args = _ref4.args;
    var task3 = _ref5.task;
    try {
      var result = fn.apply(context2, args);
      if (promise(result)) {
        resolvePromise(result, cb);
        return;
      }
      if (iterator(result)) {
        proc(
          env,
          result,
          task3.context,
          current,
          getMetaInfo(fn),
          /* isRoot */
          false,
          cb
        );
        return;
      }
      cb(result);
    } catch (error) {
      cb(error, true);
    }
  }
  function runCPSEffect(env, _ref6, cb) {
    var context2 = _ref6.context, fn = _ref6.fn, args = _ref6.args;
    try {
      var cpsCb = function cpsCb2(err, res) {
        if (undef(err)) {
          cb(res);
        } else {
          cb(err, true);
        }
      };
      fn.apply(context2, args.concat(cpsCb));
      if (cpsCb.cancel) {
        cb.cancel = cpsCb.cancel;
      }
    } catch (error) {
      cb(error, true);
    }
  }
  function runForkEffect(env, _ref7, cb, _ref8) {
    var context2 = _ref7.context, fn = _ref7.fn, args = _ref7.args, detached = _ref7.detached;
    var parent = _ref8.task;
    var taskIterator = createTaskIterator({
      context: context2,
      fn,
      args
    });
    var meta = getIteratorMetaInfo(taskIterator, fn);
    immediately(function() {
      var child = proc(env, taskIterator, parent.context, current, meta, detached, void 0);
      if (detached) {
        cb(child);
      } else {
        if (child.isRunning()) {
          parent.queue.addTask(child);
          cb(child);
        } else if (child.isAborted()) {
          parent.queue.abort(child.error());
        } else {
          cb(child);
        }
      }
    });
  }
  function runJoinEffect(env, taskOrTasks, cb, _ref9) {
    var task3 = _ref9.task;
    var joinSingleTask = function joinSingleTask2(taskToJoin, cb2) {
      if (taskToJoin.isRunning()) {
        var joiner = {
          task: task3,
          cb: cb2
        };
        cb2.cancel = function() {
          if (taskToJoin.isRunning()) remove(taskToJoin.joiners, joiner);
        };
        taskToJoin.joiners.push(joiner);
      } else {
        if (taskToJoin.isAborted()) {
          cb2(taskToJoin.error(), true);
        } else {
          cb2(taskToJoin.result());
        }
      }
    };
    if (array(taskOrTasks)) {
      if (taskOrTasks.length === 0) {
        cb([]);
        return;
      }
      var childCallbacks = createAllStyleChildCallbacks(taskOrTasks, cb);
      taskOrTasks.forEach(function(t2, i2) {
        joinSingleTask(t2, childCallbacks[i2]);
      });
    } else {
      joinSingleTask(taskOrTasks, cb);
    }
  }
  function cancelSingleTask(taskToCancel) {
    if (taskToCancel.isRunning()) {
      taskToCancel.cancel();
    }
  }
  function runCancelEffect(env, taskOrTasks, cb, _ref10) {
    var task3 = _ref10.task;
    if (taskOrTasks === SELF_CANCELLATION) {
      cancelSingleTask(task3);
    } else if (array(taskOrTasks)) {
      taskOrTasks.forEach(cancelSingleTask);
    } else {
      cancelSingleTask(taskOrTasks);
    }
    cb();
  }
  function runAllEffect(env, effects, cb, _ref11) {
    var digestEffect = _ref11.digestEffect;
    var effectId = current;
    var keys3 = Object.keys(effects);
    if (keys3.length === 0) {
      cb(array(effects) ? [] : {});
      return;
    }
    var childCallbacks = createAllStyleChildCallbacks(effects, cb);
    keys3.forEach(function(key) {
      digestEffect(effects[key], effectId, childCallbacks[key], key);
    });
  }
  function runRaceEffect(env, effects, cb, _ref12) {
    var digestEffect = _ref12.digestEffect;
    var effectId = current;
    var keys3 = Object.keys(effects);
    var response = array(effects) ? createEmptyArray(keys3.length) : {};
    var childCbs = {};
    var completed = false;
    keys3.forEach(function(key) {
      var chCbAtKey = function chCbAtKey2(res, isErr) {
        if (completed) {
          return;
        }
        if (isErr || shouldComplete(res)) {
          cb.cancel();
          cb(res, isErr);
        } else {
          cb.cancel();
          completed = true;
          response[key] = res;
          cb(response);
        }
      };
      chCbAtKey.cancel = noop;
      childCbs[key] = chCbAtKey;
    });
    cb.cancel = function() {
      if (!completed) {
        completed = true;
        keys3.forEach(function(key) {
          return childCbs[key].cancel();
        });
      }
    };
    keys3.forEach(function(key) {
      if (completed) {
        return;
      }
      digestEffect(effects[key], effectId, childCbs[key], key);
    });
  }
  function runSelectEffect(env, _ref13, cb) {
    var selector = _ref13.selector, args = _ref13.args;
    try {
      var state = selector.apply(void 0, [env.getState()].concat(args));
      cb(state);
    } catch (error) {
      cb(error, true);
    }
  }
  function runChannelEffect(env, _ref14, cb) {
    var pattern3 = _ref14.pattern, buffer4 = _ref14.buffer;
    var chan = channel3(buffer4);
    var match2 = matcher(pattern3);
    var taker = function taker2(action) {
      if (!isEnd(action)) {
        env.channel.take(taker2, match2);
      }
      chan.put(action);
    };
    var close = chan.close;
    chan.close = function() {
      taker.cancel();
      close();
    };
    env.channel.take(taker, match2);
    cb(chan);
  }
  function runCancelledEffect(env, data2, cb, _ref15) {
    var task3 = _ref15.task;
    cb(task3.isCancelled());
  }
  function runFlushEffect(env, channel4, cb) {
    channel4.flush(cb);
  }
  function runGetContextEffect(env, prop, cb, _ref16) {
    var task3 = _ref16.task;
    cb(task3.context[prop]);
  }
  function runSetContextEffect(env, props, cb, _ref17) {
    var task3 = _ref17.task;
    assignWithSymbols(task3.context, props);
    cb();
  }
  var effectRunnerMap = (_effectRunnerMap = {}, _effectRunnerMap[TAKE] = runTakeEffect, _effectRunnerMap[PUT] = runPutEffect, _effectRunnerMap[ALL] = runAllEffect, _effectRunnerMap[RACE] = runRaceEffect, _effectRunnerMap[CALL] = runCallEffect, _effectRunnerMap[CPS] = runCPSEffect, _effectRunnerMap[FORK] = runForkEffect, _effectRunnerMap[JOIN] = runJoinEffect, _effectRunnerMap[CANCEL2] = runCancelEffect, _effectRunnerMap[SELECT] = runSelectEffect, _effectRunnerMap[ACTION_CHANNEL] = runChannelEffect, _effectRunnerMap[CANCELLED] = runCancelledEffect, _effectRunnerMap[FLUSH] = runFlushEffect, _effectRunnerMap[GET_CONTEXT] = runGetContextEffect, _effectRunnerMap[SET_CONTEXT] = runSetContextEffect, _effectRunnerMap);
  function forkQueue(mainTask, onAbort, cont) {
    var tasks = [];
    var result;
    var completed = false;
    addTask(mainTask);
    var getTasks = function getTasks2() {
      return tasks;
    };
    function abort(err) {
      onAbort();
      cancelAll();
      cont(err, true);
    }
    function addTask(task3) {
      tasks.push(task3);
      task3.cont = function(res, isErr) {
        if (completed) {
          return;
        }
        remove(tasks, task3);
        task3.cont = noop;
        if (isErr) {
          abort(res);
        } else {
          if (task3 === mainTask) {
            result = res;
          }
          if (!tasks.length) {
            completed = true;
            cont(result);
          }
        }
      };
    }
    function cancelAll() {
      if (completed) {
        return;
      }
      completed = true;
      tasks.forEach(function(t2) {
        t2.cont = noop;
        t2.cancel();
      });
      tasks = [];
    }
    return {
      addTask,
      cancelAll,
      abort,
      getTasks
    };
  }
  function formatLocation(fileName, lineNumber) {
    return fileName + "?" + lineNumber;
  }
  function effectLocationAsString(effect3) {
    var location = getLocation(effect3);
    if (location) {
      var code = location.code, fileName = location.fileName, lineNumber = location.lineNumber;
      var source = code + "  " + formatLocation(fileName, lineNumber);
      return source;
    }
    return "";
  }
  function sagaLocationAsString(sagaMeta) {
    var name = sagaMeta.name, location = sagaMeta.location;
    if (location) {
      return name + "  " + formatLocation(location.fileName, location.lineNumber);
    }
    return name;
  }
  function cancelledTasksAsString(sagaStack2) {
    var cancelledTasks = flatMap(function(i2) {
      return i2.cancelledTasks;
    }, sagaStack2);
    if (!cancelledTasks.length) {
      return "";
    }
    return ["Tasks cancelled due to error:"].concat(cancelledTasks).join("\n");
  }
  var crashedEffect = null;
  var sagaStack = [];
  var addSagaFrame = function addSagaFrame2(frame) {
    frame.crashedEffect = crashedEffect;
    sagaStack.push(frame);
  };
  var clear = function clear2() {
    crashedEffect = null;
    sagaStack.length = 0;
  };
  var setCrashedEffect = function setCrashedEffect2(effect3) {
    crashedEffect = effect3;
  };
  var toString = function toString2() {
    var firstSaga = sagaStack[0], otherSagas = sagaStack.slice(1);
    var crashedEffectLocation = firstSaga.crashedEffect ? effectLocationAsString(firstSaga.crashedEffect) : null;
    var errorMessage = "The above error occurred in task " + sagaLocationAsString(firstSaga.meta) + (crashedEffectLocation ? " \n when executing effect " + crashedEffectLocation : "");
    return [errorMessage].concat(otherSagas.map(function(s2) {
      return "    created by " + sagaLocationAsString(s2.meta);
    }), [cancelledTasksAsString(sagaStack)]).join("\n");
  };
  function newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont) {
    var _task;
    if (cont === void 0) {
      cont = noop;
    }
    var status = RUNNING;
    var taskResult;
    var taskError;
    var deferredEnd = null;
    var cancelledDueToErrorTasks = [];
    var context2 = Object.create(parentContext);
    var queue2 = forkQueue(mainTask, function onAbort() {
      cancelledDueToErrorTasks.push.apply(cancelledDueToErrorTasks, queue2.getTasks().map(function(t2) {
        return t2.meta.name;
      }));
    }, end);
    function cancel2() {
      if (status === RUNNING) {
        status = CANCELLED2;
        queue2.cancelAll();
        end(TASK_CANCEL, false);
      }
    }
    function end(result, isErr) {
      if (!isErr) {
        if (result === TASK_CANCEL) {
          status = CANCELLED2;
        } else if (status !== CANCELLED2) {
          status = DONE;
        }
        taskResult = result;
        deferredEnd && deferredEnd.resolve(result);
      } else {
        status = ABORTED;
        addSagaFrame({
          meta,
          cancelledTasks: cancelledDueToErrorTasks
        });
        if (task3.isRoot) {
          var sagaStack2 = toString();
          clear();
          env.onError(result, {
            sagaStack: sagaStack2
          });
        }
        taskError = result;
        deferredEnd && deferredEnd.reject(result);
      }
      task3.cont(result, isErr);
      task3.joiners.forEach(function(joiner) {
        joiner.cb(result, isErr);
      });
      task3.joiners = null;
    }
    function setContext2(props) {
      if (true) {
        check(props, object, createSetContextWarning("task", props));
      }
      assignWithSymbols(context2, props);
    }
    function toPromise() {
      if (deferredEnd) {
        return deferredEnd.promise;
      }
      deferredEnd = redux_saga_deferred_esm_default();
      if (status === ABORTED) {
        deferredEnd.reject(taskError);
      } else if (status !== RUNNING) {
        deferredEnd.resolve(taskResult);
      }
      return deferredEnd.promise;
    }
    var task3 = (_task = {}, _task[TASK] = true, _task.id = parentEffectId, _task.meta = meta, _task.isRoot = isRoot, _task.context = context2, _task.joiners = [], _task.queue = queue2, _task.cancel = cancel2, _task.cont = cont, _task.end = end, _task.setContext = setContext2, _task.toPromise = toPromise, _task.isRunning = function isRunning() {
      return status === RUNNING;
    }, _task.isCancelled = function isCancelled() {
      return status === CANCELLED2 || status === RUNNING && mainTask.status === CANCELLED2;
    }, _task.isAborted = function isAborted() {
      return status === ABORTED;
    }, _task.result = function result() {
      return taskResult;
    }, _task.error = function error() {
      return taskError;
    }, _task);
    return task3;
  }
  function proc(env, iterator$1, parentContext, parentEffectId, meta, isRoot, cont) {
    if (iterator$1[asyncIteratorSymbol]) {
      throw new Error("redux-saga doesn't support async generators, please use only regular ones");
    }
    var finalRunEffect = env.finalizeRunEffect(runEffect);
    next.cancel = noop;
    var mainTask = {
      meta,
      cancel: cancelMain,
      status: RUNNING
    };
    var task3 = newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont);
    var executingContext = {
      task: task3,
      digestEffect
    };
    function cancelMain() {
      if (mainTask.status === RUNNING) {
        mainTask.status = CANCELLED2;
        next(TASK_CANCEL);
      }
    }
    if (cont) {
      cont.cancel = task3.cancel;
    }
    next();
    return task3;
    function next(arg, isErr) {
      try {
        var result;
        if (isErr) {
          result = iterator$1.throw(arg);
          clear();
        } else if (shouldCancel(arg)) {
          mainTask.status = CANCELLED2;
          next.cancel();
          result = func(iterator$1.return) ? iterator$1.return(TASK_CANCEL) : {
            done: true,
            value: TASK_CANCEL
          };
        } else if (shouldTerminate(arg)) {
          result = func(iterator$1.return) ? iterator$1.return() : {
            done: true
          };
        } else {
          result = iterator$1.next(arg);
        }
        if (!result.done) {
          digestEffect(result.value, parentEffectId, next);
        } else {
          if (mainTask.status !== CANCELLED2) {
            mainTask.status = DONE;
          }
          mainTask.cont(result.value);
        }
      } catch (error) {
        if (mainTask.status === CANCELLED2) {
          throw error;
        }
        mainTask.status = ABORTED;
        mainTask.cont(error, true);
      }
    }
    function runEffect(effect3, effectId, currCb) {
      if (promise(effect3)) {
        resolvePromise(effect3, currCb);
      } else if (iterator(effect3)) {
        proc(
          env,
          effect3,
          task3.context,
          effectId,
          meta,
          /* isRoot */
          false,
          currCb
        );
      } else if (effect3 && effect3[IO]) {
        var effectRunner = effectRunnerMap[effect3.type];
        effectRunner(env, effect3.payload, currCb, executingContext);
      } else {
        currCb(effect3);
      }
    }
    function digestEffect(effect3, parentEffectId2, cb, label) {
      if (label === void 0) {
        label = "";
      }
      var effectId = nextSagaId();
      env.sagaMonitor && env.sagaMonitor.effectTriggered({
        effectId,
        parentEffectId: parentEffectId2,
        label,
        effect: effect3
      });
      var effectSettled;
      function currCb(res, isErr) {
        if (effectSettled) {
          return;
        }
        effectSettled = true;
        cb.cancel = noop;
        if (env.sagaMonitor) {
          if (isErr) {
            env.sagaMonitor.effectRejected(effectId, res);
          } else {
            env.sagaMonitor.effectResolved(effectId, res);
          }
        }
        if (isErr) {
          setCrashedEffect(effect3);
        }
        cb(res, isErr);
      }
      currCb.cancel = noop;
      cb.cancel = function() {
        if (effectSettled) {
          return;
        }
        effectSettled = true;
        currCb.cancel();
        currCb.cancel = noop;
        env.sagaMonitor && env.sagaMonitor.effectCancelled(effectId);
      };
      finalRunEffect(effect3, effectId, currCb);
    }
  }
  var RUN_SAGA_SIGNATURE = "runSaga(options, saga, ...args)";
  var NON_GENERATOR_ERR = RUN_SAGA_SIGNATURE + ": saga argument must be a Generator function!";
  function runSaga(_ref, saga2) {
    var _ref$channel = _ref.channel, channel4 = _ref$channel === void 0 ? stdChannel() : _ref$channel, dispatch = _ref.dispatch, getState = _ref.getState, _ref$context = _ref.context, context2 = _ref$context === void 0 ? {} : _ref$context, sagaMonitor = _ref.sagaMonitor, effectMiddlewares = _ref.effectMiddlewares, _ref$onError = _ref.onError, onError = _ref$onError === void 0 ? logError : _ref$onError;
    if (true) {
      check(saga2, func, NON_GENERATOR_ERR);
    }
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    var iterator$1 = saga2.apply(void 0, args);
    if (true) {
      check(iterator$1, iterator, NON_GENERATOR_ERR);
    }
    var effectId = nextSagaId();
    if (sagaMonitor) {
      sagaMonitor.rootSagaStarted = sagaMonitor.rootSagaStarted || noop;
      sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || noop;
      sagaMonitor.effectResolved = sagaMonitor.effectResolved || noop;
      sagaMonitor.effectRejected = sagaMonitor.effectRejected || noop;
      sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || noop;
      sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || noop;
      sagaMonitor.rootSagaStarted({
        effectId,
        saga: saga2,
        args
      });
    }
    if (true) {
      if (notUndef(dispatch)) {
        check(dispatch, func, "dispatch must be a function");
      }
      if (notUndef(getState)) {
        check(getState, func, "getState must be a function");
      }
      if (notUndef(effectMiddlewares)) {
        var MIDDLEWARE_TYPE_ERROR = "effectMiddlewares must be an array of functions";
        check(effectMiddlewares, array, MIDDLEWARE_TYPE_ERROR);
        effectMiddlewares.forEach(function(effectMiddleware) {
          return check(effectMiddleware, func, MIDDLEWARE_TYPE_ERROR);
        });
      }
      check(onError, func, "onError passed to the redux-saga is not a function!");
    }
    var finalizeRunEffect;
    if (effectMiddlewares) {
      var middleware = compose2.apply(void 0, effectMiddlewares);
      finalizeRunEffect = function finalizeRunEffect2(runEffect) {
        return function(effect3, effectId2, currCb) {
          var plainRunEffect = function plainRunEffect2(eff) {
            return runEffect(eff, effectId2, currCb);
          };
          return middleware(plainRunEffect)(effect3);
        };
      };
    } else {
      finalizeRunEffect = identity;
    }
    var env = {
      channel: channel4,
      dispatch: wrapSagaDispatch(dispatch),
      getState,
      sagaMonitor,
      onError,
      finalizeRunEffect
    };
    return immediately(function() {
      var task3 = proc(
        env,
        iterator$1,
        context2,
        effectId,
        getMetaInfo(saga2),
        /* isRoot */
        true,
        void 0
      );
      if (sagaMonitor) {
        sagaMonitor.effectResolved(effectId, task3);
      }
      return task3;
    });
  }
  function sagaMiddlewareFactory(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, _ref$context = _ref.context, context2 = _ref$context === void 0 ? {} : _ref$context, _ref$channel = _ref.channel, channel4 = _ref$channel === void 0 ? stdChannel() : _ref$channel, sagaMonitor = _ref.sagaMonitor, options = _objectWithoutPropertiesLoose(_ref, ["context", "channel", "sagaMonitor"]);
    var boundRunSaga;
    if (true) {
      check(channel4, channel, "options.channel passed to the Saga middleware is not a channel");
    }
    function sagaMiddleware(_ref2) {
      var getState = _ref2.getState, dispatch = _ref2.dispatch;
      boundRunSaga = runSaga.bind(null, _extends({}, options, {
        context: context2,
        channel: channel4,
        dispatch,
        getState,
        sagaMonitor
      }));
      return function(next) {
        return function(action) {
          if (sagaMonitor && sagaMonitor.actionDispatched) {
            sagaMonitor.actionDispatched(action);
          }
          var result = next(action);
          channel4.put(action);
          return result;
        };
      };
    }
    sagaMiddleware.run = function() {
      if (!boundRunSaga) {
        throw new Error("Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware");
      }
      return boundRunSaga.apply(void 0, arguments);
    };
    sagaMiddleware.setContext = function(props) {
      if (true) {
        check(props, object, createSetContextWarning("sagaMiddleware", props));
      }
      assignWithSymbols(context2, props);
    };
    return sagaMiddleware;
  }
  var redux_saga_core_esm_default = sagaMiddlewareFactory;

  // node_modules/redux-saga/dist/redux-saga-core-npm-proxy.esm.js
  var redux_saga_core_npm_proxy_esm_default = redux_saga_core_esm_default;

  // node_modules/redux-thunk/es/index.js
  function createThunkMiddleware(extraArgument) {
    var middleware = function middleware2(_ref) {
      var dispatch = _ref.dispatch, getState = _ref.getState;
      return function(next) {
        return function(action) {
          if (typeof action === "function") {
            return action(dispatch, getState, extraArgument);
          }
          return next(action);
        };
      };
    };
    return middleware;
  }
  var thunk = createThunkMiddleware();
  thunk.withExtraArgument = createThunkMiddleware;
  var es_default = thunk;

  // node_modules/@ls1intum/apollon/lib/es6/services/layouter/layouter-repository.js
  var LayouterRepository = {
    layout: () => ({
      type: "@@layouter/LAYOUT",
      payload: {},
      undoable: false
    })
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/assessment/assessment-reducer.js
  var initialState8 = {};
  var AssessmentReducer = (state = initialState8, action) => {
    switch (action.type) {
      case "@@element/ASSESS": {
        const { payload } = action;
        return {
          ...state,
          [payload.element]: payload.assessment
        };
      }
      case "@@assessment/DELETE": {
        const { payload } = action;
        const newState = { ...state };
        delete newState[payload.element];
        return newState;
      }
      case "@@element/DELETE": {
        const { payload } = action;
        return Object.keys(state).reduce((assessments, id2) => ({
          ...assessments,
          ...!payload.ids.includes(id2) && { [id2]: state[id2] }
        }), {});
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/editor/editor-reducer.js
  var initialState9 = {
    readonly: false,
    colorEnabled: false,
    enablePopups: true,
    enableCopyPasteToClipboard: false,
    mode: ApollonMode.Exporting,
    view: "Modelling",
    zoomFactor: 1,
    selectionBoxActive: false,
    features: {
      hoverable: true,
      selectable: true,
      movable: true,
      resizable: true,
      connectable: true,
      updatable: true,
      droppable: true,
      alternativePortVisualization: false
    }
  };
  var EditorReducer = (state = initialState9, action) => {
    switch (action.type) {
      case "@@element/CHANGE_VIEW": {
        const { payload } = action;
        return {
          ...state,
          view: payload.view
        };
      }
      case "@@element/SET_ZOOM_FACTOR": {
        const { payload } = action;
        return {
          ...state,
          zoomFactor: payload.zoomFactor
        };
      }
      case "@@element/SET_SELECTION_BOX_ACTIVE": {
        const { payload } = action;
        return {
          ...state,
          selectionBoxActive: payload.selectionBoxActive
        };
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-container/uml-container-reducer.js
  var UMLContainerReducer = (state = {}, action) => {
    switch (action.type) {
      case "@@element/container/APPEND": {
        const { payload } = action;
        const container = state[payload.owner];
        const elementState = {
          ...state,
          ...container && UMLContainer.isUMLContainer(container) && {
            [container.id]: {
              ...container,
              ownedElements: [
                ...new Set(
                  // TODO: find better solution for this
                  // hacky: create new Element of Container type to reorder children. This must be done, because js prototype is lost in redux state
                  new UMLElements[container.type]().reorderChildren([...container.ownedElements, ...payload.ids].map((id2) => state[id2]))
                )
              ]
            }
          }
        };
        const reduce2 = (elements, id2) => {
          const element = elements[id2];
          let position = new Point(element.bounds.x, element.bounds.y);
          let current2 = element.owner && elements[element.owner];
          while (current2) {
            position = position.add(current2.bounds.x, current2.bounds.y);
            current2 = current2.owner ? elements[current2.owner] : null;
          }
          current2 = container;
          while (current2) {
            position = position.subtract(current2.bounds.x, current2.bounds.y);
            current2 = current2.owner ? elements[current2.owner] : null;
          }
          return {
            ...elements,
            [id2]: {
              ...elements[id2],
              owner: container ? container.id : null,
              bounds: {
                ...element.bounds,
                ...position
              }
            }
          };
        };
        return payload.ids.filter((id2) => state[id2]).reduce(reduce2, elementState);
      }
      case "@@element/container/REMOVE": {
        const { payload } = action;
        const ids = [
          ...new Set(payload.ids.filter((id2) => state[id2] && state[id2].owner).map((id2) => state[id2].owner).filter(notEmpty))
        ];
        return ids.reduce((elements, id2) => ({
          ...elements,
          [id2]: {
            ...state[id2],
            ownedElements: state[id2].ownedElements.filter((element) => !payload.ids.includes(element))
          }
        }), state);
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-diagram/uml-diagram-reducer.js
  var UMLDiagramReducer = (state = new UMLDiagram(), action) => {
    switch (action.type) {
      case "@@element/diagram/APPEND": {
        const { payload } = action;
        return {
          ...state,
          ownedRelationships: [.../* @__PURE__ */ new Set([...payload.ids, ...state.ownedRelationships])].reverse()
        };
      }
      case "@@element/container/APPEND": {
        const { payload } = action;
        if (state.id !== payload.owner) {
          return {
            ...state,
            ownedElements: state.ownedElements.filter((id2) => !payload.ids.includes(id2))
          };
        }
        return {
          ...state,
          ownedElements: [.../* @__PURE__ */ new Set([...state.ownedElements, ...payload.ids])]
        };
      }
      case "@@element/diagram/BRING_TO_FRONT": {
        const { ids } = action.payload;
        return {
          ...state,
          ownedElements: [...state.ownedElements].filter((id2) => !ids.includes(id2)).concat(ids)
        };
      }
      case "@@element/container/REMOVE": {
        const { payload } = action;
        return {
          ...state,
          ownedElements: state.ownedElements.filter((id2) => !payload.ids.includes(id2)),
          ownedRelationships: state.ownedRelationships.filter((id2) => !payload.ids.includes(id2))
        };
      }
      case "@@element/resizable/RESIZE": {
        const { payload } = action;
        if (!payload.ids.includes(state.id)) {
          break;
        }
        return {
          ...state,
          bounds: {
            ...state.bounds,
            width: state.bounds.width + payload.delta.width,
            height: state.bounds.height + payload.delta.height
          },
          resizeFrom: payload.resizeFrom
        };
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/connectable/connectable-reducer.js
  var ConnectableReducer = (state = [], action) => {
    switch (action.type) {
      case "@@element/connectable/START": {
        const { payload } = action;
        return [.../* @__PURE__ */ new Set([...payload.ports, ...state])];
      }
      case "@@element/connectable/END": {
        const { payload } = action;
        return state.filter((port) => !payload.ports.includes(port));
      }
      case "@@element/DELETE": {
        const { payload } = action;
        return state.reduce((ports, port) => ({
          ...ports,
          ...!payload.ids.includes(port.element) && port
        }), []);
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/hoverable/hoverable-reducer.js
  var HoverableReducer = (state = [], action) => {
    switch (action.type) {
      case "@@element/hoverable/HOVER": {
        const { payload } = action;
        return [.../* @__PURE__ */ new Set([...payload.ids, ...state])];
      }
      case "@@element/DELETE":
      case "@@element/hoverable/LEAVE": {
        const { payload } = action;
        return state.filter((id2) => !payload.ids.includes(id2));
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/interactable/interactable-reducer.js
  var InteractableReducer = (state = [], action) => {
    switch (action.type) {
      case "@@element/interactable/SELECT": {
        const { payload } = action;
        return [.../* @__PURE__ */ new Set([...payload.ids, ...state])];
      }
      case "@@element/DELETE":
      case "@@element/interactable/DESELECT": {
        const { payload } = action;
        return state.filter((id2) => !payload.ids.includes(id2));
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/movable/movable-reducer.js
  var MovableReducer = (state = [], action) => {
    switch (action.type) {
      case "@@element/movable/START": {
        const { payload } = action;
        return [.../* @__PURE__ */ new Set([...payload.ids, ...state])];
      }
      case "@@element/DELETE":
      case "@@element/movable/END": {
        const { payload } = action;
        return state.filter((id2) => !payload.ids.includes(id2));
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/movable/moving-reducer.js
  var MovingReducer = (state = {}, action) => {
    switch (action.type) {
      case "@@element/movable/MOVE": {
        const { payload } = action;
        return payload.ids.reduce((elements, id2) => ({
          ...elements,
          ...id2 in elements && {
            [id2]: {
              ...elements[id2],
              bounds: {
                ...elements[id2].bounds,
                x: elements[id2].bounds.x + payload.delta.x,
                y: elements[id2].bounds.y + payload.delta.y
              }
            }
          }
        }), state);
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/resizable/resizable-reducer.js
  var ResizableReducer = (state = [], action) => {
    switch (action.type) {
      case "@@element/resizable/START": {
        const { payload } = action;
        return [.../* @__PURE__ */ new Set([...payload.ids, ...state])];
      }
      case "@@element/DELETE":
      case "@@element/resizable/END": {
        const { payload } = action;
        return state.filter((id2) => !payload.ids.includes(id2));
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/resizable/resizing-reducer.js
  var ResizingReducer = (state = {}, action) => {
    const obj = { x: 0, y: 0 };
    const getUpdatedPosition = (elem, payload, resizeFrom) => {
      switch (resizeFrom) {
        case "topLeft":
          obj.x = Math.min(elem.x - payload.delta.width, elem.x + elem.width);
          obj.y = Math.min(elem.y - payload.delta.height, elem.y + elem.height);
          break;
        case "topRight":
          obj.x = elem.x;
          obj.y = Math.min(elem.y - payload.delta.height, elem.y + elem.height);
          break;
        case "bottomLeft":
          obj.x = Math.min(elem.x - payload.delta.width, elem.x + elem.width);
          obj.y = elem.y;
          break;
        case "bottomRight":
          obj.x = elem.x;
          obj.y = elem.y;
          break;
        default:
          obj.x = elem.x;
          obj.y = elem.y;
          break;
      }
      return obj;
    };
    switch (action.type) {
      case "@@element/resizable/RESIZE": {
        const { payload } = action;
        return payload.ids.reduce((elements, id2) => ({
          ...elements,
          ...id2 in elements && {
            [id2]: {
              ...elements[id2],
              bounds: {
                ...elements[id2].bounds,
                x: getUpdatedPosition(elements[id2].bounds, payload, payload.resizeFrom).x,
                y: getUpdatedPosition(elements[id2].bounds, payload, payload.resizeFrom).y,
                width: Math.max(elements[id2].bounds.width + payload.delta.width, 0),
                height: Math.max(elements[id2].bounds.height + payload.delta.height, 0)
              },
              resizeFrom: payload.resizeFrom
            }
          }
        }), state);
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/selectable/selectable-reducer.js
  var SelectableReducer = (state = [], action) => {
    switch (action.type) {
      case "@@element/selectable/SELECT": {
        const { payload } = action;
        return [.../* @__PURE__ */ new Set([...payload.ids, ...payload.overwrite ? [] : state])];
      }
      case "@@element/DELETE":
      case "@@element/selectable/DESELECT": {
        const { payload } = action;
        return state.filter((id2) => !payload.ids.includes(id2));
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/uml-element-reducer.js
  var UMLElementReducer = (state = {}, action) => {
    switch (action.type) {
      case "@@element/CREATE": {
        const { payload } = action;
        return payload.values.reduce((elements, values) => ({ ...elements, [values.id]: values }), state);
      }
      case "@@element/UPDATE": {
        const { payload } = action;
        return payload.values.reduce((elements, values) => ({
          ...elements,
          [values.id]: {
            ...elements[values.id],
            ...values
          }
        }), state);
      }
      case "@@element/DELETE": {
        const { payload } = action;
        return Object.keys(state).reduce((elements, id2) => ({
          ...elements,
          ...!payload.ids.includes(id2) && { [id2]: state[id2] }
        }), {});
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/updatable/updatable-reducer.js
  var UpdatableReducer = (state = [], action) => {
    switch (action.type) {
      case "@@element/updatable/START": {
        const { payload } = action;
        return [.../* @__PURE__ */ new Set([...payload.ids, ...state])];
      }
      case "@@element/DELETE":
      case "@@element/updatable/END": {
        const { payload } = action;
        return state.filter((id2) => !payload.ids.includes(id2));
      }
      case "@@element/updatable/ENDALL":
        return [];
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-relationship/reconnectable/reconnectable-reducer.js
  var ReconnectableReducer = (state = {}, action) => {
    switch (action.type) {
      case "@@element/reconnectable/START": {
        const { payload } = action;
        return payload.ids.reduce((ids, id2) => ({ ...ids, [id2]: payload.endpoint }), state);
      }
      case "@@element/DELETE":
      case "@@element/reconnectable/END": {
        const { payload } = action;
        return Object.keys(state).reduce((ids, id2) => ({
          ...ids,
          ...!payload.ids.includes(id2) && { [id2]: state[id2] }
        }), {});
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-relationship/uml-relationship-reducer.js
  var UMLRelationshipReducer = (state = {}, action) => {
    switch (action.type) {
      case "@@element/reconnectable/RECONNECT": {
        const { payload } = action;
        return payload.connections.reduce((acc, connection) => ({
          ...acc,
          [connection.id]: {
            ...state[connection.id],
            source: { ...state[connection.id].source, ...connection.source },
            target: { ...state[connection.id].target, ...connection.target }
          }
        }), state);
      }
      case "@@relationship/LAYOUT": {
        const { payload } = action;
        return {
          ...state,
          [payload.id]: {
            ...state[payload.id],
            path: payload.path,
            bounds: {
              ...state[payload.id].bounds,
              ...payload.bounds
            },
            isManuallyLayouted: false
          }
        };
      }
      case "@@relationship/WAYPOINTLAYOUT": {
        const { payload } = action;
        return {
          ...state,
          [payload.id]: {
            ...state[payload.id],
            path: payload.path,
            bounds: {
              ...state[payload.id].bounds,
              ...payload.bounds
            }
          }
        };
      }
      case "@@relationship/waypoints/START": {
        const { payload } = action;
        return {
          ...state,
          [payload.id]: {
            ...state[payload.id],
            path: payload.path,
            bounds: {
              ...state[payload.id].bounds,
              ...payload.bounds
            }
          }
        };
      }
      case "@@relationship/waypoints/END": {
        const { payload } = action;
        return {
          ...state,
          [payload.id]: {
            ...state[payload.id],
            isManuallyLayouted: true
          }
        };
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/copypaste/copy-reducer.js
  var CopyReducer = (state = [], action) => {
    switch (action.type) {
      case "@@copy/COPY": {
        const { payload } = action;
        return payload;
      }
      case "@@copy/PASTE": {
        return state;
      }
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/last-action/last-action-reducer.js
  var LastActionReducer = (state = "", action) => {
    return action.type;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/remote-selectable/remote-selection-reducer.js
  var sameSelector = (a2, b2) => {
    return a2 && b2 && a2.name === b2.name && a2.color === b2.color;
  };
  var RemoteSelectionReducer = (state = {}, action) => {
    switch (action.type) {
      case "@@element/remote-selection/CHANGE":
        const { payload } = action;
        const { selector, changes } = payload;
        return changes.reduce((selection, change) => {
          const { id: id2 } = change;
          const selectors = [...selection[id2] ?? []];
          if (change.type === "@@element/remote-selection/SELECT" && !selectors.some((s2) => sameSelector(s2, selector))) {
            selectors.push(selector);
          } else if (change.type === "@@element/remote-selection/DESELECT") {
            const index = selectors.findIndex((s2) => sameSelector(s2, selector));
            if (index >= 0) {
              selectors.splice(index, 1);
            }
          }
          return {
            ...selection,
            [id2]: selectors
          };
        }, state);
      case "@@element/remote-selection/PRUNE_SELECTORS":
        const { allowedSelectors } = action.payload;
        return Object.fromEntries(Object.entries(state).map(([id2, selectors]) => {
          return [id2, selectors.filter((s2) => allowedSelectors.some((selector2) => sameSelector(s2, selector2)))];
        }));
    }
    return state;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/reducer.js
  var reduce = (intial, ...reducerList) => (state = intial, action) => reducerList.reduce((newState, reducer) => reducer(newState, action), state);
  var reducers = {
    editor: EditorReducer,
    diagram: UMLDiagramReducer,
    hovered: HoverableReducer,
    selected: SelectableReducer,
    moving: MovableReducer,
    resizing: ResizableReducer,
    connecting: ConnectableReducer,
    reconnecting: ReconnectableReducer,
    interactive: InteractableReducer,
    updating: UpdatableReducer,
    copy: CopyReducer,
    lastAction: LastActionReducer,
    remoteSelection: RemoteSelectionReducer,
    elements: reduce({}, UMLContainerReducer, UMLRelationshipReducer, UMLElementReducer, ResizingReducer, MovingReducer),
    assessments: AssessmentReducer
  };

  // node_modules/@redux-saga/core/dist/redux-saga-effects.esm.js
  var done = function done2(value) {
    return {
      done: true,
      value
    };
  };
  var qEnd = {};
  function safeName(patternOrChannel) {
    if (channel(patternOrChannel)) {
      return "channel";
    }
    if (stringableFunc(patternOrChannel)) {
      return String(patternOrChannel);
    }
    if (func(patternOrChannel)) {
      return patternOrChannel.name;
    }
    return String(patternOrChannel);
  }
  function fsmIterator(fsm, startState, name) {
    var stateUpdater, errorState, effect3, nextState = startState;
    function next(arg, error) {
      if (nextState === qEnd) {
        return done(arg);
      }
      if (error && !errorState) {
        nextState = qEnd;
        throw error;
      } else {
        stateUpdater && stateUpdater(arg);
        var currentState = error ? fsm[errorState](error) : fsm[nextState]();
        nextState = currentState.nextState;
        effect3 = currentState.effect;
        stateUpdater = currentState.stateUpdater;
        errorState = currentState.errorState;
        return nextState === qEnd ? done(arg) : effect3;
      }
    }
    return makeIterator(next, function(error) {
      return next(null, error);
    }, name);
  }
  function takeLatest(patternOrChannel, worker) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    var yTake = {
      done: false,
      value: take(patternOrChannel)
    };
    var yFork = function yFork2(ac) {
      return {
        done: false,
        value: fork.apply(void 0, [worker].concat(args, [ac]))
      };
    };
    var yCancel = function yCancel2(task4) {
      return {
        done: false,
        value: cancel(task4)
      };
    };
    var task3, action;
    var setTask = function setTask2(t2) {
      return task3 = t2;
    };
    var setAction = function setAction2(ac) {
      return action = ac;
    };
    return fsmIterator({
      q1: function q1() {
        return {
          nextState: "q2",
          effect: yTake,
          stateUpdater: setAction
        };
      },
      q2: function q2() {
        return task3 ? {
          nextState: "q3",
          effect: yCancel(task3)
        } : {
          nextState: "q1",
          effect: yFork(action),
          stateUpdater: setTask
        };
      },
      q3: function q3() {
        return {
          nextState: "q1",
          effect: yFork(action),
          stateUpdater: setTask
        };
      }
    }, "q1", "takeLatest(" + safeName(patternOrChannel) + ", " + worker.name + ")");
  }
  function debounceHelper(delayLength, patternOrChannel, worker) {
    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }
    var action, raceOutput;
    var yTake = {
      done: false,
      value: take(patternOrChannel)
    };
    var yRace = {
      done: false,
      value: race({
        action: take(patternOrChannel),
        debounce: delay(delayLength)
      })
    };
    var yFork = function yFork2(ac) {
      return {
        done: false,
        value: fork.apply(void 0, [worker].concat(args, [ac]))
      };
    };
    var yNoop = function yNoop2(value) {
      return {
        done: false,
        value
      };
    };
    var setAction = function setAction2(ac) {
      return action = ac;
    };
    var setRaceOutput = function setRaceOutput2(ro) {
      return raceOutput = ro;
    };
    return fsmIterator({
      q1: function q1() {
        return {
          nextState: "q2",
          effect: yTake,
          stateUpdater: setAction
        };
      },
      q2: function q2() {
        return {
          nextState: "q3",
          effect: yRace,
          stateUpdater: setRaceOutput
        };
      },
      q3: function q3() {
        return raceOutput.debounce ? {
          nextState: "q1",
          effect: yFork(action)
        } : {
          nextState: "q2",
          effect: yNoop(raceOutput.action),
          stateUpdater: setAction
        };
      }
    }, "q1", "debounce(" + safeName(patternOrChannel) + ", " + worker.name + ")");
  }
  var validateTakeEffect = function validateTakeEffect2(fn, patternOrChannel, worker) {
    check(patternOrChannel, notUndef, fn.name + " requires a pattern or channel");
    check(worker, notUndef, fn.name + " requires a saga parameter");
  };
  function takeLatest$1(patternOrChannel, worker) {
    if (true) {
      validateTakeEffect(takeLatest$1, patternOrChannel, worker);
    }
    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }
    return fork.apply(void 0, [takeLatest, patternOrChannel, worker].concat(args));
  }
  function debounce2(delayLength, pattern3, worker) {
    for (var _len6 = arguments.length, args = new Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {
      args[_key6 - 3] = arguments[_key6];
    }
    return fork.apply(void 0, [debounceHelper, delayLength, pattern3, worker].concat(args));
  }

  // node_modules/@ls1intum/apollon/lib/es6/utils/actions/sagas.js
  var isInternal = (action) => {
    return SAGA_ACTION in action;
  };
  function composeSaga(sagas) {
    return all(sagas.map(spawn));
  }
  function run(sagas) {
    return all(sagas.map((saga2) => keepAlive(safely(saga2))));
  }
  var keepAlive = (saga2) => {
    return spawn(function* () {
      while (true) {
        yield call(saga2);
      }
    });
  };
  var safely = (saga2) => {
    function* safelySaga() {
      try {
        yield call(saga2);
      } catch (e2) {
        console.error(e2);
      }
    }
    return safelySaga;
  };

  // node_modules/@ls1intum/apollon/lib/es6/utils/fx/diff.js
  var diff = (lhs, rhs) => {
    const deletedValues = Object.keys(lhs).reduce((acc, key) => {
      return rhs.hasOwnProperty(key) ? acc : { ...acc, [key]: void 0 };
    }, {});
    return Object.keys(rhs).reduce((acc, key) => {
      if (!lhs.hasOwnProperty(key))
        return { ...acc, [key]: rhs[key] };
      if (lhs[key] === rhs[key])
        return acc;
      if (Array.isArray(lhs[key])) {
        return { ...acc, [key]: rhs[key] };
      }
      if (typeof lhs[key] === "object") {
        const difference = diff(lhs[key], rhs[key]);
        if (Object.keys(difference).length) {
          return { ...acc, [key]: diff(lhs[key], rhs[key]) };
        } else {
          return acc;
        }
      }
      return { ...acc, [key]: rhs[key] };
    }, deletedValues);
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-relationship/uml-relationship-saga.js
  function* UMLRelationshipSaga() {
    yield run([create, reconnect, update, layoutElement, layoutRelationship, deleteElement]);
  }
  function* create() {
    const action = yield take(
      "@@element/CREATE"
      /* UMLElementActionTypes.CREATE */
    );
    for (const value of action.payload.values) {
      yield call(recalc, value.id);
    }
  }
  function* reconnect() {
    const action = yield take(
      "@@element/reconnectable/RECONNECT"
      /* ReconnectableActionTypes.RECONNECT */
    );
    for (const connection of action.payload.connections) {
      yield call(recalc, connection.id);
    }
  }
  function* layoutRelationship() {
    const action = yield take(
      "@@relationship/waypoints/END"
      /* UMLRelationshipActionTypes.ENDWAYPOINTSLAYOUT */
    );
    const layer = yield getContext2("layer");
    const { elements, diagram } = yield select();
    const children = [
      ...diagram.ownedElements.map((id2) => UMLElementRepository.get(elements[id2])),
      ...diagram.ownedRelationships.map((id2) => UMLRelationshipRepository.get(elements[id2]))
    ].filter(notEmpty);
    const container = UMLDiagramRepository.get(diagram);
    if (!container) {
      return;
    }
    const [updates] = container.render(layer, children);
    const delta = {
      width: updates.bounds.width - diagram.bounds.width,
      height: updates.bounds.height - diagram.bounds.height
    };
    yield put({
      type: "@@element/resizable/RESIZE",
      payload: { ids: [diagram.id], delta },
      undoable: false
    });
  }
  function* update() {
    const action = yield take(
      "@@element/UPDATE"
      /* UMLElementActionTypes.UPDATE */
    );
    const { elements } = yield select();
    for (const value of action.payload.values) {
      if (!UMLRelationship.isUMLRelationship(elements[value.id])) {
        continue;
      }
      yield call(recalc, value.id);
    }
  }
  function* layoutElement() {
    const action = yield take([
      "@@element/movable/MOVE",
      "@@element/resizable/RESIZE"
      /* ResizingActionTypes.RESIZE */
    ]);
    const { elements } = yield select();
    const relationships = Object.values(elements).filter((x2) => UMLRelationship.isUMLRelationship(x2));
    const updates = [];
    loop: for (const relationship of relationships) {
      let source = relationship.source.element;
      while (source) {
        if (action.payload.ids.includes(source)) {
          updates.push(relationship.id);
          continue loop;
        }
        source = elements[source].owner;
      }
      let target = relationship.target.element;
      while (target) {
        if (action.payload.ids.includes(target)) {
          updates.push(relationship.id);
          continue loop;
        }
        target = elements[target].owner;
      }
    }
    for (const id2 of [.../* @__PURE__ */ new Set([...updates])]) {
      yield call(recalc, id2);
    }
  }
  function* deleteElement() {
    const action = yield take(
      "@@element/DELETE"
      /* UMLElementActionTypes.DELETE */
    );
    const { elements } = yield select();
    const relationships = Object.values(elements).filter((x2) => UMLRelationship.isUMLRelationship(x2)).filter((relationship) => action.payload.ids.includes(relationship.source.element) || action.payload.ids.includes(relationship.target.element)).map((relationship) => relationship.id);
    yield all([
      put({
        type: "@@element/container/REMOVE",
        payload: { ids: relationships },
        undoable: false
      }),
      put({
        type: "@@element/DELETE",
        payload: { ids: relationships },
        undoable: false
      })
    ]);
  }
  function* recalc(id2) {
    const { elements, selected, editor } = yield select();
    const layer = yield getContext2("layer");
    const relationship = UMLRelationshipRepository.get(elements[id2]);
    if (!relationship) {
      return;
    }
    const source = UMLElementRepository.get(elements[relationship.source.element]);
    const target = UMLElementRepository.get(elements[relationship.target.element]);
    if (!source || !target) {
      return;
    }
    const sourcePosition = yield put(UMLElementRepository.getAbsolutePosition(relationship.source.element));
    source.bounds = { ...source.bounds, ...sourcePosition };
    const targetPosition = yield put(UMLElementRepository.getAbsolutePosition(relationship.target.element));
    target.bounds = { ...target.bounds, ...targetPosition };
    const original = elements[id2];
    const [updates] = relationship.render(layer, source, target);
    const { path, bounds } = diff(original, updates);
    if (path) {
      if (relationship.isManuallyLayouted && shouldPreserveLayout(source.id, target.id, selected, editor.readonly)) {
        yield put(UMLRelationshipRepository.layoutWaypoints(updates.id, original.path, { ...original.bounds, ...bounds }));
      } else {
        yield put(UMLRelationshipRepository.layout(updates.id, path, { ...original.bounds, ...bounds }));
      }
    }
    if (updates.type === UMLRelationshipType.CommunicationLink) {
      yield put(UMLElementRepository.update(updates.id, updates));
    }
  }
  var shouldPreserveLayout = (sourceId, targetId, selected, isEditorReadOnly) => {
    return selected.includes(sourceId) && selected.includes(targetId) || isEditorReadOnly ? true : false;
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/layouter/layouter.js
  function* Layouter() {
    yield run([layout]);
  }
  function* layout() {
    const action = yield take(
      "@@layouter/LAYOUT"
      /* LayouterActionTypes.LAYOUT */
    );
    const layer = yield getContext2("layer");
    const { elements, diagram } = yield select();
    const ids = Object.values(elements).filter((x2) => !x2.owner).map((x2) => x2.id);
    if (!ids.length) {
      return;
    }
    yield put(UMLContainerRepository.append(ids));
    for (const id2 of Object.keys(elements)) {
      yield delay(0);
      if (UMLElement.isUMLElement(elements[id2])) {
        yield call(render, id2);
      }
      if (UMLRelationship.isUMLRelationship(elements[id2]) && !elements[id2].isManuallyLayouted) {
        yield call(recalc, id2);
      }
    }
  }
  function* renderDiagram() {
    const { elements, diagram: original } = yield select();
    const canvas = yield getContext2("layer");
    const diagram = UMLDiagramRepository.get(original);
    const children = [
      ...diagram.ownedElements.map((x2) => UMLElementRepository.get(elements[x2])),
      ...diagram.ownedRelationships.map((x2) => UMLRelationshipRepository.get(elements[x2]))
    ].filter(notEmpty);
    return diagram.render(canvas, children);
  }
  function* renderContainer(id2) {
    const { elements } = yield select();
    const canvas = yield getContext2("layer");
    const container = UMLContainerRepository.get(elements[id2]);
    const children = container.ownedElements.map((x2) => UMLElementRepository.get(elements[x2])).filter(notEmpty);
    return container.render(canvas, children);
  }
  function* renderElement(id2) {
    const { elements } = yield select();
    const canvas = yield getContext2("layer");
    const element = UMLElementRepository.get(elements[id2]);
    return element.render(canvas);
  }
  function* render(id2) {
    const { elements, diagram } = yield select();
    const state = { ...elements, [diagram.id]: diagram };
    let updates = [];
    if (UMLDiagramRepository.isUMLDiagram(state[id2])) {
      updates = yield call(renderDiagram);
    } else if (UMLContainer.isUMLContainer(state[id2])) {
      updates = yield call(renderContainer, id2);
    } else if (UMLElement.isUMLElement(state[id2])) {
      updates = yield call(renderElement, id2);
    }
    if (!updates.length) {
      return;
    }
    for (const [index, update3] of updates.entries()) {
      const original = state[update3.id];
      const size = {
        width: update3.bounds.width - original.bounds.width,
        height: update3.bounds.height - original.bounds.height
      };
      if (Object.values(size).some((x2) => x2 !== 0)) {
        yield put({
          type: "@@element/resizable/RESIZE",
          payload: {
            ids: [update3.id],
            resizeFrom: update3.resizeFrom,
            delta: size
          },
          undoable: false
        });
      }
      if (UMLDiagramRepository.isUMLDiagram(update3)) {
        continue;
      }
      const position = {
        x: update3.bounds.x - original.bounds.x,
        y: update3.bounds.y - original.bounds.y
      };
      if (Object.values(position).some((x2) => x2 !== 0)) {
        yield put({
          type: "@@element/movable/MOVE",
          payload: { ids: [update3.id], delta: position },
          undoable: false
        });
      }
      if (index === 0) {
        const { id: _2, name, owner, type, bounds, ownedElements, ...difference } = diff(original, update3);
        if (Object.keys(difference).length) {
          yield put(UMLElementRepository.update(update3.id, { ...difference }));
        }
        yield call(render, update3.owner || diagram.id);
      }
    }
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-container/uml-container-saga.js
  function* UMLContainerSaga() {
    yield run([append, remove2, appendAfterMove, renderAfterMove]);
  }
  function* append() {
    const action = yield take(
      "@@element/container/APPEND"
      /* UMLContainerActionTypes.APPEND */
    );
    const { elements, diagram } = yield select();
    const state = { ...elements, [diagram.id]: diagram };
    const container = UMLContainerRepository.get(state[action.payload.owner]);
    if (!container) {
      return;
    }
    yield call(render, container.id);
  }
  function* remove2() {
    const action = yield take(
      "@@element/container/REMOVE"
      /* UMLContainerActionTypes.REMOVE */
    );
    const layer = yield getContext2("layer");
    const { elements, diagram } = yield select();
    const state = { ...elements, [diagram.id]: diagram };
    const owners = [
      ...new Set(action.payload.ids.filter((id2) => id2 in state).map((id2) => state[id2].owner || diagram.id))
    ];
    for (const owner of owners) {
      yield call(render, owner);
    }
  }
  function* appendAfterMove() {
    const action = yield take(
      "@@element/movable/END"
      /* MovableActionTypes.END */
    );
    const { elements, hovered } = yield select();
    let containerID = null;
    if (hovered.length) {
      const container = elements[hovered[0]];
      if (!container || !UMLContainer.isUMLContainer(container) || !UMLElements[container.type].features.droppable) {
        return;
      }
      containerID = container.id;
    }
    const movedElements = action.payload.ids.filter((id2) => elements[id2].owner !== containerID && id2 !== containerID);
    if (!movedElements.length || action.payload.keyboard) {
      return;
    }
    yield put(UMLContainerRepository.remove(movedElements));
    yield put(UMLContainerRepository.append(movedElements, containerID || void 0));
  }
  function* renderAfterMove() {
    const action = yield take(
      "@@element/movable/END"
      /* MovableActionTypes.END */
    );
    const { elements, diagram } = yield select();
    const state = { ...elements, [diagram.id]: diagram };
    yield race({
      append: take(
        "@@element/container/APPEND"
        /* UMLContainerActionTypes.APPEND */
      ),
      resize: call(function* () {
        yield delay(0);
        const owners = [...new Set(action.payload.ids.map((id2) => state[id2].owner || diagram.id))];
        for (const owner of owners) {
          yield call(render, owner);
        }
      })
    });
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-diagram/uml-diagram-saga.js
  function* UMLDiagramSaga() {
    yield run([selectRelationship, resizeAfterConnectionChange]);
  }
  function* selectRelationship() {
    const action = yield take(
      "@@element/selectable/SELECT"
      /* SelectableActionTypes.SELECT */
    );
    const { diagram, editor } = yield select();
    if (editor.readonly || editor.mode === ApollonMode.Assessment) {
      return;
    }
    const ids = action.payload.ids.filter((id2) => diagram.ownedRelationships.includes(id2));
    if (!ids.length) {
      return;
    }
    yield put({
      type: "@@element/diagram/APPEND",
      payload: { ids },
      undoable: false
    });
  }
  function* resizeAfterConnectionChange() {
    yield takeLatest$1([
      "@@element/connectable/END",
      "@@element/reconnectable/END",
      "@@element/updatable/END"
      /* UpdatableActionTypes.END */
    ], resize);
  }
  function* resize() {
    const layer = yield getContext2("layer");
    const { elements, diagram } = yield select();
    const children = [
      ...diagram.ownedElements.map((id2) => UMLElementRepository.get(elements[id2])),
      ...diagram.ownedRelationships.map((id2) => UMLRelationshipRepository.get(elements[id2]))
    ].filter(notEmpty);
    const container = UMLDiagramRepository.get(diagram);
    if (!container) {
      return;
    }
    const [updates] = container.render(layer, children);
    const delta = {
      width: updates.bounds.width - diagram.bounds.width,
      height: updates.bounds.height - diagram.bounds.height
    };
    yield put({
      type: "@@element/resizable/RESIZE",
      payload: { ids: [diagram.id], delta },
      undoable: false
    });
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/uml-element/uml-element-saga.js
  function* UMLElementSaga() {
    yield run([makeInteractable, renderAfterUpdate, renderWhileResize]);
  }
  function* makeInteractable() {
    yield take(
      "@@element/interactable/SELECT"
      /* InteractableActionTypes.SELECT */
    );
    const { interactive, elements } = yield select();
    const roots = filterRoots(interactive, elements);
    const difference = interactive.filter((x2) => !roots.includes(x2));
    yield put({
      type: "@@element/interactable/DESELECT",
      payload: { ids: difference },
      undoable: false
    });
  }
  function* renderAfterUpdate() {
    const action = yield take(
      "@@element/UPDATE"
      /* UMLElementActionTypes.UPDATE */
    );
    if (isInternal(action)) {
      return;
    }
    for (const value of action.payload.values) {
      yield call(render, value.id);
    }
  }
  function* renderWhileResize() {
    const action = yield take(
      "@@element/resizable/RESIZE"
      /* ResizingActionTypes.RESIZE */
    );
    if (isInternal(action)) {
      return;
    }
    for (const id2 of action.payload.ids) {
      yield call(render, id2);
    }
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/patcher/patcher-saga.js
  function* PatchLayouter() {
    yield run([patchLayout]);
  }
  function* patchLayout() {
    yield debounce2(100, "@@patcher/PATCH", recalculateLayouts);
  }
  function* recalculateLayouts() {
    const { elements } = yield select();
    const ids = Object.values(elements).filter((x2) => !x2.owner).map((x2) => x2.id);
    if (!ids.length) {
      return;
    }
    yield put(UMLContainerRepository.append(ids));
    for (const id2 of Object.keys(elements)) {
      yield delay(0);
      if (UMLElement.isUMLElement(elements[id2])) {
        yield call(render, id2);
      }
      if (UMLRelationship.isUMLRelationship(elements[id2]) && !elements[id2].isManuallyLayouted) {
        yield call(recalc, id2);
      }
    }
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/saga.js
  function* saga() {
    yield composeSaga([Layouter, UMLElementSaga, UMLContainerSaga, UMLRelationshipSaga, UMLDiagramSaga, PatchLayouter]);
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/undo/undo-reducer.js
  var MAX_UNDO_STACK_SIZE = 25;
  var undoable = (reducer) => {
    const past = new Stack(MAX_UNDO_STACK_SIZE);
    const future = new Stack(MAX_UNDO_STACK_SIZE);
    return (state = {}, action) => {
      switch (action.type) {
        case "@@undo/UNDO": {
          const previous = past.pop();
          if (!previous)
            return state;
          future.push([state, action]);
          return previous[0];
        }
        case "@@undo/REDO": {
          const next = future.pop();
          if (!next)
            return state;
          past.push([state, action]);
          return next[0];
        }
        default:
          const ignore = isInternal(action) || !action.undoable;
          if (!ignore) {
            future.clear();
            past.push([state, action]);
          }
          return reducer(state, action);
      }
    };
  };
  var Stack = class {
    constructor(maxSize) {
      this.maxSize = maxSize;
      this.items = [];
    }
    get latest() {
      return this.items.length ? this.items[this.items.length - 1] : null;
    }
    push(item) {
      const newLength = this.items.push(item);
      if (newLength > this.maxSize) {
        this.items.shift();
      }
    }
    pop() {
      return this.items.pop();
    }
    clear() {
      this.items.length = 0;
    }
  };

  // node_modules/fast-json-patch/module/core.mjs
  var core_exports = {};
  __export(core_exports, {
    JsonPatchError: () => JsonPatchError,
    _areEquals: () => _areEquals,
    applyOperation: () => applyOperation,
    applyPatch: () => applyPatch,
    applyReducer: () => applyReducer,
    deepClone: () => deepClone,
    getValueByPointer: () => getValueByPointer,
    validate: () => validate,
    validator: () => validator
  });

  // node_modules/fast-json-patch/module/helpers.mjs
  var __extends = /* @__PURE__ */ function() {
    var extendStatics2 = function(d2, b2) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p in b3) if (b3.hasOwnProperty(p)) d3[p] = b3[p];
      };
      return extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwnProperty(obj, key) {
    return _hasOwnProperty.call(obj, key);
  }
  function _objectKeys(obj) {
    if (Array.isArray(obj)) {
      var keys_1 = new Array(obj.length);
      for (var k2 = 0; k2 < keys_1.length; k2++) {
        keys_1[k2] = "" + k2;
      }
      return keys_1;
    }
    if (Object.keys) {
      return Object.keys(obj);
    }
    var keys3 = [];
    for (var i2 in obj) {
      if (hasOwnProperty(obj, i2)) {
        keys3.push(i2);
      }
    }
    return keys3;
  }
  function _deepClone(obj) {
    switch (typeof obj) {
      case "object":
        return JSON.parse(JSON.stringify(obj));
      //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5
      case "undefined":
        return null;
      //this is how JSON.stringify behaves for array items
      default:
        return obj;
    }
  }
  function isInteger(str) {
    var i2 = 0;
    var len = str.length;
    var charCode;
    while (i2 < len) {
      charCode = str.charCodeAt(i2);
      if (charCode >= 48 && charCode <= 57) {
        i2++;
        continue;
      }
      return false;
    }
    return true;
  }
  function escapePathComponent(path) {
    if (path.indexOf("/") === -1 && path.indexOf("~") === -1)
      return path;
    return path.replace(/~/g, "~0").replace(/\//g, "~1");
  }
  function unescapePathComponent(path) {
    return path.replace(/~1/g, "/").replace(/~0/g, "~");
  }
  function hasUndefined(obj) {
    if (obj === void 0) {
      return true;
    }
    if (obj) {
      if (Array.isArray(obj)) {
        for (var i_1 = 0, len = obj.length; i_1 < len; i_1++) {
          if (hasUndefined(obj[i_1])) {
            return true;
          }
        }
      } else if (typeof obj === "object") {
        var objKeys = _objectKeys(obj);
        var objKeysLength = objKeys.length;
        for (var i2 = 0; i2 < objKeysLength; i2++) {
          if (hasUndefined(obj[objKeys[i2]])) {
            return true;
          }
        }
      }
    }
    return false;
  }
  function patchErrorMessageFormatter(message, args) {
    var messageParts = [message];
    for (var key in args) {
      var value = typeof args[key] === "object" ? JSON.stringify(args[key], null, 2) : args[key];
      if (typeof value !== "undefined") {
        messageParts.push(key + ": " + value);
      }
    }
    return messageParts.join("\n");
  }
  var PatchError = (
    /** @class */
    function(_super) {
      __extends(PatchError2, _super);
      function PatchError2(message, name, index, operation, tree) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, patchErrorMessageFormatter(message, { name, index, operation, tree })) || this;
        _this.name = name;
        _this.index = index;
        _this.operation = operation;
        _this.tree = tree;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        _this.message = patchErrorMessageFormatter(message, { name, index, operation, tree });
        return _this;
      }
      return PatchError2;
    }(Error)
  );

  // node_modules/fast-json-patch/module/core.mjs
  var JsonPatchError = PatchError;
  var deepClone = _deepClone;
  var objOps = {
    add: function(obj, key, document2) {
      obj[key] = this.value;
      return { newDocument: document2 };
    },
    remove: function(obj, key, document2) {
      var removed = obj[key];
      delete obj[key];
      return { newDocument: document2, removed };
    },
    replace: function(obj, key, document2) {
      var removed = obj[key];
      obj[key] = this.value;
      return { newDocument: document2, removed };
    },
    move: function(obj, key, document2) {
      var removed = getValueByPointer(document2, this.path);
      if (removed) {
        removed = _deepClone(removed);
      }
      var originalValue = applyOperation(document2, { op: "remove", path: this.from }).removed;
      applyOperation(document2, { op: "add", path: this.path, value: originalValue });
      return { newDocument: document2, removed };
    },
    copy: function(obj, key, document2) {
      var valueToCopy = getValueByPointer(document2, this.from);
      applyOperation(document2, { op: "add", path: this.path, value: _deepClone(valueToCopy) });
      return { newDocument: document2 };
    },
    test: function(obj, key, document2) {
      return { newDocument: document2, test: _areEquals(obj[key], this.value) };
    },
    _get: function(obj, key, document2) {
      this.value = obj[key];
      return { newDocument: document2 };
    }
  };
  var arrOps = {
    add: function(arr, i2, document2) {
      if (isInteger(i2)) {
        arr.splice(i2, 0, this.value);
      } else {
        arr[i2] = this.value;
      }
      return { newDocument: document2, index: i2 };
    },
    remove: function(arr, i2, document2) {
      var removedList = arr.splice(i2, 1);
      return { newDocument: document2, removed: removedList[0] };
    },
    replace: function(arr, i2, document2) {
      var removed = arr[i2];
      arr[i2] = this.value;
      return { newDocument: document2, removed };
    },
    move: objOps.move,
    copy: objOps.copy,
    test: objOps.test,
    _get: objOps._get
  };
  function getValueByPointer(document2, pointer) {
    if (pointer == "") {
      return document2;
    }
    var getOriginalDestination = { op: "_get", path: pointer };
    applyOperation(document2, getOriginalDestination);
    return getOriginalDestination.value;
  }
  function applyOperation(document2, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {
    if (validateOperation === void 0) {
      validateOperation = false;
    }
    if (mutateDocument === void 0) {
      mutateDocument = true;
    }
    if (banPrototypeModifications === void 0) {
      banPrototypeModifications = true;
    }
    if (index === void 0) {
      index = 0;
    }
    if (validateOperation) {
      if (typeof validateOperation == "function") {
        validateOperation(operation, 0, document2, operation.path);
      } else {
        validator(operation, 0);
      }
    }
    if (operation.path === "") {
      var returnValue = { newDocument: document2 };
      if (operation.op === "add") {
        returnValue.newDocument = operation.value;
        return returnValue;
      } else if (operation.op === "replace") {
        returnValue.newDocument = operation.value;
        returnValue.removed = document2;
        return returnValue;
      } else if (operation.op === "move" || operation.op === "copy") {
        returnValue.newDocument = getValueByPointer(document2, operation.from);
        if (operation.op === "move") {
          returnValue.removed = document2;
        }
        return returnValue;
      } else if (operation.op === "test") {
        returnValue.test = _areEquals(document2, operation.value);
        if (returnValue.test === false) {
          throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document2);
        }
        returnValue.newDocument = document2;
        return returnValue;
      } else if (operation.op === "remove") {
        returnValue.removed = document2;
        returnValue.newDocument = null;
        return returnValue;
      } else if (operation.op === "_get") {
        operation.value = document2;
        return returnValue;
      } else {
        if (validateOperation) {
          throw new JsonPatchError("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index, operation, document2);
        } else {
          return returnValue;
        }
      }
    } else {
      if (!mutateDocument) {
        document2 = _deepClone(document2);
      }
      var path = operation.path || "";
      var keys3 = path.split("/");
      var obj = document2;
      var t2 = 1;
      var len = keys3.length;
      var existingPathFragment = void 0;
      var key = void 0;
      var validateFunction = void 0;
      if (typeof validateOperation == "function") {
        validateFunction = validateOperation;
      } else {
        validateFunction = validator;
      }
      while (true) {
        key = keys3[t2];
        if (key && key.indexOf("~") != -1) {
          key = unescapePathComponent(key);
        }
        if (banPrototypeModifications && (key == "__proto__" || key == "prototype" && t2 > 0 && keys3[t2 - 1] == "constructor")) {
          throw new TypeError("JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README");
        }
        if (validateOperation) {
          if (existingPathFragment === void 0) {
            if (obj[key] === void 0) {
              existingPathFragment = keys3.slice(0, t2).join("/");
            } else if (t2 == len - 1) {
              existingPathFragment = operation.path;
            }
            if (existingPathFragment !== void 0) {
              validateFunction(operation, 0, document2, existingPathFragment);
            }
          }
        }
        t2++;
        if (Array.isArray(obj)) {
          if (key === "-") {
            key = obj.length;
          } else {
            if (validateOperation && !isInteger(key)) {
              throw new JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index, operation, document2);
            } else if (isInteger(key)) {
              key = ~~key;
            }
          }
          if (t2 >= len) {
            if (validateOperation && operation.op === "add" && key > obj.length) {
              throw new JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index, operation, document2);
            }
            var returnValue = arrOps[operation.op].call(operation, obj, key, document2);
            if (returnValue.test === false) {
              throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document2);
            }
            return returnValue;
          }
        } else {
          if (t2 >= len) {
            var returnValue = objOps[operation.op].call(operation, obj, key, document2);
            if (returnValue.test === false) {
              throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document2);
            }
            return returnValue;
          }
        }
        obj = obj[key];
        if (validateOperation && t2 < len && (!obj || typeof obj !== "object")) {
          throw new JsonPatchError("Cannot perform operation at the desired path", "OPERATION_PATH_UNRESOLVABLE", index, operation, document2);
        }
      }
    }
  }
  function applyPatch(document2, patch, validateOperation, mutateDocument, banPrototypeModifications) {
    if (mutateDocument === void 0) {
      mutateDocument = true;
    }
    if (banPrototypeModifications === void 0) {
      banPrototypeModifications = true;
    }
    if (validateOperation) {
      if (!Array.isArray(patch)) {
        throw new JsonPatchError("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
      }
    }
    if (!mutateDocument) {
      document2 = _deepClone(document2);
    }
    var results = new Array(patch.length);
    for (var i2 = 0, length_1 = patch.length; i2 < length_1; i2++) {
      results[i2] = applyOperation(document2, patch[i2], validateOperation, true, banPrototypeModifications, i2);
      document2 = results[i2].newDocument;
    }
    results.newDocument = document2;
    return results;
  }
  function applyReducer(document2, operation, index) {
    var operationResult = applyOperation(document2, operation);
    if (operationResult.test === false) {
      throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document2);
    }
    return operationResult.newDocument;
  }
  function validator(operation, index, document2, existingPathFragment) {
    if (typeof operation !== "object" || operation === null || Array.isArray(operation)) {
      throw new JsonPatchError("Operation is not an object", "OPERATION_NOT_AN_OBJECT", index, operation, document2);
    } else if (!objOps[operation.op]) {
      throw new JsonPatchError("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index, operation, document2);
    } else if (typeof operation.path !== "string") {
      throw new JsonPatchError("Operation `path` property is not a string", "OPERATION_PATH_INVALID", index, operation, document2);
    } else if (operation.path.indexOf("/") !== 0 && operation.path.length > 0) {
      throw new JsonPatchError('Operation `path` property must start with "/"', "OPERATION_PATH_INVALID", index, operation, document2);
    } else if ((operation.op === "move" || operation.op === "copy") && typeof operation.from !== "string") {
      throw new JsonPatchError("Operation `from` property is not present (applicable in `move` and `copy` operations)", "OPERATION_FROM_REQUIRED", index, operation, document2);
    } else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && operation.value === void 0) {
      throw new JsonPatchError("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_REQUIRED", index, operation, document2);
    } else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && hasUndefined(operation.value)) {
      throw new JsonPatchError("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED", index, operation, document2);
    } else if (document2) {
      if (operation.op == "add") {
        var pathLen = operation.path.split("/").length;
        var existingPathLen = existingPathFragment.split("/").length;
        if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
          throw new JsonPatchError("Cannot perform an `add` operation at the desired path", "OPERATION_PATH_CANNOT_ADD", index, operation, document2);
        }
      } else if (operation.op === "replace" || operation.op === "remove" || operation.op === "_get") {
        if (operation.path !== existingPathFragment) {
          throw new JsonPatchError("Cannot perform the operation at a path that does not exist", "OPERATION_PATH_UNRESOLVABLE", index, operation, document2);
        }
      } else if (operation.op === "move" || operation.op === "copy") {
        var existingValue = { op: "_get", path: operation.from, value: void 0 };
        var error = validate([existingValue], document2);
        if (error && error.name === "OPERATION_PATH_UNRESOLVABLE") {
          throw new JsonPatchError("Cannot perform the operation from a path that does not exist", "OPERATION_FROM_UNRESOLVABLE", index, operation, document2);
        }
      }
    }
  }
  function validate(sequence, document2, externalValidator) {
    try {
      if (!Array.isArray(sequence)) {
        throw new JsonPatchError("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
      }
      if (document2) {
        applyPatch(_deepClone(document2), _deepClone(sequence), externalValidator || true);
      } else {
        externalValidator = externalValidator || validator;
        for (var i2 = 0; i2 < sequence.length; i2++) {
          externalValidator(sequence[i2], i2, document2, void 0);
        }
      }
    } catch (e2) {
      if (e2 instanceof JsonPatchError) {
        return e2;
      } else {
        throw e2;
      }
    }
  }
  function _areEquals(a2, b2) {
    if (a2 === b2)
      return true;
    if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
      var arrA = Array.isArray(a2), arrB = Array.isArray(b2), i2, length, key;
      if (arrA && arrB) {
        length = a2.length;
        if (length != b2.length)
          return false;
        for (i2 = length; i2-- !== 0; )
          if (!_areEquals(a2[i2], b2[i2]))
            return false;
        return true;
      }
      if (arrA != arrB)
        return false;
      var keys3 = Object.keys(a2);
      length = keys3.length;
      if (length !== Object.keys(b2).length)
        return false;
      for (i2 = length; i2-- !== 0; )
        if (!b2.hasOwnProperty(keys3[i2]))
          return false;
      for (i2 = length; i2-- !== 0; ) {
        key = keys3[i2];
        if (!_areEquals(a2[key], b2[key]))
          return false;
      }
      return true;
    }
    return a2 !== a2 && b2 !== b2;
  }

  // node_modules/fast-json-patch/module/duplex.mjs
  var duplex_exports = {};
  __export(duplex_exports, {
    compare: () => compare,
    generate: () => generate,
    observe: () => observe,
    unobserve: () => unobserve
  });
  var beforeDict = /* @__PURE__ */ new WeakMap();
  var Mirror = (
    /** @class */
    /* @__PURE__ */ function() {
      function Mirror2(obj) {
        this.observers = /* @__PURE__ */ new Map();
        this.obj = obj;
      }
      return Mirror2;
    }()
  );
  var ObserverInfo = (
    /** @class */
    /* @__PURE__ */ function() {
      function ObserverInfo2(callback, observer) {
        this.callback = callback;
        this.observer = observer;
      }
      return ObserverInfo2;
    }()
  );
  function getMirror(obj) {
    return beforeDict.get(obj);
  }
  function getObserverFromMirror(mirror, callback) {
    return mirror.observers.get(callback);
  }
  function removeObserverFromMirror(mirror, observer) {
    mirror.observers.delete(observer.callback);
  }
  function unobserve(root, observer) {
    observer.unobserve();
  }
  function observe(obj, callback) {
    var patches = [];
    var observer;
    var mirror = getMirror(obj);
    if (!mirror) {
      mirror = new Mirror(obj);
      beforeDict.set(obj, mirror);
    } else {
      var observerInfo = getObserverFromMirror(mirror, callback);
      observer = observerInfo && observerInfo.observer;
    }
    if (observer) {
      return observer;
    }
    observer = {};
    mirror.value = _deepClone(obj);
    if (callback) {
      observer.callback = callback;
      observer.next = null;
      var dirtyCheck = function() {
        generate(observer);
      };
      var fastCheck = function() {
        clearTimeout(observer.next);
        observer.next = setTimeout(dirtyCheck);
      };
      if (typeof window !== "undefined") {
        window.addEventListener("mouseup", fastCheck);
        window.addEventListener("keyup", fastCheck);
        window.addEventListener("mousedown", fastCheck);
        window.addEventListener("keydown", fastCheck);
        window.addEventListener("change", fastCheck);
      }
    }
    observer.patches = patches;
    observer.object = obj;
    observer.unobserve = function() {
      generate(observer);
      clearTimeout(observer.next);
      removeObserverFromMirror(mirror, observer);
      if (typeof window !== "undefined") {
        window.removeEventListener("mouseup", fastCheck);
        window.removeEventListener("keyup", fastCheck);
        window.removeEventListener("mousedown", fastCheck);
        window.removeEventListener("keydown", fastCheck);
        window.removeEventListener("change", fastCheck);
      }
    };
    mirror.observers.set(callback, new ObserverInfo(callback, observer));
    return observer;
  }
  function generate(observer, invertible) {
    if (invertible === void 0) {
      invertible = false;
    }
    var mirror = beforeDict.get(observer.object);
    _generate(mirror.value, observer.object, observer.patches, "", invertible);
    if (observer.patches.length) {
      applyPatch(mirror.value, observer.patches);
    }
    var temp = observer.patches;
    if (temp.length > 0) {
      observer.patches = [];
      if (observer.callback) {
        observer.callback(temp);
      }
    }
    return temp;
  }
  function _generate(mirror, obj, patches, path, invertible) {
    if (obj === mirror) {
      return;
    }
    if (typeof obj.toJSON === "function") {
      obj = obj.toJSON();
    }
    var newKeys = _objectKeys(obj);
    var oldKeys = _objectKeys(mirror);
    var changed = false;
    var deleted = false;
    for (var t2 = oldKeys.length - 1; t2 >= 0; t2--) {
      var key = oldKeys[t2];
      var oldVal = mirror[key];
      if (hasOwnProperty(obj, key) && !(obj[key] === void 0 && oldVal !== void 0 && Array.isArray(obj) === false)) {
        var newVal = obj[key];
        if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {
          _generate(oldVal, newVal, patches, path + "/" + escapePathComponent(key), invertible);
        } else {
          if (oldVal !== newVal) {
            changed = true;
            if (invertible) {
              patches.push({ op: "test", path: path + "/" + escapePathComponent(key), value: _deepClone(oldVal) });
            }
            patches.push({ op: "replace", path: path + "/" + escapePathComponent(key), value: _deepClone(newVal) });
          }
        }
      } else if (Array.isArray(mirror) === Array.isArray(obj)) {
        if (invertible) {
          patches.push({ op: "test", path: path + "/" + escapePathComponent(key), value: _deepClone(oldVal) });
        }
        patches.push({ op: "remove", path: path + "/" + escapePathComponent(key) });
        deleted = true;
      } else {
        if (invertible) {
          patches.push({ op: "test", path, value: mirror });
        }
        patches.push({ op: "replace", path, value: obj });
        changed = true;
      }
    }
    if (!deleted && newKeys.length == oldKeys.length) {
      return;
    }
    for (var t2 = 0; t2 < newKeys.length; t2++) {
      var key = newKeys[t2];
      if (!hasOwnProperty(mirror, key) && obj[key] !== void 0) {
        patches.push({ op: "add", path: path + "/" + escapePathComponent(key), value: _deepClone(obj[key]) });
      }
    }
  }
  function compare(tree1, tree2, invertible) {
    if (invertible === void 0) {
      invertible = false;
    }
    var patches = [];
    _generate(tree1, tree2, patches, "", invertible);
    return patches;
  }

  // node_modules/fast-json-patch/index.mjs
  var fast_json_patch_default = Object.assign({}, core_exports, duplex_exports, {
    JsonPatchError: PatchError,
    deepClone: _deepClone,
    escapePathComponent,
    unescapePathComponent
  });

  // node_modules/tslib/tslib.es6.mjs
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  function __extends2(d2, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _2 = { label: 0, sent: function() {
      if (t2[0] & 1) throw t2[1];
      return t2[1];
    }, trys: [], ops: [] }, f, y2, t2, g2;
    return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
      return this;
    }), g2;
    function verb(n2) {
      return function(v2) {
        return step([n2, v2]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g2 && (g2 = 0, op[0] && (_2 = 0)), _2) try {
        if (f = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done) return t2;
        if (y2 = 0, t2) op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2]) _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e2) {
        op = [6, e2];
        y2 = 0;
      } finally {
        f = t2 = 0;
      }
      if (op[0] & 5) throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __values(o2) {
    var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
    if (m2) return m2.call(o2);
    if (o2 && typeof o2.length === "number") return {
      next: function() {
        if (o2 && i2 >= o2.length) o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
    throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o2, n2) {
    var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
    if (!m2) return o2;
    var i2 = m2.call(o2), r2, ar = [], e2;
    try {
      while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done) ar.push(r2.value);
    } catch (error) {
      e2 = { error };
    } finally {
      try {
        if (r2 && !r2.done && (m2 = i2["return"])) m2.call(i2);
      } finally {
        if (e2) throw e2.error;
      }
    }
    return ar;
  }
  function __spreadArray(to, from2, pack) {
    if (pack || arguments.length === 2) for (var i2 = 0, l2 = from2.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from2)) {
        if (!ar) ar = Array.prototype.slice.call(from2, 0, i2);
        ar[i2] = from2[i2];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from2));
  }
  function __await(v2) {
    return this instanceof __await ? (this.v = v2, this) : new __await(v2);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
    return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2;
    function verb(n2) {
      if (g2[n2]) i2[n2] = function(v2) {
        return new Promise(function(a2, b2) {
          q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
        });
      };
    }
    function resume(n2, v2) {
      try {
        step(g2[n2](v2));
      } catch (e2) {
        settle(q2[0][3], e2);
      }
    }
    function step(r2) {
      r2.value instanceof __await ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v2) {
      if (f(v2), q2.shift(), q2.length) resume(q2[0][0], q2[0][1]);
    }
  }
  function __asyncValues(o2) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o2[Symbol.asyncIterator], i2;
    return m2 ? m2.call(o2) : (o2 = typeof __values === "function" ? __values(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2);
    function verb(n2) {
      i2[n2] = o2[n2] && function(v2) {
        return new Promise(function(resolve, reject) {
          v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
        });
      };
    }
    function settle(resolve, reject, d2, v2) {
      Promise.resolve(v2).then(function(v3) {
        resolve({ value: v3, done: d2 });
      }, reject);
    }
  }

  // node_modules/rxjs/dist/esm5/internal/util/isFunction.js
  function isFunction(value) {
    return typeof value === "function";
  }

  // node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
  function createErrorClass(createImpl) {
    var _super = function(instance) {
      Error.call(instance);
      instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
  }

  // node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
  var UnsubscriptionError = createErrorClass(function(_super) {
    return function UnsubscriptionErrorImpl(errors) {
      _super(this);
      this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i2) {
        return i2 + 1 + ") " + err.toString();
      }).join("\n  ") : "";
      this.name = "UnsubscriptionError";
      this.errors = errors;
    };
  });

  // node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
  function arrRemove(arr, item) {
    if (arr) {
      var index = arr.indexOf(item);
      0 <= index && arr.splice(index, 1);
    }
  }

  // node_modules/rxjs/dist/esm5/internal/Subscription.js
  var Subscription = function() {
    function Subscription2(initialTeardown) {
      this.initialTeardown = initialTeardown;
      this.closed = false;
      this._parentage = null;
      this._finalizers = null;
    }
    Subscription2.prototype.unsubscribe = function() {
      var e_1, _a, e_2, _b;
      var errors;
      if (!this.closed) {
        this.closed = true;
        var _parentage = this._parentage;
        if (_parentage) {
          this._parentage = null;
          if (Array.isArray(_parentage)) {
            try {
              for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                var parent_1 = _parentage_1_1.value;
                parent_1.remove(this);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
              } finally {
                if (e_1) throw e_1.error;
              }
            }
          } else {
            _parentage.remove(this);
          }
        }
        var initialFinalizer = this.initialTeardown;
        if (isFunction(initialFinalizer)) {
          try {
            initialFinalizer();
          } catch (e2) {
            errors = e2 instanceof UnsubscriptionError ? e2.errors : [e2];
          }
        }
        var _finalizers = this._finalizers;
        if (_finalizers) {
          this._finalizers = null;
          try {
            for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
              var finalizer = _finalizers_1_1.value;
              try {
                execFinalizer(finalizer);
              } catch (err) {
                errors = errors !== null && errors !== void 0 ? errors : [];
                if (err instanceof UnsubscriptionError) {
                  errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                } else {
                  errors.push(err);
                }
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
            } finally {
              if (e_2) throw e_2.error;
            }
          }
        }
        if (errors) {
          throw new UnsubscriptionError(errors);
        }
      }
    };
    Subscription2.prototype.add = function(teardown) {
      var _a;
      if (teardown && teardown !== this) {
        if (this.closed) {
          execFinalizer(teardown);
        } else {
          if (teardown instanceof Subscription2) {
            if (teardown.closed || teardown._hasParent(this)) {
              return;
            }
            teardown._addParent(this);
          }
          (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
        }
      }
    };
    Subscription2.prototype._hasParent = function(parent) {
      var _parentage = this._parentage;
      return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
    };
    Subscription2.prototype._addParent = function(parent) {
      var _parentage = this._parentage;
      this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription2.prototype._removeParent = function(parent) {
      var _parentage = this._parentage;
      if (_parentage === parent) {
        this._parentage = null;
      } else if (Array.isArray(_parentage)) {
        arrRemove(_parentage, parent);
      }
    };
    Subscription2.prototype.remove = function(teardown) {
      var _finalizers = this._finalizers;
      _finalizers && arrRemove(_finalizers, teardown);
      if (teardown instanceof Subscription2) {
        teardown._removeParent(this);
      }
    };
    Subscription2.EMPTY = function() {
      var empty2 = new Subscription2();
      empty2.closed = true;
      return empty2;
    }();
    return Subscription2;
  }();
  var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  function isSubscription(value) {
    return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
  }
  function execFinalizer(finalizer) {
    if (isFunction(finalizer)) {
      finalizer();
    } else {
      finalizer.unsubscribe();
    }
  }

  // node_modules/rxjs/dist/esm5/internal/config.js
  var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: void 0,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false
  };

  // node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
  var timeoutProvider = {
    setTimeout: function(handler, timeout) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var delegate = timeoutProvider.delegate;
      if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
        return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
      }
      return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearTimeout: function(handle) {
      var delegate = timeoutProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: void 0
  };

  // node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
  function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function() {
      var onUnhandledError = config.onUnhandledError;
      if (onUnhandledError) {
        onUnhandledError(err);
      } else {
        throw err;
      }
    });
  }

  // node_modules/rxjs/dist/esm5/internal/util/noop.js
  function noop3() {
  }

  // node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
  var COMPLETE_NOTIFICATION = function() {
    return createNotification("C", void 0, void 0);
  }();
  function errorNotification(error) {
    return createNotification("E", void 0, error);
  }
  function nextNotification(value) {
    return createNotification("N", value, void 0);
  }
  function createNotification(kind, value, error) {
    return {
      kind,
      value,
      error
    };
  }

  // node_modules/rxjs/dist/esm5/internal/util/errorContext.js
  var context = null;
  function errorContext(cb) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      var isRoot = !context;
      if (isRoot) {
        context = { errorThrown: false, error: null };
      }
      cb();
      if (isRoot) {
        var _a = context, errorThrown = _a.errorThrown, error = _a.error;
        context = null;
        if (errorThrown) {
          throw error;
        }
      }
    } else {
      cb();
    }
  }
  function captureError(err) {
    if (config.useDeprecatedSynchronousErrorHandling && context) {
      context.errorThrown = true;
      context.error = err;
    }
  }

  // node_modules/rxjs/dist/esm5/internal/Subscriber.js
  var Subscriber = function(_super) {
    __extends2(Subscriber2, _super);
    function Subscriber2(destination) {
      var _this = _super.call(this) || this;
      _this.isStopped = false;
      if (destination) {
        _this.destination = destination;
        if (isSubscription(destination)) {
          destination.add(_this);
        }
      } else {
        _this.destination = EMPTY_OBSERVER;
      }
      return _this;
    }
    Subscriber2.create = function(next, error, complete) {
      return new SafeSubscriber(next, error, complete);
    };
    Subscriber2.prototype.next = function(value) {
      if (this.isStopped) {
        handleStoppedNotification(nextNotification(value), this);
      } else {
        this._next(value);
      }
    };
    Subscriber2.prototype.error = function(err) {
      if (this.isStopped) {
        handleStoppedNotification(errorNotification(err), this);
      } else {
        this.isStopped = true;
        this._error(err);
      }
    };
    Subscriber2.prototype.complete = function() {
      if (this.isStopped) {
        handleStoppedNotification(COMPLETE_NOTIFICATION, this);
      } else {
        this.isStopped = true;
        this._complete();
      }
    };
    Subscriber2.prototype.unsubscribe = function() {
      if (!this.closed) {
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
        this.destination = null;
      }
    };
    Subscriber2.prototype._next = function(value) {
      this.destination.next(value);
    };
    Subscriber2.prototype._error = function(err) {
      try {
        this.destination.error(err);
      } finally {
        this.unsubscribe();
      }
    };
    Subscriber2.prototype._complete = function() {
      try {
        this.destination.complete();
      } finally {
        this.unsubscribe();
      }
    };
    return Subscriber2;
  }(Subscription);
  var _bind = Function.prototype.bind;
  function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
  }
  var ConsumerObserver = function() {
    function ConsumerObserver2(partialObserver) {
      this.partialObserver = partialObserver;
    }
    ConsumerObserver2.prototype.next = function(value) {
      var partialObserver = this.partialObserver;
      if (partialObserver.next) {
        try {
          partialObserver.next(value);
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    ConsumerObserver2.prototype.error = function(err) {
      var partialObserver = this.partialObserver;
      if (partialObserver.error) {
        try {
          partialObserver.error(err);
        } catch (error) {
          handleUnhandledError(error);
        }
      } else {
        handleUnhandledError(err);
      }
    };
    ConsumerObserver2.prototype.complete = function() {
      var partialObserver = this.partialObserver;
      if (partialObserver.complete) {
        try {
          partialObserver.complete();
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    return ConsumerObserver2;
  }();
  var SafeSubscriber = function(_super) {
    __extends2(SafeSubscriber2, _super);
    function SafeSubscriber2(observerOrNext, error, complete) {
      var _this = _super.call(this) || this;
      var partialObserver;
      if (isFunction(observerOrNext) || !observerOrNext) {
        partialObserver = {
          next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
          error: error !== null && error !== void 0 ? error : void 0,
          complete: complete !== null && complete !== void 0 ? complete : void 0
        };
      } else {
        var context_1;
        if (_this && config.useDeprecatedNextContext) {
          context_1 = Object.create(observerOrNext);
          context_1.unsubscribe = function() {
            return _this.unsubscribe();
          };
          partialObserver = {
            next: observerOrNext.next && bind(observerOrNext.next, context_1),
            error: observerOrNext.error && bind(observerOrNext.error, context_1),
            complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
          };
        } else {
          partialObserver = observerOrNext;
        }
      }
      _this.destination = new ConsumerObserver(partialObserver);
      return _this;
    }
    return SafeSubscriber2;
  }(Subscriber);
  function handleUnhandledError(error) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      captureError(error);
    } else {
      reportUnhandledError(error);
    }
  }
  function defaultErrorHandler(err) {
    throw err;
  }
  function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function() {
      return onStoppedNotification(notification, subscriber);
    });
  }
  var EMPTY_OBSERVER = {
    closed: true,
    next: noop3,
    error: defaultErrorHandler,
    complete: noop3
  };

  // node_modules/rxjs/dist/esm5/internal/symbol/observable.js
  var observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();

  // node_modules/rxjs/dist/esm5/internal/util/identity.js
  function identity3(x2) {
    return x2;
  }

  // node_modules/rxjs/dist/esm5/internal/util/pipe.js
  function pipeFromArray(fns) {
    if (fns.length === 0) {
      return identity3;
    }
    if (fns.length === 1) {
      return fns[0];
    }
    return function piped(input) {
      return fns.reduce(function(prev, fn) {
        return fn(prev);
      }, input);
    };
  }

  // node_modules/rxjs/dist/esm5/internal/Observable.js
  var Observable = function() {
    function Observable2(subscribe) {
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }
    Observable2.prototype.lift = function(operator) {
      var observable2 = new Observable2();
      observable2.source = this;
      observable2.operator = operator;
      return observable2;
    };
    Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
      var _this = this;
      var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
      errorContext(function() {
        var _a = _this, operator = _a.operator, source = _a.source;
        subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
      });
      return subscriber;
    };
    Observable2.prototype._trySubscribe = function(sink) {
      try {
        return this._subscribe(sink);
      } catch (err) {
        sink.error(err);
      }
    };
    Observable2.prototype.forEach = function(next, promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var subscriber = new SafeSubscriber({
          next: function(value) {
            try {
              next(value);
            } catch (err) {
              reject(err);
              subscriber.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
        _this.subscribe(subscriber);
      });
    };
    Observable2.prototype._subscribe = function(subscriber) {
      var _a;
      return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable2.prototype[observable] = function() {
      return this;
    };
    Observable2.prototype.pipe = function() {
      var operations = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        operations[_i] = arguments[_i];
      }
      return pipeFromArray(operations)(this);
    };
    Observable2.prototype.toPromise = function(promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var value;
        _this.subscribe(function(x2) {
          return value = x2;
        }, function(err) {
          return reject(err);
        }, function() {
          return resolve(value);
        });
      });
    };
    Observable2.create = function(subscribe) {
      return new Observable2(subscribe);
    };
    return Observable2;
  }();
  function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
  }
  function isObserver(value) {
    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
  }
  function isSubscriber(value) {
    return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
  }

  // node_modules/rxjs/dist/esm5/internal/util/lift.js
  function hasLift(source) {
    return isFunction(source === null || source === void 0 ? void 0 : source.lift);
  }
  function operate(init) {
    return function(source) {
      if (hasLift(source)) {
        return source.lift(function(liftedSource) {
          try {
            return init(liftedSource, this);
          } catch (err) {
            this.error(err);
          }
        });
      }
      throw new TypeError("Unable to lift unknown Observable type");
    };
  }

  // node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
  function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
  }
  var OperatorSubscriber = function(_super) {
    __extends2(OperatorSubscriber2, _super);
    function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
      var _this = _super.call(this, destination) || this;
      _this.onFinalize = onFinalize;
      _this.shouldUnsubscribe = shouldUnsubscribe;
      _this._next = onNext ? function(value) {
        try {
          onNext(value);
        } catch (err) {
          destination.error(err);
        }
      } : _super.prototype._next;
      _this._error = onError ? function(err) {
        try {
          onError(err);
        } catch (err2) {
          destination.error(err2);
        } finally {
          this.unsubscribe();
        }
      } : _super.prototype._error;
      _this._complete = onComplete ? function() {
        try {
          onComplete();
        } catch (err) {
          destination.error(err);
        } finally {
          this.unsubscribe();
        }
      } : _super.prototype._complete;
      return _this;
    }
    OperatorSubscriber2.prototype.unsubscribe = function() {
      var _a;
      if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
        var closed_1 = this.closed;
        _super.prototype.unsubscribe.call(this);
        !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
      }
    };
    return OperatorSubscriber2;
  }(Subscriber);

  // node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
  var ObjectUnsubscribedError = createErrorClass(function(_super) {
    return function ObjectUnsubscribedErrorImpl() {
      _super(this);
      this.name = "ObjectUnsubscribedError";
      this.message = "object unsubscribed";
    };
  });

  // node_modules/rxjs/dist/esm5/internal/Subject.js
  var Subject = function(_super) {
    __extends2(Subject2, _super);
    function Subject2() {
      var _this = _super.call(this) || this;
      _this.closed = false;
      _this.currentObservers = null;
      _this.observers = [];
      _this.isStopped = false;
      _this.hasError = false;
      _this.thrownError = null;
      return _this;
    }
    Subject2.prototype.lift = function(operator) {
      var subject = new AnonymousSubject(this, this);
      subject.operator = operator;
      return subject;
    };
    Subject2.prototype._throwIfClosed = function() {
      if (this.closed) {
        throw new ObjectUnsubscribedError();
      }
    };
    Subject2.prototype.next = function(value) {
      var _this = this;
      errorContext(function() {
        var e_1, _a;
        _this._throwIfClosed();
        if (!_this.isStopped) {
          if (!_this.currentObservers) {
            _this.currentObservers = Array.from(_this.observers);
          }
          try {
            for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
              var observer = _c.value;
              observer.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        }
      });
    };
    Subject2.prototype.error = function(err) {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.hasError = _this.isStopped = true;
          _this.thrownError = err;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().error(err);
          }
        }
      });
    };
    Subject2.prototype.complete = function() {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.isStopped = true;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().complete();
          }
        }
      });
    };
    Subject2.prototype.unsubscribe = function() {
      this.isStopped = this.closed = true;
      this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject2.prototype, "observed", {
      get: function() {
        var _a;
        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
      },
      enumerable: false,
      configurable: true
    });
    Subject2.prototype._trySubscribe = function(subscriber) {
      this._throwIfClosed();
      return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject2.prototype._subscribe = function(subscriber) {
      this._throwIfClosed();
      this._checkFinalizedStatuses(subscriber);
      return this._innerSubscribe(subscriber);
    };
    Subject2.prototype._innerSubscribe = function(subscriber) {
      var _this = this;
      var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
      if (hasError || isStopped) {
        return EMPTY_SUBSCRIPTION;
      }
      this.currentObservers = null;
      observers.push(subscriber);
      return new Subscription(function() {
        _this.currentObservers = null;
        arrRemove(observers, subscriber);
      });
    };
    Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
      var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
      if (hasError) {
        subscriber.error(thrownError);
      } else if (isStopped) {
        subscriber.complete();
      }
    };
    Subject2.prototype.asObservable = function() {
      var observable2 = new Observable();
      observable2.source = this;
      return observable2;
    };
    Subject2.create = function(destination, source) {
      return new AnonymousSubject(destination, source);
    };
    return Subject2;
  }(Observable);
  var AnonymousSubject = function(_super) {
    __extends2(AnonymousSubject2, _super);
    function AnonymousSubject2(destination, source) {
      var _this = _super.call(this) || this;
      _this.destination = destination;
      _this.source = source;
      return _this;
    }
    AnonymousSubject2.prototype.next = function(value) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject2.prototype.error = function(err) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject2.prototype.complete = function() {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject2.prototype._subscribe = function(subscriber) {
      var _a, _b;
      return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject2;
  }(Subject);

  // node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
  var dateTimestampProvider = {
    now: function() {
      return (dateTimestampProvider.delegate || Date).now();
    },
    delegate: void 0
  };

  // node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
  var Action = function(_super) {
    __extends2(Action3, _super);
    function Action3(scheduler, work) {
      return _super.call(this) || this;
    }
    Action3.prototype.schedule = function(state, delay3) {
      if (delay3 === void 0) {
        delay3 = 0;
      }
      return this;
    };
    return Action3;
  }(Subscription);

  // node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
  var intervalProvider = {
    setInterval: function(handler, timeout) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var delegate = intervalProvider.delegate;
      if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
        return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
      }
      return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearInterval: function(handle) {
      var delegate = intervalProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: void 0
  };

  // node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
  var AsyncAction = function(_super) {
    __extends2(AsyncAction2, _super);
    function AsyncAction2(scheduler, work) {
      var _this = _super.call(this, scheduler, work) || this;
      _this.scheduler = scheduler;
      _this.work = work;
      _this.pending = false;
      return _this;
    }
    AsyncAction2.prototype.schedule = function(state, delay3) {
      var _a;
      if (delay3 === void 0) {
        delay3 = 0;
      }
      if (this.closed) {
        return this;
      }
      this.state = state;
      var id2 = this.id;
      var scheduler = this.scheduler;
      if (id2 != null) {
        this.id = this.recycleAsyncId(scheduler, id2, delay3);
      }
      this.pending = true;
      this.delay = delay3;
      this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay3);
      return this;
    };
    AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay3) {
      if (delay3 === void 0) {
        delay3 = 0;
      }
      return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay3);
    };
    AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id2, delay3) {
      if (delay3 === void 0) {
        delay3 = 0;
      }
      if (delay3 != null && this.delay === delay3 && this.pending === false) {
        return id2;
      }
      if (id2 != null) {
        intervalProvider.clearInterval(id2);
      }
      return void 0;
    };
    AsyncAction2.prototype.execute = function(state, delay3) {
      if (this.closed) {
        return new Error("executing a cancelled action");
      }
      this.pending = false;
      var error = this._execute(state, delay3);
      if (error) {
        return error;
      } else if (this.pending === false && this.id != null) {
        this.id = this.recycleAsyncId(this.scheduler, this.id, null);
      }
    };
    AsyncAction2.prototype._execute = function(state, _delay) {
      var errored = false;
      var errorValue;
      try {
        this.work(state);
      } catch (e2) {
        errored = true;
        errorValue = e2 ? e2 : new Error("Scheduled action threw falsy error");
      }
      if (errored) {
        this.unsubscribe();
        return errorValue;
      }
    };
    AsyncAction2.prototype.unsubscribe = function() {
      if (!this.closed) {
        var _a = this, id2 = _a.id, scheduler = _a.scheduler;
        var actions = scheduler.actions;
        this.work = this.state = this.scheduler = null;
        this.pending = false;
        arrRemove(actions, this);
        if (id2 != null) {
          this.id = this.recycleAsyncId(scheduler, id2, null);
        }
        this.delay = null;
        _super.prototype.unsubscribe.call(this);
      }
    };
    return AsyncAction2;
  }(Action);

  // node_modules/rxjs/dist/esm5/internal/Scheduler.js
  var Scheduler = function() {
    function Scheduler2(schedulerActionCtor, now) {
      if (now === void 0) {
        now = Scheduler2.now;
      }
      this.schedulerActionCtor = schedulerActionCtor;
      this.now = now;
    }
    Scheduler2.prototype.schedule = function(work, delay3, state) {
      if (delay3 === void 0) {
        delay3 = 0;
      }
      return new this.schedulerActionCtor(this, work).schedule(state, delay3);
    };
    Scheduler2.now = dateTimestampProvider.now;
    return Scheduler2;
  }();

  // node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
  var AsyncScheduler = function(_super) {
    __extends2(AsyncScheduler2, _super);
    function AsyncScheduler2(SchedulerAction, now) {
      if (now === void 0) {
        now = Scheduler.now;
      }
      var _this = _super.call(this, SchedulerAction, now) || this;
      _this.actions = [];
      _this._active = false;
      return _this;
    }
    AsyncScheduler2.prototype.flush = function(action) {
      var actions = this.actions;
      if (this._active) {
        actions.push(action);
        return;
      }
      var error;
      this._active = true;
      do {
        if (error = action.execute(action.state, action.delay)) {
          break;
        }
      } while (action = actions.shift());
      this._active = false;
      if (error) {
        while (action = actions.shift()) {
          action.unsubscribe();
        }
        throw error;
      }
    };
    return AsyncScheduler2;
  }(Scheduler);

  // node_modules/rxjs/dist/esm5/internal/scheduler/async.js
  var asyncScheduler = new AsyncScheduler(AsyncAction);
  var async = asyncScheduler;

  // node_modules/rxjs/dist/esm5/internal/observable/empty.js
  var EMPTY = new Observable(function(subscriber) {
    return subscriber.complete();
  });

  // node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
  function isScheduler(value) {
    return value && isFunction(value.schedule);
  }

  // node_modules/rxjs/dist/esm5/internal/util/args.js
  function last(arr) {
    return arr[arr.length - 1];
  }
  function popScheduler(args) {
    return isScheduler(last(args)) ? args.pop() : void 0;
  }
  function popNumber(args, defaultValue) {
    return typeof last(args) === "number" ? args.pop() : defaultValue;
  }

  // node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
  var isArrayLike = function(x2) {
    return x2 && typeof x2.length === "number" && typeof x2 !== "function";
  };

  // node_modules/rxjs/dist/esm5/internal/util/isPromise.js
  function isPromise(value) {
    return isFunction(value === null || value === void 0 ? void 0 : value.then);
  }

  // node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
  function isInteropObservable(input) {
    return isFunction(input[observable]);
  }

  // node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
  function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
  }

  // node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
  function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
  }

  // node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
  function getSymbolIterator() {
    if (typeof Symbol !== "function" || !Symbol.iterator) {
      return "@@iterator";
    }
    return Symbol.iterator;
  }
  var iterator3 = getSymbolIterator();

  // node_modules/rxjs/dist/esm5/internal/util/isIterable.js
  function isIterable(input) {
    return isFunction(input === null || input === void 0 ? void 0 : input[iterator3]);
  }

  // node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
  function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
      var reader, _a, value, done3;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            reader = readableStream.getReader();
            _b.label = 1;
          case 1:
            _b.trys.push([1, , 9, 10]);
            _b.label = 2;
          case 2:
            if (false) return [3, 8];
            return [4, __await(reader.read())];
          case 3:
            _a = _b.sent(), value = _a.value, done3 = _a.done;
            if (!done3) return [3, 5];
            return [4, __await(void 0)];
          case 4:
            return [2, _b.sent()];
          case 5:
            return [4, __await(value)];
          case 6:
            return [4, _b.sent()];
          case 7:
            _b.sent();
            return [3, 2];
          case 8:
            return [3, 10];
          case 9:
            reader.releaseLock();
            return [7];
          case 10:
            return [2];
        }
      });
    });
  }
  function isReadableStreamLike(obj) {
    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
  }

  // node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
  function innerFrom(input) {
    if (input instanceof Observable) {
      return input;
    }
    if (input != null) {
      if (isInteropObservable(input)) {
        return fromInteropObservable(input);
      }
      if (isArrayLike(input)) {
        return fromArrayLike(input);
      }
      if (isPromise(input)) {
        return fromPromise(input);
      }
      if (isAsyncIterable(input)) {
        return fromAsyncIterable(input);
      }
      if (isIterable(input)) {
        return fromIterable(input);
      }
      if (isReadableStreamLike(input)) {
        return fromReadableStreamLike(input);
      }
    }
    throw createInvalidObservableTypeError(input);
  }
  function fromInteropObservable(obj) {
    return new Observable(function(subscriber) {
      var obs = obj[observable]();
      if (isFunction(obs.subscribe)) {
        return obs.subscribe(subscriber);
      }
      throw new TypeError("Provided object does not correctly implement Symbol.observable");
    });
  }
  function fromArrayLike(array4) {
    return new Observable(function(subscriber) {
      for (var i2 = 0; i2 < array4.length && !subscriber.closed; i2++) {
        subscriber.next(array4[i2]);
      }
      subscriber.complete();
    });
  }
  function fromPromise(promise3) {
    return new Observable(function(subscriber) {
      promise3.then(function(value) {
        if (!subscriber.closed) {
          subscriber.next(value);
          subscriber.complete();
        }
      }, function(err) {
        return subscriber.error(err);
      }).then(null, reportUnhandledError);
    });
  }
  function fromIterable(iterable) {
    return new Observable(function(subscriber) {
      var e_1, _a;
      try {
        for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
          var value = iterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      subscriber.complete();
    });
  }
  function fromAsyncIterable(asyncIterable) {
    return new Observable(function(subscriber) {
      process2(asyncIterable, subscriber).catch(function(err) {
        return subscriber.error(err);
      });
    });
  }
  function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
  }
  function process2(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function() {
      var value, e_2_1;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            _b.trys.push([0, 5, 6, 11]);
            asyncIterable_1 = __asyncValues(asyncIterable);
            _b.label = 1;
          case 1:
            return [4, asyncIterable_1.next()];
          case 2:
            if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
            value = asyncIterable_1_1.value;
            subscriber.next(value);
            if (subscriber.closed) {
              return [2];
            }
            _b.label = 3;
          case 3:
            return [3, 1];
          case 4:
            return [3, 11];
          case 5:
            e_2_1 = _b.sent();
            e_2 = { error: e_2_1 };
            return [3, 11];
          case 6:
            _b.trys.push([6, , 9, 10]);
            if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
            return [4, _a.call(asyncIterable_1)];
          case 7:
            _b.sent();
            _b.label = 8;
          case 8:
            return [3, 10];
          case 9:
            if (e_2) throw e_2.error;
            return [7];
          case 10:
            return [7];
          case 11:
            subscriber.complete();
            return [2];
        }
      });
    });
  }

  // node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
  function executeSchedule(parentSubscription, scheduler, work, delay3, repeat) {
    if (delay3 === void 0) {
      delay3 = 0;
    }
    if (repeat === void 0) {
      repeat = false;
    }
    var scheduleSubscription = scheduler.schedule(function() {
      work();
      if (repeat) {
        parentSubscription.add(this.schedule(null, delay3));
      } else {
        this.unsubscribe();
      }
    }, delay3);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
      return scheduleSubscription;
    }
  }

  // node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
  function observeOn(scheduler, delay3) {
    if (delay3 === void 0) {
      delay3 = 0;
    }
    return operate(function(source, subscriber) {
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.next(value);
        }, delay3);
      }, function() {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.complete();
        }, delay3);
      }, function(err) {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.error(err);
        }, delay3);
      }));
    });
  }

  // node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
  function subscribeOn(scheduler, delay3) {
    if (delay3 === void 0) {
      delay3 = 0;
    }
    return operate(function(source, subscriber) {
      subscriber.add(scheduler.schedule(function() {
        return source.subscribe(subscriber);
      }, delay3));
    });
  }

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
  function scheduleObservable(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }

  // node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
  function schedulePromise(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
  function scheduleArray(input, scheduler) {
    return new Observable(function(subscriber) {
      var i2 = 0;
      return scheduler.schedule(function() {
        if (i2 === input.length) {
          subscriber.complete();
        } else {
          subscriber.next(input[i2++]);
          if (!subscriber.closed) {
            this.schedule();
          }
        }
      });
    });
  }

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
  function scheduleIterable(input, scheduler) {
    return new Observable(function(subscriber) {
      var iterator4;
      executeSchedule(subscriber, scheduler, function() {
        iterator4 = input[iterator3]();
        executeSchedule(subscriber, scheduler, function() {
          var _a;
          var value;
          var done3;
          try {
            _a = iterator4.next(), value = _a.value, done3 = _a.done;
          } catch (err) {
            subscriber.error(err);
            return;
          }
          if (done3) {
            subscriber.complete();
          } else {
            subscriber.next(value);
          }
        }, 0, true);
      });
      return function() {
        return isFunction(iterator4 === null || iterator4 === void 0 ? void 0 : iterator4.return) && iterator4.return();
      };
    });
  }

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
  function scheduleAsyncIterable(input, scheduler) {
    if (!input) {
      throw new Error("Iterable cannot be null");
    }
    return new Observable(function(subscriber) {
      executeSchedule(subscriber, scheduler, function() {
        var iterator4 = input[Symbol.asyncIterator]();
        executeSchedule(subscriber, scheduler, function() {
          iterator4.next().then(function(result) {
            if (result.done) {
              subscriber.complete();
            } else {
              subscriber.next(result.value);
            }
          });
        }, 0, true);
      });
    });
  }

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
  function scheduleReadableStreamLike(input, scheduler) {
    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
  }

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
  function scheduled(input, scheduler) {
    if (input != null) {
      if (isInteropObservable(input)) {
        return scheduleObservable(input, scheduler);
      }
      if (isArrayLike(input)) {
        return scheduleArray(input, scheduler);
      }
      if (isPromise(input)) {
        return schedulePromise(input, scheduler);
      }
      if (isAsyncIterable(input)) {
        return scheduleAsyncIterable(input, scheduler);
      }
      if (isIterable(input)) {
        return scheduleIterable(input, scheduler);
      }
      if (isReadableStreamLike(input)) {
        return scheduleReadableStreamLike(input, scheduler);
      }
    }
    throw createInvalidObservableTypeError(input);
  }

  // node_modules/rxjs/dist/esm5/internal/observable/from.js
  function from(input, scheduler) {
    return scheduler ? scheduled(input, scheduler) : innerFrom(input);
  }

  // node_modules/rxjs/dist/esm5/internal/util/isDate.js
  function isValidDate(value) {
    return value instanceof Date && !isNaN(value);
  }

  // node_modules/rxjs/dist/esm5/internal/operators/map.js
  function map(project, thisArg) {
    return operate(function(source, subscriber) {
      var index = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        subscriber.next(project.call(thisArg, value, index++));
      }));
    });
  }

  // node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
  function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer4 = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
      if (isComplete && !buffer4.length && !active) {
        subscriber.complete();
      }
    };
    var outerNext = function(value) {
      return active < concurrent ? doInnerSub(value) : buffer4.push(value);
    };
    var doInnerSub = function(value) {
      expand && subscriber.next(value);
      active++;
      var innerComplete = false;
      innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
        onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
        if (expand) {
          outerNext(innerValue);
        } else {
          subscriber.next(innerValue);
        }
      }, function() {
        innerComplete = true;
      }, void 0, function() {
        if (innerComplete) {
          try {
            active--;
            var _loop_1 = function() {
              var bufferedValue = buffer4.shift();
              if (innerSubScheduler) {
                executeSchedule(subscriber, innerSubScheduler, function() {
                  return doInnerSub(bufferedValue);
                });
              } else {
                doInnerSub(bufferedValue);
              }
            };
            while (buffer4.length && active < concurrent) {
              _loop_1();
            }
            checkComplete();
          } catch (err) {
            subscriber.error(err);
          }
        }
      }));
    };
    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
      isComplete = true;
      checkComplete();
    }));
    return function() {
      additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
  }

  // node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
  function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    if (isFunction(resultSelector)) {
      return mergeMap(function(a2, i2) {
        return map(function(b2, ii) {
          return resultSelector(a2, b2, i2, ii);
        })(innerFrom(project(a2, i2)));
      }, concurrent);
    } else if (typeof resultSelector === "number") {
      concurrent = resultSelector;
    }
    return operate(function(source, subscriber) {
      return mergeInternals(source, subscriber, project, concurrent);
    });
  }

  // node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
  function mergeAll(concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    return mergeMap(identity3, concurrent);
  }

  // node_modules/rxjs/dist/esm5/internal/observable/timer.js
  function timer(dueTime, intervalOrScheduler, scheduler) {
    if (dueTime === void 0) {
      dueTime = 0;
    }
    if (scheduler === void 0) {
      scheduler = async;
    }
    var intervalDuration = -1;
    if (intervalOrScheduler != null) {
      if (isScheduler(intervalOrScheduler)) {
        scheduler = intervalOrScheduler;
      } else {
        intervalDuration = intervalOrScheduler;
      }
    }
    return new Observable(function(subscriber) {
      var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
      if (due < 0) {
        due = 0;
      }
      var n2 = 0;
      return scheduler.schedule(function() {
        if (!subscriber.closed) {
          subscriber.next(n2++);
          if (0 <= intervalDuration) {
            this.schedule(void 0, intervalDuration);
          } else {
            subscriber.complete();
          }
        }
      }, due);
    });
  }

  // node_modules/rxjs/dist/esm5/internal/observable/merge.js
  function merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var concurrent = popNumber(args, Infinity);
    var sources = args;
    return !sources.length ? EMPTY : sources.length === 1 ? innerFrom(sources[0]) : mergeAll(concurrent)(from(sources, scheduler));
  }

  // node_modules/rxjs/dist/esm5/internal/operators/filter.js
  function filter(predicate3, thisArg) {
    return operate(function(source, subscriber) {
      var index = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        return predicate3.call(thisArg, value, index++) && subscriber.next(value);
      }));
    });
  }

  // node_modules/rxjs/dist/esm5/internal/operators/buffer.js
  function buffer3(closingNotifier) {
    return operate(function(source, subscriber) {
      var currentBuffer = [];
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        return currentBuffer.push(value);
      }, function() {
        subscriber.next(currentBuffer);
        subscriber.complete();
      }));
      innerFrom(closingNotifier).subscribe(createOperatorSubscriber(subscriber, function() {
        var b2 = currentBuffer;
        currentBuffer = [];
        subscriber.next(b2);
      }, noop3));
      return function() {
        currentBuffer = null;
      };
    });
  }

  // node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js
  function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) {
      scheduler = asyncScheduler;
    }
    return operate(function(source, subscriber) {
      var activeTask = null;
      var lastValue = null;
      var lastTime = null;
      var emit = function() {
        if (activeTask) {
          activeTask.unsubscribe();
          activeTask = null;
          var value = lastValue;
          lastValue = null;
          subscriber.next(value);
        }
      };
      function emitWhenIdle() {
        var targetTime = lastTime + dueTime;
        var now = scheduler.now();
        if (now < targetTime) {
          activeTask = this.schedule(void 0, targetTime - now);
          subscriber.add(activeTask);
          return;
        }
        emit();
      }
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        lastValue = value;
        lastTime = scheduler.now();
        if (!activeTask) {
          activeTask = scheduler.schedule(emitWhenIdle, dueTime);
          subscriber.add(activeTask);
        }
      }, function() {
        emit();
        subscriber.complete();
      }, void 0, function() {
        lastValue = activeTask = null;
      }));
    });
  }

  // node_modules/rxjs/dist/esm5/internal/operators/groupBy.js
  function groupBy(keySelector, elementOrOptions, duration, connector) {
    return operate(function(source, subscriber) {
      var element;
      if (!elementOrOptions || typeof elementOrOptions === "function") {
        element = elementOrOptions;
      } else {
        duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;
      }
      var groups = /* @__PURE__ */ new Map();
      var notify = function(cb) {
        groups.forEach(cb);
        cb(subscriber);
      };
      var handleError = function(err) {
        return notify(function(consumer) {
          return consumer.error(err);
        });
      };
      var activeGroups = 0;
      var teardownAttempted = false;
      var groupBySourceSubscriber = new OperatorSubscriber(subscriber, function(value) {
        try {
          var key_1 = keySelector(value);
          var group_1 = groups.get(key_1);
          if (!group_1) {
            groups.set(key_1, group_1 = connector ? connector() : new Subject());
            var grouped = createGroupedObservable(key_1, group_1);
            subscriber.next(grouped);
            if (duration) {
              var durationSubscriber_1 = createOperatorSubscriber(group_1, function() {
                group_1.complete();
                durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
              }, void 0, void 0, function() {
                return groups.delete(key_1);
              });
              groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));
            }
          }
          group_1.next(element ? element(value) : value);
        } catch (err) {
          handleError(err);
        }
      }, function() {
        return notify(function(consumer) {
          return consumer.complete();
        });
      }, handleError, function() {
        return groups.clear();
      }, function() {
        teardownAttempted = true;
        return activeGroups === 0;
      });
      source.subscribe(groupBySourceSubscriber);
      function createGroupedObservable(key, groupSubject) {
        var result = new Observable(function(groupSubscriber) {
          activeGroups++;
          var innerSub = groupSubject.subscribe(groupSubscriber);
          return function() {
            innerSub.unsubscribe();
            --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();
          };
        });
        result.key = key;
        return result;
      }
    });
  }

  // node_modules/rxjs/dist/esm5/internal/operators/tap.js
  function tap(observerOrNext, error, complete) {
    var tapObserver = isFunction(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
    return tapObserver ? operate(function(source, subscriber) {
      var _a;
      (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
      var isUnsub = true;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var _a2;
        (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
        subscriber.next(value);
      }, function() {
        var _a2;
        isUnsub = false;
        (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
        subscriber.complete();
      }, function(err) {
        var _a2;
        isUnsub = false;
        (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
        subscriber.error(err);
      }, function() {
        var _a2, _b;
        if (isUnsub) {
          (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
        }
        (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
      }));
    }) : identity3;
  }

  // node_modules/rxjs/dist/esm5/internal/operators/throttle.js
  function throttle(durationSelector, config2) {
    return operate(function(source, subscriber) {
      var _a = config2 !== null && config2 !== void 0 ? config2 : {}, _b = _a.leading, leading = _b === void 0 ? true : _b, _c = _a.trailing, trailing = _c === void 0 ? false : _c;
      var hasValue = false;
      var sendValue = null;
      var throttled = null;
      var isComplete = false;
      var endThrottling = function() {
        throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
        throttled = null;
        if (trailing) {
          send();
          isComplete && subscriber.complete();
        }
      };
      var cleanupThrottling = function() {
        throttled = null;
        isComplete && subscriber.complete();
      };
      var startThrottle = function(value) {
        return throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling));
      };
      var send = function() {
        if (hasValue) {
          hasValue = false;
          var value = sendValue;
          sendValue = null;
          subscriber.next(value);
          !isComplete && startThrottle(value);
        }
      };
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        hasValue = true;
        sendValue = value;
        !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
      }, function() {
        isComplete = true;
        !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
      }));
    });
  }

  // node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js
  function throttleTime(duration, scheduler, config2) {
    if (scheduler === void 0) {
      scheduler = asyncScheduler;
    }
    var duration$ = timer(duration, scheduler);
    return throttle(function() {
      return duration$;
    }, config2);
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/patcher/compare.js
  function compare2(a2, b2) {
    const patch = compare(a2, b2).filter((op) => !op.path.startsWith("/size"));
    const relationshipIdsWithAffectedPaths = [];
    patch.forEach((op) => {
      const match2 = /\/relationships\/(?<id>[\w-]+)\/path/g.exec(op.path);
      if (match2?.groups?.id && !relationshipIdsWithAffectedPaths.includes(match2.groups.id)) {
        relationshipIdsWithAffectedPaths.push(match2.groups.id);
      }
    });
    const cleanedPatch = patch.filter((op) => {
      const match2 = /\/relationships\/(?<id>[\w-]+)\//g.exec(op.path);
      return !match2?.groups?.id || !relationshipIdsWithAffectedPaths.includes(match2.groups.id);
    });
    relationshipIdsWithAffectedPaths.forEach((id2) => {
      const brel = b2.relationships[id2];
      cleanedPatch.push({
        op: "replace",
        path: `/relationships/${id2}/isManuallyLayouted`,
        value: brel.isManuallyLayouted
      });
      cleanedPatch.push({
        op: "replace",
        path: `/relationships/${id2}/path`,
        value: brel.path
      });
      cleanedPatch.push({
        op: "replace",
        path: `/relationships/${id2}/bounds`,
        value: brel.bounds
      });
    });
    return cleanedPatch;
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/patcher/patch-verifier.js
  function isReplaceOperation(operation) {
    return operation.op === "replace";
  }
  function isSignedOperation(operation) {
    return !isReplaceOperation(operation) || "hash" in operation;
  }
  var PatchVerifier = class _PatchVerifier {
    constructor() {
      this.waitlist = {};
      this.cleanup = new Subject();
      this.cleanup.pipe(groupBy((path) => path), mergeMap((group) => group.pipe(debounceTime(_PatchVerifier.SUPRESSION_WINDOW))), tap((path) => delete this.waitlist[path])).subscribe();
    }
    /**
     * Signs an operation and tracks it. Only replace operations are signed and tracked.
     * @param operation
     * @returns The signed version of the operation (to be sent to the server)
     */
    signOperation(operation) {
      if (isReplaceOperation(operation)) {
        const hash = Math.random().toString(36).substring(2, 15);
        const path = operation.path;
        this.waitlist[path] = hash;
        this.cleanup.next(path);
        return { ...operation, hash };
      } else {
        return operation;
      }
    }
    /**
     * Signs all operations inside the patch.
     * @param patch
     * @returns the signed patch (to be sent to the server)
     */
    sign(patch) {
      return patch.map((op) => this.signOperation(op));
    }
    /**
     * Checks whether the operation should be applied or should it be optimisitcally discarded.
     * - If the operation is not a replace operation, it is always applied.
     * - If the operation is a replace operation but it is not signed, it is always applied.
     * - If the operation is a signed replace operation and no other operation with the same path is tracked,
     *   it will be applied.
     * - Otherwise it will be discarded.
     *
     * If it receives an operation that is already tracked, it will be discarded, and the
     * operation will be untracked (so following operations on the same path will be applied).
     *
     * @param operation
     * @returns true if the operation should be applied, false if it should be discarded.
     */
    isVerifiedOperation(operation) {
      if (isReplaceOperation(operation) && isSignedOperation(operation) && operation.path in this.waitlist) {
        if (this.waitlist[operation.path] === operation.hash) {
          delete this.waitlist[operation.path];
        }
        return false;
      } else {
        return true;
      }
    }
    /**
     * Filters an incoming patch, only leaving the operations that should be applied.
     * @param patch
     * @returns a patch with operations that should be applied.
     */
    verified(patch) {
      return patch.filter((op) => this.isVerifiedOperation(op));
    }
  };
  PatchVerifier.SUPRESSION_WINDOW = 200;

  // node_modules/@ls1intum/apollon/lib/es6/services/patcher/patcher.js
  var _DefaultOptions = {
    diff: compare2,
    maxFrequency: 60
  };
  var Patcher = class {
    /**
     * @param diff A function that compares two objects and returns the difference
     * in the form of a [JSON patch](http://jsonpatch.com/).
     */
    constructor(options = _DefaultOptions) {
      this.subscribers = {};
      this.discreteRouter = new Subject();
      this.continuousRouter = new Subject();
      this.verifier = new PatchVerifier();
      this.options = {
        diff: options.diff || _DefaultOptions.diff,
        maxFrequency: options.maxFrequency || _DefaultOptions.maxFrequency
      };
      this.continuousPatchObservable = this.continuousRouter.pipe(throttleTime(1e3 / this.options.maxFrequency));
      const router = merge(this.discreteRouter, this.continuousPatchObservable);
      this.observable = router.pipe(buffer3(router.pipe(debounceTime(0))), map((patches) => patches.flat()), filter((patches) => patches.length > 0));
    }
    /**
     * @returns The current state of the object.
     */
    get snapshot() {
      return this._snapshot;
    }
    /**
     * Updates its snapshots, checks for changes and notifies subscribers.
     * @param nextState The next state of the object.
     */
    check(nextState) {
      this.checkAndUpdate(nextState);
    }
    /**
     * Updates its snapshots, checks for continuous changes and notifies subscribers.
     * Continuous changes are changes that happen frequently, such as mouse movement,
     * and are ok to miss a few.
     * @param nextState The next state of the object.
     */
    checkContinuous(nextState) {
      this.checkAndUpdate(nextState, false);
    }
    /**
     * Initializes the patcher with the initial state of the object.
     * @param state The initial state of the object.
     */
    initialize(state) {
      this._snapshot = state;
    }
    /**
     * Applies a patch to the object. Will NOT notify subscribers.
     * @param patch The patch to apply.
     * @returns The whether the state should change, and the new state of the object.
     */
    patch(patch, state) {
      this.validate();
      const verified = this.verifier.verified(patch);
      this._snapshot = state ?? this._snapshot;
      if (verified && verified.length > 0) {
        this._snapshot = verified.reduce((state2, p, index) => {
          try {
            return applyReducer(state2, p, index);
          } catch {
            return state2;
          }
        }, this.snapshot);
        return { patched: true, result: this.snapshot };
      }
      return { patched: false, result: this.snapshot };
    }
    /**
     * Subscribes to changes to the object.
     * @param listener A function that will be called when the object changes.
     * @returns A subscription ID that can be used to unsubscribe.
     */
    subscribe(listener) {
      const key = this.nextKey();
      this.subscribers[key] = this.observable.subscribe(listener);
      return key;
    }
    /**
     * Subscribes to discrete changes to the object. Discrete changes are changes
     * that happen infrequently, such as a button click, and should not be missed.
     * @param listener A function that will be called when the object changes.
     * @returns A subscription ID that can be used to unsubscribe.
     */
    subscribeToDiscreteChanges(listener) {
      const key = this.nextKey();
      this.subscribers[key] = this.discreteRouter.subscribe(listener);
      return key;
    }
    /**
     * Subscribes to continuous changes to the object. Continuous changes are changes
     * that happen frequently, such as mouse movement, and are ok to miss a few.
     * @param listener A function that will be called when the object changes.
     * @returns A subscription ID that can be used to unsubscribe.
     */
    subscribeToContinuousChanges(listener) {
      const key = this.nextKey();
      this.subscribers[key] = this.continuousPatchObservable.subscribe(listener);
      return key;
    }
    /**
     * Unsubscribes from changes to the object.
     * @param subscriptionId The subscription ID returned by `subscribe`.
     */
    unsubscribe(subscriptionId) {
      this.subscribers[subscriptionId].unsubscribe();
      delete this.subscribers[subscriptionId];
    }
    // checks for changes and notifies subscribers, using given router
    checkAndUpdate(nextState, discreteChange = true) {
      this.validate();
      const skip = Object.keys(this.subscribers).length === 0;
      const patch = !skip && this.options.diff(this.snapshot, nextState);
      if (discreteChange) {
        this._snapshot = nextState;
      }
      if (patch && patch.length) {
        const router = discreteChange ? this.discreteRouter : this.continuousRouter;
        router.next(this.verifier.sign(patch));
      }
    }
    // generates a unique key for a subscription
    nextKey() {
      return Math.max(...Object.keys(this.subscribers).map((k2) => parseInt(k2, 10)), 0) + 1;
    }
    // throws if patcher is not initialized
    validate() {
      if (!this.snapshot) {
        throw new Error("Patcher not initialized");
      }
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/patcher/patcher-middleware.js
  var _DefaultOptions2 = {
    transform: (state) => state,
    selectDiscrete: () => true,
    selectContinuous: () => false
  };
  function createPatcherMiddleware(patcher, options = _DefaultOptions2) {
    const transform = options.transform || _DefaultOptions2.transform;
    const selectDiscrete = options.selectDiscrete || _DefaultOptions2.selectDiscrete;
    const selectContinuous = options.selectContinuous || _DefaultOptions2.selectContinuous;
    return (store) => {
      patcher.initialize(transform(store.getState()));
      return (next) => (action) => {
        const res = next(action);
        if (selectDiscrete(action)) {
          patcher.check(transform(store.getState()));
        } else if (selectContinuous(action)) {
          patcher.checkContinuous(transform(store.getState()));
        }
        return res;
      };
    };
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/patcher/patcher-repository.js
  var PatcherRepository = {
    /**
     * Creates an action representing impoprting a patch.
     * @param patch The patch to import.
     */
    patch: (patch) => ({
      type: "@@patcher/PATCH",
      payload: patch,
      undoable: false
    })
  };

  // node_modules/@ls1intum/apollon/lib/es6/services/patcher/patcher-reducer.js
  var _DefaultOptions3 = {
    transform: (state) => state,
    transformInverse: (state) => state,
    merge: (oldState, newState) => ({ ...oldState, ...newState })
  };
  function createPatcherReducer(patcher, options = _DefaultOptions3) {
    const transform = options.transform || _DefaultOptions3.transform;
    const transformInverse = options.transformInverse || _DefaultOptions3.transformInverse;
    const merge3 = options.merge || _DefaultOptions3.merge;
    return (state, action) => {
      const { type, payload } = action;
      if (type === "@@patcher/PATCH") {
        const res = patcher.patch(payload, transformInverse(state));
        if (res.patched) {
          return merge3(state ?? {}, transform(res.result));
        }
      }
      return state;
    };
  }

  // node_modules/@ls1intum/apollon/lib/es6/services/patcher/patcher-types.js
  var isDiscreteAction = (action) => {
    return action.type.endsWith("END") || action.type.endsWith("DELETE") || action.type.endsWith("UNDO") || action.type.endsWith("REDO");
  };
  var isSelectionAction = (action) => {
    return action.type === "@@element/selectable/SELECT" || action.type === "@@element/selectable/DESELECT";
  };
  var isContinuousAction = (action) => {
    return action.type === "@@element/movable/MOVE" || action.type === "@@element/resizable/RESIZE";
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/store/merge.js
  function merge2(oldState, newState) {
    return {
      ...oldState,
      diagram: {
        ...oldState.diagram,
        ownedElements: Object.keys(newState.elements).filter((id2) => !newState.elements[id2].owner),
        ownedRelationships: oldState.diagram.ownedRelationships.filter((id2) => !!newState.elements[id2])
      },
      elements: Object.keys(newState.elements).reduce((acc, id2) => {
        return {
          ...acc,
          [id2]: {
            ...oldState.elements[id2],
            ...newState.elements[id2]
          }
        };
      }, {}),
      interactive: newState.interactive,
      assessments: Object.keys(newState.assessments).reduce((acc, id2) => {
        return {
          ...acc,
          [id2]: {
            ...oldState.assessments[id2],
            ...newState.assessments[id2]
          }
        };
      }, {})
    };
  }

  // node_modules/@ls1intum/apollon/lib/es6/components/store/model-store.js
  var createReduxStore = (initialState13 = {}, layer = null, patcher) => {
    const baseReducer = undoable(combineReducers(reducers));
    const patchReducer = patcher && createPatcherReducer(patcher, {
      transform: (model) => ModelState.fromModel(model),
      transformInverse: (state) => ModelState.toModel(state),
      merge: merge2
    });
    const reducer = (state, action) => {
      const baseState = baseReducer(state, action);
      if (patchReducer) {
        return patchReducer(baseState, action);
      } else {
        return baseState;
      }
    };
    const sagaMiddleware = redux_saga_core_npm_proxy_esm_default({ context: { layer } });
    const middleware = applyMiddleware(...[
      es_default,
      sagaMiddleware,
      ...patcher ? [
        createPatcherMiddleware(patcher, {
          selectDiscrete: (action) => isDiscreteAction(action) || isSelectionAction(action),
          selectContinuous: (action) => isContinuousAction(action),
          transform: (state) => ModelState.toModel(state)
        })
      ] : []
    ]);
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;
    const enhancer = composeEnhancers(middleware);
    const store = createStore(reducer, initialState13, enhancer);
    if (layer) {
      sagaMiddleware.run(saga);
      store.dispatch(LayouterRepository.layout());
    }
    return store;
  };
  var getInitialState4 = (initialState13 = {}, layer = null, patcher) => {
    const store = createReduxStore(initialState13, layer, patcher);
    return { store };
  };
  var ModelStore = class extends import_react130.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState4(this.props.initialState, this.props.canvas, this.props.patcher);
    }
    componentDidUpdate(prevProps) {
      if (prevProps.canvas !== this.props.canvas) {
        const state = getInitialState4(this.props.initialState, this.props.canvas, this.props.patcher);
        this.setState(state);
      }
    }
    render() {
      return import_react130.default.createElement(Provider_default, { store: this.state.store }, this.props.children);
    }
  };
  var StoreProvider = withCanvas(ModelStore);

  // node_modules/@ls1intum/apollon/lib/es6/components/create-pane/preview-element-component.js
  var import_react132 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/draggable/draggable.js
  var import_react131 = __toESM(require_react());
  var import_react_dom11 = __toESM(require_react_dom());
  var import_is_mobile7 = __toESM(require_is_mobile());
  var enhance27 = withDraggable;
  var DraggableComponent = class extends import_react131.Component {
    constructor() {
      super(...arguments);
      this.onDragStart = async (event) => {
        try {
          const dropEvent = await this.props.onDragStart(event);
          if (this.props.onDrop) {
            this.props.onDrop(dropEvent);
          }
        } catch (error) {
        }
      };
    }
    componentDidMount() {
      const node = (0, import_react_dom11.findDOMNode)(this);
      if ((0, import_is_mobile7.default)({ tablet: true })) {
        node.addEventListener("touchstart", this.onDragStart);
        node.addEventListener("touchend", convertTouchEndIntoPointerUp);
      } else {
        node.addEventListener("pointerdown", this.onDragStart);
      }
    }
    componentWillUnmount() {
      const node = (0, import_react_dom11.findDOMNode)(this);
      if ((0, import_is_mobile7.default)({ tablet: true })) {
        node.removeEventListener("touchstart", this.onDragStart);
      } else {
        node.removeEventListener("pointerdown", this.onDragStart);
      }
    }
    render() {
      return this.props.children;
    }
  };
  var Draggable = enhance27(DraggableComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/create-pane/preview-element-component.js
  var Preview2 = styled(hoverable(CanvasElement)).attrs((props) => ({
    child: CanvasElement,
    scale: props.scale
  }))`
  overflow: visible;
  fill: white;
  scale: ${(props) => props.scale ?? 0.8};
  transform-origin: center;
`;
  var PreviewElementComponent = class extends import_react132.Component {
    constructor() {
      super(...arguments);
      this.onDrop = (event) => {
        const element = this.props.element.clone({
          bounds: { ...this.props.element.bounds, ...event.position }
        });
        this.props.create(element, event.owner);
      };
    }
    render() {
      const { element } = this.props;
      return import_react132.default.createElement(
        Draggable,
        { onDrop: this.onDrop },
        import_react132.default.createElement(Preview2, { id: element.id })
      );
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/petri-net-preview.js
  var composePetriNetPreview = (layer, translate) => {
    const elements = [];
    UMLPetriNetTransition.defaultHeight = computeDimension(1, 60);
    UMLPetriNetTransition.defaultWidth = computeDimension(1, 25);
    const petriNetTransition = new UMLPetriNetTransition({ name: translate("packages.PetriNet.PetriNetTransition") });
    elements.push(Object.assign(petriNetTransition, {
      styles: {
        marginTop: "25px"
      }
    }));
    const petriNetPlace = new UMLPetriNetPlace({
      name: translate("packages.PetriNet.PetriNetPlace"),
      bounds: {
        x: 0,
        y: 0,
        width: computeDimension(1, 60),
        height: computeDimension(1, 60)
      }
    });
    elements.push(petriNetPlace);
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-reachability-graph/reachability-graph-preview.js
  var composeReachabilityGraphPreview = (layer, translate) => {
    const elements = [];
    const umlReachabilityGraphMarking = new UMLReachabilityGraphMarking({
      name: translate("packages.ReachabilityGraph.ReachabilityGraphMarking"),
      bounds: { x: 0, y: 0, width: 160, height: 100 }
    });
    elements.push(umlReachabilityGraphMarking);
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/syntax-tree-preview.js
  var composeSyntaxTreePreview = (layer, translate) => {
    const elements = [];
    const defaultBounds = { x: 0, y: 0, width: 100, height: 50 };
    elements.push(new SyntaxTreeNonterminal({ name: "", bounds: defaultBounds }));
    elements.push(new SyntaxTreeTerminal({ name: "", bounds: defaultBounds }));
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-diagram-preview.js
  var composeFlowchartPreview = (layer, translate) => {
    const elements = [];
    const defaultBounds = { x: 0, y: 0, width: 160, height: computeDimension(1, 70) };
    elements.push(new FlowchartTerminal({
      name: translate("packages.Flowchart.FlowchartTerminal"),
      bounds: defaultBounds
    }));
    elements.push(new FlowchartProcess({
      name: translate("packages.Flowchart.FlowchartProcess"),
      bounds: defaultBounds
    }));
    elements.push(new FlowchartDecision({
      name: translate("packages.Flowchart.FlowchartDecision"),
      bounds: defaultBounds
    }));
    elements.push(new FlowchartInputOutput({
      name: translate("packages.Flowchart.FlowchartInputOutput"),
      bounds: {
        ...defaultBounds,
        width: 140
      }
    }));
    elements.push(new FlowchartFunctionCall({
      name: translate("packages.Flowchart.FlowchartFunctionCall"),
      bounds: defaultBounds
    }));
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/create-pane/create-pane-styles.js
  var Separator = styled.div`
  width: 100%;
  text-align: center;
  margin: 1rem 0;
  height: 2px;
  background-color: ${(props) => props.theme.color.primaryContrast};
`;

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-diagram-preview.js
  var composeBPMNPreview = (layer, translate) => {
    const elements = [];
    const defaultBounds = { x: 0, y: 0, width: 160, height: 60 };
    elements.push(new BPMNTask({
      name: translate("packages.BPMN.BPMNTask"),
      bounds: defaultBounds
    }));
    elements.push(new BPMNSubprocess({
      name: translate("packages.BPMN.BPMNSubprocess"),
      bounds: defaultBounds
    }));
    elements.push(new BPMNTransaction({
      name: translate("packages.BPMN.BPMNTransaction"),
      bounds: defaultBounds
    }));
    elements.push(new BPMNCallActivity({
      name: translate("packages.BPMN.BPMNCallActivity"),
      bounds: defaultBounds
    }));
    elements.push(new BPMNGroup({
      bounds: defaultBounds
    }));
    elements.push(new BPMNAnnotation({
      name: translate("packages.BPMN.BPMNAnnotation"),
      bounds: defaultBounds
    }));
    elements.push(new BPMNStartEvent({
      bounds: { x: 0, y: 0, width: 40, height: 40 }
    }));
    elements.push(new BPMNIntermediateEvent({
      bounds: { x: 0, y: 0, width: 40, height: 40 }
    }));
    elements.push(new BPMNEndEvent({
      bounds: { x: 0, y: 0, width: 40, height: 40 }
    }));
    elements.push(new BPMNGateway({
      bounds: { x: 0, y: 0, width: 40, height: 40 }
    }));
    elements.push(new BPMNDataObject({
      bounds: { x: 0, y: 0, width: 40, height: 60 }
    }));
    elements.push(new BPMNDataStore({
      bounds: { x: 0, y: 0, width: 60, height: 60 }
    }));
    elements.push(new BPMNPool({
      name: translate("packages.BPMN.BPMNPool"),
      bounds: { x: 0, y: 0, width: 160, height: 80 }
    }));
    return elements;
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/create-pane/create-pane.js
  var getInitialState5 = ({ type, canvas, translate, colorEnabled }) => {
    const previews = [];
    const utils = [];
    switch (type) {
      case UMLDiagramType.ClassDiagram:
        previews.push(...composeClassPreview(canvas, translate));
        break;
      case UMLDiagramType.ObjectDiagram:
        previews.push(...composeObjectPreview(canvas, translate));
        break;
      case UMLDiagramType.ActivityDiagram:
        previews.push(...composeActivityPreview(canvas, translate));
        break;
      case UMLDiagramType.UseCaseDiagram:
        previews.push(...composeUseCasePreview(canvas, translate));
        break;
      case UMLDiagramType.CommunicationDiagram:
        previews.push(...composeCommunicationPreview(canvas, translate));
        break;
      case UMLDiagramType.ComponentDiagram:
        previews.push(...composeComponentPreview(canvas, translate));
        break;
      case UMLDiagramType.DeploymentDiagram:
        previews.push(...composeDeploymentPreview(canvas, translate));
        break;
      case UMLDiagramType.PetriNet:
        previews.push(...composePetriNetPreview(canvas, translate));
        break;
      case UMLDiagramType.ReachabilityGraph:
        previews.push(...composeReachabilityGraphPreview(canvas, translate));
        break;
      case UMLDiagramType.SyntaxTree:
        previews.push(...composeSyntaxTreePreview(canvas, translate));
        break;
      case UMLDiagramType.Flowchart:
        previews.push(...composeFlowchartPreview(canvas, translate));
        break;
      case UMLDiagramType.BPMN:
        previews.push(...composeBPMNPreview(canvas, translate));
        break;
    }
    if (colorEnabled) {
      utils.push(new ColorLegend({
        name: translate("packages.ColorLegend.ColorLegend")
      }));
    }
    return { previews, utils };
  };
  var enhance28 = compose(localized, withCanvas, connect_default((state) => ({
    type: state.diagram.type,
    colorEnabled: state.editor.colorEnabled
  }), {
    create: UMLElementRepository.create
  }));
  var CreatePaneComponent = class extends import_react133.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState5(this.props);
      this.getElementArray = (previews) => {
        return Object.values(previews).filter((preview) => !preview.owner).map((preview, index) => {
          const { styles: previewStyles } = preview;
          return import_react133.default.createElement(
            "div",
            { style: { ...previewStyles, height: preview.bounds.height * (this.props?.previewScaleFactor ?? 0.8) + 8 }, key: index },
            import_react133.default.createElement(PreviewElementComponent, { element: preview, create: this.create })
          );
        });
      };
      this.create = (preview, owner) => {
        const elements = clone(preview, this.state.previews);
        this.props.create(elements, owner);
      };
    }
    render() {
      const features = {
        hoverable: false,
        selectable: false,
        movable: false,
        resizable: false,
        connectable: false,
        updatable: false,
        droppable: false,
        alternativePortVisualization: false
      };
      const { previews, utils } = this.state;
      const elements = [...previews, ...utils].reduce((state, preview) => ({
        ...state,
        [preview.id]: { ...preview }
      }), {});
      return import_react133.default.createElement(
        StoreProvider,
        { initialState: { elements, editor: { features } } },
        import_react133.default.createElement("div", { style: { display: "flex", flexDirection: "column", alignItems: "center", gap: 8 } }, this.getElementArray(previews)),
        utils && utils.length > 0 ? import_react133.default.createElement(
          import_react133.default.Fragment,
          null,
          import_react133.default.createElement(Separator, null),
          this.getElementArray(utils)
        ) : null
      );
    }
  };
  var CreatePane = enhance28(CreatePaneComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/sidebar/sidebar-styles.js
  var Container2 = styled_components_browser_esm_default.aside.attrs({})`
  flex: 0 0 148px;
  padding: 0 10px;
  height: 100%;
  min-height: inherit;
  max-height: inherit;
  overflow-x: hidden;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  align-items: center;

  svg {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/sidebar/sidebar-component.js
  var enhance29 = compose(localized, connect_default((state) => ({
    readonly: state.editor.readonly,
    mode: state.editor.mode,
    view: state.editor.view,
    selected: state.selected
  }), {
    changeView: EditorRepository.changeView
  }));
  var SidebarComponent = class extends import_react134.Component {
    constructor() {
      super(...arguments);
      this.toggleInteractiveElementsMode = (event) => {
        const { checked } = event.currentTarget;
        const view = checked ? "Exporting" : "Highlight";
        this.props.changeView(view);
      };
    }
    render() {
      if (this.props.readonly || this.props.mode === ApollonMode.Assessment)
        return null;
      return import_react134.default.createElement(
        Container2,
        { id: "modeling-editor-sidebar", "data-cy": "modeling-editor-sidebar" },
        this.props.mode === ApollonMode.Exporting && import_react134.default.createElement(
          "div",
          { className: "dropdown", style: { width: 128 } },
          import_react134.default.createElement(
            "select",
            { value: this.props.view, onChange: (event) => this.props.changeView(event.target.value), color: "primary" },
            import_react134.default.createElement("option", {
              value: "Modelling"
              /* ApollonView.Modelling */
            }, this.props.translate("views.modelling")),
            import_react134.default.createElement("option", {
              value: "Exporting"
              /* ApollonView.Exporting */
            }, this.props.translate("views.exporting"))
          )
        ),
        this.props.view === "Modelling" ? import_react134.default.createElement(CreatePane, null) : import_react134.default.createElement(
          "label",
          { htmlFor: "toggleInteractiveElementsMode" },
          import_react134.default.createElement("input", { id: "toggleInteractiveElementsMode", type: "checkbox", checked: this.props.view === "Exporting", onChange: this.toggleInteractiveElementsMode }),
          this.props.translate("views.highlight")
        )
      );
    }
  };
  var Sidebar = enhance29(SidebarComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/theme/theme.js
  var import_react135 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/utils/update.js
  var update2 = (target, source) => {
    let clone2 = { ...target };
    for (let [key, value] of Object.entries(source)) {
      if (value instanceof Object) {
        value = update2(clone2[key], value);
      }
      clone2 = { ...clone2, [key]: value };
    }
    return clone2;
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/theme/theme.js
  var defaultProps2 = {
    styles: {}
  };
  var Theme = class extends import_react135.Component {
    constructor() {
      super(...arguments);
      this.theme = update2(defaults(), this.props.styles);
    }
    render() {
      return import_react135.default.createElement(Le, { theme: this.theme }, this.props.children);
    }
  };
  Theme.defaultProps = defaultProps2;

  // node_modules/@ls1intum/apollon/lib/es6/components/update-pane/update-pane.js
  var import_react196 = __toESM(require_react());
  var import_react_dom12 = __toESM(require_react_dom());

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/default-popup.js
  var import_react143 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/button/button.js
  var import_react136 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/utils/color.js
  function hexToHSL(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (!result)
      return { h: 0, s: 0, l: 0 };
    const r2 = parseInt(result[1], 16) / 255;
    const g2 = parseInt(result[2], 16) / 255;
    const b2 = parseInt(result[3], 16) / 255;
    const max2 = Math.max(r2, g2, b2);
    const min2 = Math.min(r2, g2, b2);
    let h = 0;
    let s2 = 0;
    const l2 = (max2 + min2) / 2;
    if (max2 === min2) {
      h = s2 = 0;
    } else {
      const d2 = max2 - min2;
      s2 = l2 > 0.5 ? d2 / (2 - max2 - min2) : d2 / (max2 + min2);
      switch (max2) {
        case r2:
          h = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
          break;
        case g2:
          h = (b2 - r2) / d2 + 2;
          break;
        case b2:
          h = (r2 - g2) / d2 + 4;
          break;
      }
      h /= 6;
    }
    return { h, s: s2, l: l2 };
  }
  function hslToHex({ h, s: s2, l: l2 }) {
    let r2 = 0;
    let g2 = 0;
    let b2 = 0;
    if (s2 === 0) {
      r2 = g2 = b2 = l2;
    } else {
      const hue2rgb = (p1, q1, t1) => {
        if (t1 < 0)
          t1 += 1;
        if (t1 > 1)
          t1 -= 1;
        if (t1 < 1 / 6)
          return p1 + (q1 - p1) * 6 * t1;
        if (t1 < 1 / 2)
          return q1;
        if (t1 < 2 / 3)
          return p1 + (q1 - p1) * (2 / 3 - t1) * 6;
        return p1;
      };
      const q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
      const p = 2 * l2 - q2;
      r2 = hue2rgb(p, q2, h + 1 / 3);
      g2 = hue2rgb(p, q2, h);
      b2 = hue2rgb(p, q2, h - 1 / 3);
    }
    r2 = Math.round(r2 * 255);
    g2 = Math.round(g2 * 255);
    b2 = Math.round(b2 * 255);
    const checkHex = (v2) => {
      return 1 === v2.length ? "0" + v2 : v2;
    };
    return "#" + checkHex(r2.toString(16)) + checkHex(g2.toString(16)) + checkHex(b2.toString(16));
  }
  var darken = (color, amount) => {
    const hsl = hexToHSL(color);
    const result = { ...hsl, l: hsl.l - amount / 100 };
    return hslToHex(result);
  };
  var lighten = (color, amount) => {
    const hsl = hexToHSL(color);
    const result = { ...hsl, l: hsl.l + amount / 100 };
    return hslToHex(result);
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/button/button-styles.js
  var HOVER_BACKGROUND_DARKEN = 7.5;
  var HOVER_BORDER_DARKEN = 10;
  var ACTIVE_BACKGROUND_DARKEN = 10;
  var ACTIVE_BORDER_DARKEN = 12.5;
  var Button = styled.button`
  appearance: button;
  background-color: transparent;
  border: 1px solid transparent;
  border-radius: 0.25em;
  font-family: inherit;
  font-size: 1em;
  font-weight: 400;
  line-height: 1.5;
  margin: 0;
  overflow: visible;
  padding: 0.375em 0.75em;
  text-transform: none;
  transition:
    color 0.15s ease-in-out,
    background-color 0.15s ease-in-out,
    border-color 0.15s ease-in-out,
    box-shadow 0.15s ease-in-out;
  user-select: none;

  svg {
    pointer-events: none;
  }

  ::-moz-focus-inner {
    border-style: none;
    padding: 0;
  }

  :focus {
    outline: 0;
  }

  :not(:disabled) {
    cursor: pointer;
  }
`;
  var StyledButton = styled(Button)((props) => {
    const color = props.color !== "link" ? props.theme.color[props.color] : props.theme.color.primary;
    return css`
    ${props.block && css`
      display: block;
      width: 100%;
    `}

    ${props.disabled && css`
      opacity: 0.65;
    `}

    ${props.size === "sm" && css`
      border-radius: 0.2em;
      font-size: 0.875em;
      padding: 0.25em 0.5em;
    `}

    ${props.size === "lg" && css`
      border-radius: 0.3em;
      font-size: 1.25em;
      padding: 0.5em 1em;
    `}

    ${props.color === "link" && css`
      color: ${props.theme.color.primary};
      text-decoration: none;
      fill: ${props.theme.color.primaryContrast};
    `}

    ${props.color !== "link" && css`
      :focus {
        box-shadow: 0 0 0 0.2em ${color}80;
      }
    `}

    ${props.color !== "link" && !props.outline && css`
      background-color: ${color};
      border-color: ${color};
      color: ${props.theme.color.background};

      :hover {
        background-color: ${darken(color, HOVER_BACKGROUND_DARKEN)};
        border-color: ${darken(color, HOVER_BORDER_DARKEN)};
      }

      :active {
        background-color: ${darken(color, ACTIVE_BACKGROUND_DARKEN)};
        border-color: ${darken(color, ACTIVE_BORDER_DARKEN)};
      }
    `}

    ${props.color !== "link" && props.outline && css`
      border-color: ${color};
      color: ${color};

      :hover {
        background-color: ${color};
        color: ${props.theme.color.background};
      }
    `}
  `;
  });

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/button/button.js
  var defaultProps3 = Object.freeze({
    block: false,
    color: "secondary",
    disabled: false,
    outline: false,
    size: "sm"
  });
  var Button2 = (0, import_react136.forwardRef)((props, ref) => (0, import_react136.createElement)(StyledButton, { ...props, ref }));
  Button2.defaultProps = defaultProps3;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/color-button/color-button.js
  var import_react138 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/roller.js
  var import_react137 = __toESM(require_react());
  var RollerIcon = (props) => import_react137.default.createElement(
    Icon,
    { viewBox: "0 0 107.01 122.88", ...props },
    import_react137.default.createElement("path", { d: "M107.01,20.54h-3.62v3.08c0,2.93-1.19,5.58-3.12,7.51c-1.93,1.92-4.58,3.12-7.51,3.12H22.71c-2.93,0-5.58-1.19-7.51-3.12 c-1.93-1.93-3.12-4.58-3.12-7.51V20.1h-1.45c-1.54,0-2.94,0.63-3.96,1.65c-1.02,1.02-1.65,2.42-1.65,3.96v16.24 c0,1.54,0.63,2.94,1.65,3.96c1.02,1.02,2.42,1.65,3.96,1.65h28.31c1.23,0,1.66-0.01,2.08-0.01c4.87-0.08,10.31-0.17,14.56,2.91 c1.46,1.05,2.62,2.39,3.46,4.04c0.81,1.58,1.3,3.44,1.46,5.59c0,0.06,0.01,0.12,0.01,0.18h0v8.21h4.29c1.88,0,3.59,0.77,4.82,2 c1.24,1.24,2,2.94,2,4.82v40.76c0,1.88-0.77,3.59-2,4.82c-1.24,1.24-2.94,2-4.82,2H51.46c-1.88,0-3.59-0.77-4.82-2 c-1.24-1.24-2-2.94-2-4.82V75.3c0-1.88,0.77-3.59,2-4.82c1.24-1.24,2.94-2,4.82-2h4.03v-8.16c-0.11-1.4-0.43-2.57-0.92-3.54 c-0.47-0.93-1.12-1.67-1.93-2.26c-2.91-2.11-7.47-2.04-11.54-1.97c-1.02,0.02-2.02,0.03-2.16,0.03H10.63 c-2.93,0-5.58-1.19-7.51-3.12C1.19,47.53,0,44.87,0,41.95V25.71c0-2.93,1.2-5.58,3.12-7.51c1.93-1.92,4.58-3.12,7.51-3.12h1.45 v-4.45c0-2.93,1.19-5.58,3.12-7.51C17.13,1.19,19.78,0,22.71,0h70.05c2.93,0,5.58,1.19,7.51,3.12c1.93,1.92,3.12,4.58,3.12,7.51 v4.89h3.62V20.54L107.01,20.54z M92.76,5.01H22.71c-1.54,0-2.94,0.63-3.96,1.65c-1.02,1.02-1.65,2.42-1.65,3.96v12.99 c0,1.54,0.63,2.94,1.65,3.96c1.02,1.02,2.42,1.65,3.96,1.65h70.05c1.54,0,2.94-0.63,3.96-1.65c1.02-1.02,1.65-2.42,1.65-3.96V10.63 c0-1.54-0.63-2.94-1.65-3.96C95.7,5.65,94.3,5.01,92.76,5.01L92.76,5.01z M64.79,73.49H51.46c-0.49,0-0.95,0.2-1.28,0.53 c-0.33,0.33-0.53,0.78-0.53,1.28v40.76c0,0.49,0.2,0.95,0.53,1.28c0.33,0.33,0.78,0.53,1.28,0.53h13.33c0.49,0,0.95-0.2,1.28-0.53 c0.33-0.33,0.53-0.78,0.53-1.28V75.3c0-0.49-0.2-0.95-0.53-1.28C65.74,73.69,65.28,73.49,64.79,73.49L64.79,73.49z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/color-button/color-button.js
  function ColorButtonComponent({ onClick, colorEnabled }) {
    if (!colorEnabled) {
      return null;
    }
    return import_react138.default.createElement(
      Button2,
      { color: "link", tabIndex: -1, onClick },
      import_react138.default.createElement(RollerIcon, null)
    );
  }
  var ColorButton = connect_default((state) => ({
    colorEnabled: state.editor.colorEnabled
  }))(ColorButtonComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/trash.js
  var import_react139 = __toESM(require_react());
  var TrashIcon = (props) => import_react139.default.createElement(
    Icon,
    { viewBox: "0 0 448 512", ...props },
    import_react139.default.createElement("path", { d: "M440 64H336l-33.6-44.8A48 48 0 0 0 264 0h-80a48 48 0 0 0-38.4 19.2L112 64H8a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h18.9l33.2 372.3a48 48 0 0 0 47.8 43.7h232.2a48 48 0 0 0 47.8-43.7L421.1 96H440a8 8 0 0 0 8-8V72a8 8 0 0 0-8-8zM171.2 38.4A16.1 16.1 0 0 1 184 32h80a16.1 16.1 0 0 1 12.8 6.4L296 64H152zm184.8 427a15.91 15.91 0 0 1-15.9 14.6H107.9A15.91 15.91 0 0 1 92 465.4L59 96h330z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/textfield/textfield.js
  var import_react140 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/textfield/textfield-styled.js
  var FOCUS_BORDER_LIGHTEN = 25;
  var Input = styled.textarea`
  background-clip: padding-box;
  background-color: ${(props) => props.theme.color.background};
  border: 1px solid ${(props) => props.theme.color.grayAccent};
  border-radius: 0.25em;
  color: ${(props) => props.theme.color.grayAccent};
  font-family: ${(props) => props.theme.font.family}, sans-serif;
  font-size: 1em;
  font-weight: 400;
  line-height: 1.5;
  margin: 0;
  overflow: visible;
  padding: 0.375em 0.75em;
  transition:
    border-color 0.15s ease-in-out,
    box-shadow 0.15s ease-in-out;

  :focus {
    border-color: ${(props) => lighten(props.theme.color.primary, FOCUS_BORDER_LIGHTEN)};
    outline: 0;
    box-shadow: 0 0 0 0.2em ${(props) => props.theme.color.primary}40;
  }

  ::placeholder {
    color: ${(props) => props.theme.color.grayAccent};
    opacity: 1;
  }
`;
  var StyledTextfield = styled(Input)((props) => css`
    ${props.gutter && css`
      margin-bottom: 0.5em;
    `}

    ${props.multiline && css`
      resize: vertical;
    `}

    ${props.outline && css`
      &:not(:focus) {
        border-style: dashed;
      }

      &:not(:focus):not(:hover) {
        background: ${props.theme.color.background};
        opacity: 0.5;
      }
    `}

    ${props.block && css`
      display: block;
      width: 100%;
    `}

    ${props.readonly && css`
      background-color: ${props.theme.color.gray};
      opacity: 1;
    `}

    ${props.size && props.size === "sm" && css`
      border-radius: 0.2em;
      font-size: 0.875em;
      padding: 0.25em 0.5em;
    `}

    ${props.size && props.size === "lg" && css`
      border-radius: 0.3em;
      font-size: 1.25em;
      padding: 0.5em 1em;
    `}
  `);

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/textfield/textfield.js
  var defaultProps4 = Object.freeze({
    block: true,
    gutter: false,
    multiline: false,
    outline: false,
    readonly: false,
    size: "sm",
    enterToSubmit: true
  });
  var getInitialState6 = () => ({
    key: Date.now(),
    currentValue: void 0
  });
  var Textfield = class extends import_react140.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState6();
      this.ref = import_react140.default.createRef();
      this.onBlur = ({ currentTarget }) => {
        const value = typeof this.props.value === "number" ? +currentTarget.value : currentTarget.value;
        if (!value || !this.props.onSubmit) {
          return;
        }
        this.props.onSubmit(value);
        this.setState(getInitialState6());
      };
      this.onChange = ({ currentTarget }) => {
        const value = typeof this.props.value === "number" ? +currentTarget.value : currentTarget.value;
        this.setState({ currentValue: value });
        if (!this.props.onChange) {
          return;
        }
        this.props.onChange(value);
      };
      this.onKeyUp = ({ key, currentTarget }) => {
        const value = typeof this.props.value === "number" ? +currentTarget.value : currentTarget.value;
        switch (key) {
          case "Enter":
            if (this.props.enterToSubmit) {
              currentTarget.blur();
              this.onSubmitKeyUp(key, value);
            }
            break;
          case "Escape":
            currentTarget.blur();
            this.onSubmitKeyUp(key, value);
            break;
          default:
        }
      };
      this.onSubmitKeyUp = (key, value) => {
        if (!this.props.onSubmitKeyUp) {
          return;
        }
        if (key === "Enter" && !this.props.enterToSubmit) {
          return;
        }
        this.props.onSubmitKeyUp(key, value);
      };
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
      if (Number.isFinite(prevProps.value) && !Number.isFinite(this.props.value)) {
        this.setState({ key: Date.now() });
      }
    }
    componentWillUnmount() {
      if (!this.state.currentValue || !this.props.onSubmit) {
        return;
      }
      this.props.onSubmit(this.state.currentValue);
    }
    render() {
      const { onChange, onSubmit, onSubmitKeyUp, size, value, ...props } = this.props;
      return import_react140.default.createElement(StyledTextfield, { as: props.multiline ? "textarea" : "input", maxLength: props.multiline ? void 0 : 100, key: this.state.key, ...props, size, defaultValue: value, onChange: this.onChange, onKeyUp: this.onKeyUp, onBlur: this.onBlur, ref: this.ref });
    }
    focus() {
      if (this.ref.current) {
        this.ref.current.focus();
      }
    }
  };
  Textfield.defaultProps = defaultProps4;

  // node_modules/@ls1intum/apollon/lib/es6/components/style-pane/style-pane.js
  var import_react142 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/style-pane/color-selector.js
  var import_react141 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/style-pane/style-pane-styles.js
  var Container3 = styled_components_browser_esm_default.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 10px 0;
  background-color: white;
  border: 1px solid ${(props) => props.theme.color.gray};
`;
  var Color = styled_components_browser_esm_default.button.attrs({})`
  height: 28px;
  width: 28px;
  background-color: ${({ color, selected }) => selected ? "transparent" : color || "black"};
  border-radius: 14px;
  cursor: pointer;
  border: none;
  position: relative;
  &:after,
  &:before {
    content: '';
    width: 2px;
    height: 100%;
    background: ${(props) => props.theme.color.primaryContrast};
    position: absolute;
    top: 0;
    left: 50%;
    transform: translate(-50%) rotate(45deg);
    display: ${({ selected }) => selected ? "block" : "none"};
  }
  &:before {
    transform: translate(-50%) rotate(-45deg);
  }
`;
  var Row = styled_components_browser_esm_default.div`
  display: flex;
  width: 100%;
  justify-content: space-between;
  padding: 16px;
  /* border-bottom: 1px solid #353d47; */
  font-weight: bold;
  background-color: ${(props) => props.theme.color.background};
  color: ${(props) => props.theme.color.primaryContrast};
  &:last-of-type {
    border-bottom: none;
  }
`;
  var Divider = styled_components_browser_esm_default.div`
  width: 100%;
  background: ${(props) => props.theme.color.backgroundVariant};
  height: 1px;
`;
  var Button3 = styled_components_browser_esm_default.button`
  background: white;
  color: #212529;
  border: 1px solid rgba(0, 0, 0, 0.15);
  padding: 0.375rem 0.75rem;
  margin: 0;
  margin-top: 0.75rem;
  line-height: 1.5;
  outline: none;
  align-self: center;
  cursor: pointer;
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/style-pane/color-selector.js
  var colors = [
    "#fc5c65",
    "#fd9644",
    "#fed330",
    "#26de81",
    "#2bcbba",
    "#45aaf2",
    "#4b7bec",
    "#6a89cc",
    "#a55eea",
    "#d1d8e0",
    "#778ca3",
    "black"
  ];
  var ColorContainer = styled_components_browser_esm_default.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: ${(props) => props.theme.color.background};
  width: 100%;
  padding-bottom: 10px;
`;
  var Flex = styled_components_browser_esm_default.div`
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
`;
  var Color2 = styled_components_browser_esm_default.button.attrs({})`
  height: 28px;
  width: 28px;
  background-color: ${({ color }) => color || "black"};
  border-radius: 14px;
  cursor: pointer;
  border: none;
  position: relative;
  margin: 10px;
  box-shadow: ${({ color, selected }) => selected ? `0px 0px 10px ${color}` : "none"};
`;
  function ColorSelector({ onColorChange, color, open, key }) {
    const handleColorChange = (newColor) => {
      onColorChange(newColor);
    };
    const reset = () => {
      onColorChange(void 0);
    };
    if (!open)
      return null;
    return import_react141.default.createElement(import_react141.default.Fragment, null, open ? import_react141.default.createElement(
      ColorContainer,
      null,
      import_react141.default.createElement(Flex, null, colors.map((colorOption) => import_react141.default.createElement(Color2, { key, color: colorOption, onClick: () => handleColorChange(colorOption), selected: colorOption === color }))),
      import_react141.default.createElement(Button3, { onClick: reset }, "Reset")
    ) : null);
  }

  // node_modules/@ls1intum/apollon/lib/es6/components/style-pane/style-pane.js
  var getInitialState7 = () => ({
    fillSelectOpen: false,
    strokeSelectOpen: false,
    textSelectOpen: false
  });
  var enhance30 = compose(localized, withCanvas, connect_default((state) => ({
    type: state.diagram.type,
    selected: state.selected,
    elements: state.elements
  }), {
    updateStart: UMLElementRepository.updateStart,
    update: UMLElementRepository.update,
    updateEnd: UMLElementRepository.updateEnd
  }));
  var StylePaneComponent = class extends import_react142.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState7();
      this.handleFillColorChange = (color) => {
        const { element, onColorChange } = this.props;
        onColorChange(element.id, { fillColor: color });
      };
      this.handleLineColorChange = (color) => {
        const { element, onColorChange } = this.props;
        onColorChange(element.id, { strokeColor: color });
      };
      this.handleTextColorChange = (color) => {
        const { element, onColorChange } = this.props;
        onColorChange(element.id, { textColor: color });
      };
      this.toggleFillSelect = () => {
        this.setState((prevState) => ({
          fillSelectOpen: !prevState.fillSelectOpen,
          strokeSelectOpen: false,
          textSelectOpen: false
        }));
      };
      this.toggleLineSelect = () => {
        this.setState((prevState) => ({
          strokeSelectOpen: !prevState.strokeSelectOpen,
          fillSelectOpen: false,
          textSelectOpen: false
        }));
      };
      this.toggleTextSelect = () => {
        this.setState((prevState) => ({
          textSelectOpen: !prevState.textSelectOpen,
          strokeSelectOpen: false,
          fillSelectOpen: false
        }));
      };
    }
    render() {
      const { fillSelectOpen, strokeSelectOpen, textSelectOpen } = this.state;
      const { open, element, fillColor, lineColor, textColor } = this.props;
      const noneOpen = !fillSelectOpen && !strokeSelectOpen && !textSelectOpen;
      if (!open)
        return null;
      return import_react142.default.createElement(
        Container3,
        null,
        import_react142.default.createElement(ColorRow, { title: "Fill Color", condition: fillColor && (fillSelectOpen || noneOpen), color: element?.fillColor, open: fillSelectOpen, onToggle: this.toggleFillSelect, onColorChange: this.handleFillColorChange, noDivider: !textColor && !lineColor }),
        import_react142.default.createElement(ColorRow, { title: "Line Color", condition: lineColor && (strokeSelectOpen || noneOpen), color: element?.strokeColor, open: strokeSelectOpen, onToggle: this.toggleLineSelect, onColorChange: this.handleLineColorChange, noDivider: !textColor }),
        import_react142.default.createElement(ColorRow, { title: "Text Color", condition: textColor && (textSelectOpen || noneOpen), color: element?.textColor, open: textSelectOpen, onToggle: this.toggleTextSelect, onColorChange: this.handleTextColorChange, noDivider: true })
      );
    }
  };
  var ColorRow = ({ condition, title, open, onToggle, onColorChange, color, noDivider }) => {
    if (!condition)
      return null;
    return import_react142.default.createElement(
      import_react142.default.Fragment,
      null,
      import_react142.default.createElement(
        Row,
        null,
        import_react142.default.createElement("span", null, title),
        import_react142.default.createElement(Color, { color, selected: open, onClick: onToggle })
      ),
      import_react142.default.createElement(ColorSelector, { open, color, onColorChange, key: title }),
      !open && !noDivider ? import_react142.default.createElement(Divider, null) : null
    );
  };
  var StylePane = enhance30(StylePaneComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/default-popup.js
  var Flex2 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var DefaultPopupComponent = class extends import_react143.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onUpdate = (name) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name });
      };
    }
    render() {
      const { element } = this.props;
      return import_react143.default.createElement(
        "div",
        null,
        import_react143.default.createElement(
          "section",
          null,
          import_react143.default.createElement(
            Flex2,
            null,
            import_react143.default.createElement(Textfield, { value: element.name, onChange: this.onUpdate, autoFocus: true }),
            import_react143.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react143.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react143.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react143.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
      );
    }
  };
  var enhance31 = connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  });
  var DefaultPopup = enhance31(DefaultPopupComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/default-relationship-popup.js
  var import_react145 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/typography/typography.js
  var import_react144 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/typography/typography-styles.js
  var Typography = styled.p`
  margin-top: 0;

  ${(props) => props.variant === "header" && css`
      font-size: 1.25em;
      font-weight: 500;
      line-height: 1.2;
      margin-bottom: 0.5em;
    `}

  ${(props) => props.variant === "body" && css`
      margin-bottom: 1em;
    `}

  ${(props) => !props.gutter && css`
      margin-bottom: 0;
    `}
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/typography/typography.js
  var defaultProps5 = {
    gutter: true
  };
  var Header = (props) => import_react144.default.createElement(Typography, { variant: "header", as: "h1", ...props });
  Header.defaultProps = defaultProps5;
  var Body = (props) => {
    const { gutter, ...typographyProps } = props;
    return import_react144.default.createElement(Typography, { variant: "body", as: "span", gutter: false, ...typographyProps });
  };
  Body.defaultProps = {
    gutter: false
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/default-relationship-popup.js
  var Flex3 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var DefaultRelationshipPopupComponent = class extends import_react145.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
    }
    render() {
      const { element } = this.props;
      return import_react145.default.createElement(
        "div",
        null,
        import_react145.default.createElement(
          "section",
          null,
          import_react145.default.createElement(
            Flex3,
            null,
            import_react145.default.createElement(Header, null, this.props.translate("popup.relationship")),
            import_react145.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react145.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react145.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react145.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true })
      );
    }
  };
  var enhance32 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var DefaultRelationshipPopup = enhance32(DefaultRelationshipPopupComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier-update.js
  var import_react148 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/divider/divider.js
  var Divider2 = styled.hr`
  border: 0;
  border-top: 1px solid ${(props) => props.theme.color.primaryContrast};
  box-sizing: content-box;
  height: 0;
  margin-top: 0.75em;
  margin-bottom: 0.75em;
  overflow: visible;
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/switch/switch.js
  var import_react146 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/switch/switch-item.js
  var SwitchItem = (props) => null;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/switch/switch-styles.js
  var StyledSwitch = styled.div`
  display: flex;
  min-height: 1.9rem;
`;
  var StyledSwitchItem = styled(Button2).attrs((props) => ({
    outline: !props.selected
  }))`
  flex: 1 1 auto;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: flex;
  align-items: center;
  justify-content: center;

  :not(:first-child) {
    margin-left: -1px;
  }

  :first-child {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  :last-child {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  :not(:first-child):not(:last-child) {
    border-radius: 0;
  }
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/switch/switch.js
  var defaultProps6 = Object.freeze({
    color: "primary",
    size: "sm"
  });
  var Switch = class extends import_react146.Component {
    constructor() {
      super(...arguments);
      this.select = (value) => () => {
        if (!this.props.onChange) {
          return;
        }
        this.props.onChange(value);
      };
    }
    render() {
      return import_react146.default.createElement(StyledSwitch, null, import_react146.Children.map(this.props.children, ({ props }) => this.renderItem(props)));
    }
    renderItem(item) {
      const { color, size, value } = this.props;
      return import_react146.default.createElement(StyledSwitchItem, { color, onClick: this.select(item.value), selected: item.value === value, size }, item.children);
    }
  };
  Switch.defaultProps = defaultProps6;
  Switch.Item = SwitchItem;

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier-attribute-update.js
  var import_react147 = __toESM(require_react());
  var Flex4 = styled_components_browser_esm_default.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var UmlAttributeUpdate = ({ id: id2, onRefChange, value, onChange, onSubmitKeyUp, onDelete, element }) => {
    const [colorOpen, setColorOpen] = (0, import_react147.useState)(false);
    const toggleColor = () => {
      setColorOpen(!colorOpen);
    };
    const handleNameChange = (newName) => {
      onChange(id2, { name: newName });
    };
    const handleDelete = () => {
      onDelete(id2)();
    };
    return import_react147.default.createElement(
      import_react147.default.Fragment,
      null,
      import_react147.default.createElement(
        Flex4,
        null,
        import_react147.default.createElement(Textfield, { ref: onRefChange, gutter: true, value, onChange: handleNameChange, onSubmitKeyUp }),
        import_react147.default.createElement(ColorButton, { onClick: toggleColor }),
        import_react147.default.createElement(
          Button2,
          { color: "link", tabIndex: -1, onClick: handleDelete },
          import_react147.default.createElement(TrashIcon, null)
        )
      ),
      import_react147.default.createElement(StylePane, { open: colorOpen, element, onColorChange: onChange, fillColor: true, textColor: true })
    );
  };
  var uml_classifier_attribute_update_default = UmlAttributeUpdate;

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-classifier/uml-classifier-update.js
  var Flex5 = styled_components_browser_esm_default.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var enhance33 = compose(localized, connect_default(null, {
    create: UMLElementRepository.create,
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    getById: UMLElementRepository.getById
  }));
  var getInitialState8 = () => ({
    fieldToFocus: void 0,
    colorOpen: false
  });
  var ClassifierUpdate = class extends import_react148.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState8();
      this.newMethodField = (0, import_react148.createRef)();
      this.newAttributeField = (0, import_react148.createRef)();
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.create = (Clazz) => (value) => {
        const { element, create: create4 } = this.props;
        const member = new Clazz();
        member.name = value;
        create4(member, element.id);
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.toggle = (type) => {
        const { element, update: update3 } = this.props;
        const newType = element.type === type ? ClassElementType.Class : type;
        const instance = new UMLElements[newType]({
          id: element.id,
          name: element.name,
          type: element.type,
          owner: element.owner,
          bounds: element.bounds,
          ownedElements: element.ownedElements
        });
        update3(element.id, instance);
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.state.fieldToFocus) {
        this.state.fieldToFocus.focus();
        this.setState({ fieldToFocus: void 0 });
      }
    }
    render() {
      const { element, getById } = this.props;
      const children = element.ownedElements.map((id2) => getById(id2)).filter(notEmpty);
      const attributes = children.filter((child) => child instanceof UMLClassAttribute);
      const methods = children.filter((child) => child instanceof UMLClassMethod);
      const attributeRefs = [];
      const methodRefs = [];
      return import_react148.default.createElement(
        "div",
        null,
        import_react148.default.createElement(
          "section",
          null,
          import_react148.default.createElement(
            Flex5,
            null,
            import_react148.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react148.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react148.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react148.default.createElement(TrashIcon, null)
            )
          ),
          import_react148.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, fillColor: true, lineColor: true, textColor: true }),
          import_react148.default.createElement(Divider2, null)
        ),
        import_react148.default.createElement(
          "section",
          null,
          import_react148.default.createElement(
            Switch,
            { value: element.type, onChange: this.toggle, color: "primary" },
            import_react148.default.createElement(Switch.Item, { value: ClassElementType.AbstractClass }, this.props.translate("packages.ClassDiagram.AbstractClass")),
            import_react148.default.createElement(Switch.Item, { value: ClassElementType.Interface }, this.props.translate("packages.ClassDiagram.Interface")),
            import_react148.default.createElement(Switch.Item, { value: ClassElementType.Enumeration }, this.props.translate("packages.ClassDiagram.Enumeration"))
          ),
          import_react148.default.createElement(Divider2, null)
        ),
        import_react148.default.createElement(
          "section",
          null,
          import_react148.default.createElement(Header, null, this.props.translate("popup.attributes")),
          attributes.map((attribute, index) => import_react148.default.createElement(uml_classifier_attribute_update_default, { id: attribute.id, key: attribute.id, value: attribute.name, onChange: this.props.update, onSubmitKeyUp: () => index === attributes.length - 1 ? this.newAttributeField.current?.focus() : this.setState({
            fieldToFocus: attributeRefs[index + 1]
          }), onDelete: this.delete, onRefChange: (ref) => attributeRefs[index] = ref, element: attribute })),
          import_react148.default.createElement(Textfield, { ref: this.newAttributeField, outline: true, value: "", onSubmit: this.create(UMLClassAttribute), onSubmitKeyUp: (key, value) => {
            if (value) {
              this.setState({
                fieldToFocus: this.newAttributeField.current
              });
            } else {
              if (methodRefs && methodRefs.length > 0) {
                this.setState({
                  fieldToFocus: methodRefs[0]
                });
              } else {
                this.setState({
                  fieldToFocus: this.newMethodField.current
                });
              }
            }
          }, onKeyDown: (event) => {
            if (event.key === "Tab" && event.currentTarget.value) {
              event.preventDefault();
              event.currentTarget.blur();
              this.setState({
                fieldToFocus: this.newAttributeField.current
              });
            }
          } })
        ),
        import_react148.default.createElement(
          "section",
          null,
          import_react148.default.createElement(Divider2, null),
          import_react148.default.createElement(Header, null, this.props.translate("popup.methods")),
          methods.map((method, index) => import_react148.default.createElement(uml_classifier_attribute_update_default, { id: method.id, key: method.id, value: method.name, onChange: this.props.update, onSubmitKeyUp: () => index === methods.length - 1 ? this.newMethodField.current?.focus() : this.setState({
            fieldToFocus: methodRefs[index + 1]
          }), onDelete: this.delete, onRefChange: (ref) => methodRefs[index] = ref, element: method })),
          import_react148.default.createElement(Textfield, { ref: this.newMethodField, outline: true, value: "", onSubmit: this.create(UMLClassMethod), onSubmitKeyUp: () => this.setState({
            fieldToFocus: this.newMethodField.current
          }), onKeyDown: (event) => {
            if (event.key === "Tab" && event.currentTarget.value) {
              event.preventDefault();
              event.currentTarget.blur();
              this.setState({
                fieldToFocus: this.newMethodField.current
              });
            }
          } })
        )
      );
    }
  };
  var UMLClassifierUpdate = enhance33(ClassifierUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-control-flow/uml-activity-control-flow-update.js
  var import_react150 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/exchange.js
  var import_react149 = __toESM(require_react());
  var ExchangeIcon = (props) => import_react149.default.createElement(
    Icon,
    { viewBox: "0 0 512 512", ...props },
    import_react149.default.createElement("path", { d: "M508.485 184.485l-92.485 92c-4.687 4.686-12.284 4.686-16.97 0l-7.071-7.07c-4.687-4.686-4.687-12.284 0-16.971L452.893 192H12c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h440.905l-60.946-60.444c-4.687-4.686-4.687-12.284 0-16.971l7.07-7.07c4.687-4.686 12.284-4.686 16.971 0l92.485 92c4.687 4.686 4.686 12.284 0 16.97zm-504.97 160l92.485 92c4.687 4.686 12.284 4.686 16.971 0l7.07-7.07c4.687-4.686 4.687-12.284 0-16.971L59.095 352H500c6.627 0 12-5.373 12-12v-8c0-6.627-5.373-12-12-12H59.107l60.934-60.444c4.687-4.686 4.687-12.284 0-16.971l-7.071-7.07c-4.686-4.686-12.284-4.687-16.97 0l-92.485 92c-4.686 4.686-4.687 12.284 0 16.97z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-control-flow/uml-activity-control-flow-update.js
  var Flex6 = styled_components_browser_esm_default.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var ActivityControlFlowUpdate = class extends import_react150.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (name) => {
        this.props.update(this.props.element.id, { name });
      };
    }
    render() {
      const { element } = this.props;
      return import_react150.default.createElement(
        "div",
        null,
        import_react150.default.createElement(
          "section",
          null,
          import_react150.default.createElement(
            Flex6,
            null,
            import_react150.default.createElement(Header, { gutter: false, style: { flexGrow: 1 } }, this.props.translate("packages.ActivityDiagram.ActivityControlFlow")),
            import_react150.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react150.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.flip(element.id) },
              import_react150.default.createElement(ExchangeIcon, null)
            ),
            import_react150.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.delete(element.id) },
              import_react150.default.createElement(TrashIcon, null)
            )
          ),
          import_react150.default.createElement(Divider2, null)
        ),
        import_react150.default.createElement(
          "section",
          null,
          import_react150.default.createElement(Textfield, { value: element.name, onChange: this.rename, autoFocus: true })
        ),
        import_react150.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true })
      );
    }
  };
  var enhance34 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip
  }));
  var UMLActivityControlFlowUpdate = enhance34(ActivityControlFlowUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-merge-node/uml-activity-merge-node-update.js
  var import_react152 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/arrow-right.js
  var import_react151 = __toESM(require_react());
  var ArrowRightIcon = (props) => import_react151.default.createElement(
    Icon,
    { viewBox: "0 0 448 512", ...props },
    import_react151.default.createElement("path", { d: "M311.03 131.515l-7.071 7.07c-4.686 4.686-4.686 12.284 0 16.971L387.887 239H12c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h375.887l-83.928 83.444c-4.686 4.686-4.686 12.284 0 16.971l7.071 7.07c4.686 4.686 12.284 4.686 16.97 0l116.485-116c4.686-4.686 4.686-12.284 0-16.971L328 131.515c-4.686-4.687-12.284-4.687-16.97 0z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-activity-diagram/uml-activity-merge-node/uml-activity-merge-node-update.js
  var Flex7 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var ActivityMergeNodeUpdate = class extends import_react152.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onUpdate = (name) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name });
      };
      this.onUpdateOption = (id2) => (name) => {
        const { update: update3 } = this.props;
        update3(id2, { name });
      };
    }
    render() {
      const { element, decisions, targets, update: update3 } = this.props;
      return import_react152.default.createElement(
        "div",
        null,
        import_react152.default.createElement(
          "section",
          null,
          import_react152.default.createElement(
            Flex7,
            null,
            import_react152.default.createElement(Textfield, { value: element.name, onChange: this.onUpdate }),
            import_react152.default.createElement(ColorButton, { onClick: this.toggleColor })
          ),
          import_react152.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: update3, fillColor: true, lineColor: true, textColor: true })
        ),
        import_react152.default.createElement("section", null, decisions.length > 0 && import_react152.default.createElement(
          import_react152.default.Fragment,
          null,
          import_react152.default.createElement(Divider2, null),
          import_react152.default.createElement(Header, null, this.props.translate("popup.condition")),
          decisions.map((decision, i2) => import_react152.default.createElement(
            Flex7,
            { key: decision.id },
            import_react152.default.createElement(Textfield, { gutter: i2 < decisions.length - 1, value: decision.name, onChange: this.onUpdateOption(decision.id) }),
            import_react152.default.createElement(
              Button2,
              { color: "link", disabled: true },
              import_react152.default.createElement(ArrowRightIcon, null)
            ),
            import_react152.default.createElement(Body, null, targets[i2].name)
          ))
        ))
      );
    }
  };
  var enhance35 = compose(localized, connect_default((state, props) => {
    const decisions = Object.values(state.elements).filter((x2) => UMLRelationship.isUMLRelationship(x2)).filter((x2) => x2.source.element === props.element.id);
    return {
      decisions,
      targets: decisions.map((relationship) => state.elements[relationship.target.element])
    };
  }, {
    update: UMLElementRepository.update,
    getById: UMLElementRepository.getById
  }));
  var UMLActivityMergeNodeUpdate = enhance35(ActivityMergeNodeUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component-subsystem/uml-component-subsystem-update.js
  var import_react156 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/stereotype-toggle/stereotype-toggle.js
  var import_react155 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/stereotype-on.js
  var import_react153 = __toESM(require_react());
  var StereotypeOnIcon = (props) => import_react153.default.createElement(
    Icon,
    { viewBox: "0 0 128 128", ...props },
    import_react153.default.createElement("path", { d: "M74.1387 93.5415L92.8052 64.1677H101.049V65.1153L81.9085 93.5415H74.1387ZM74.1387 35.3625H81.9085L101.049 63.7887V64.7363H92.8052L74.1387 35.3625ZM98.7273 93.5415L117.394 64.1677H125.637V65.1153L106.497 93.5415H98.7273ZM98.7273 35.3625H106.497L125.637 63.7887V64.7363H117.394L98.7273 35.3625Z", fill: "black" }),
    import_react153.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M72.068 34.225C72.4831 33.4695 73.2767 33 74.1387 33H81.9085C82.6946 33 83.4292 33.391 83.8682 34.043L103.009 62.4692C103.271 62.8592 103.411 63.3186 103.411 63.7887V65.1153C103.411 65.5854 103.271 66.0448 103.009 66.4348L83.8682 94.861C83.4292 95.513 82.6946 95.904 81.9085 95.904H74.1387C73.2767 95.904 72.4831 95.4345 72.068 94.679C71.653 93.9235 71.6824 93.0019 72.1447 92.2743L89.8254 64.452L72.1447 36.6297C71.6824 35.9021 71.653 34.9805 72.068 34.225ZM93.7418 67.0988L78.4393 91.1789H80.6511L96.8651 67.0988H93.7418ZM96.8651 61.8052H93.7418L78.4393 37.7251H80.6511L96.8651 61.8052ZM96.6567 34.225C97.0717 33.4695 97.8653 33 98.7273 33H106.497C107.283 33 108.018 33.391 108.457 34.043L127.597 62.4692C127.86 62.8592 128 63.3186 128 63.7887V65.1153C128 65.5854 127.86 66.0448 127.597 66.4348L108.457 94.861C108.018 95.513 107.283 95.904 106.497 95.904H98.7273C97.8653 95.904 97.0717 95.4345 96.6567 94.679C96.2416 93.9235 96.271 93.0019 96.7334 92.2743L114.414 64.452L96.7334 36.6297C96.271 35.9021 96.2416 34.9805 96.6567 34.225ZM118.33 67.0988L103.028 91.1789H105.24L121.454 67.0988H118.33ZM121.454 61.8052H118.33L103.028 37.7251H105.24L121.454 61.8052Z", fill: "black" }),
    import_react153.default.createElement("path", { d: "M29.2727 93.5415H21.5028L2.36253 65.1153V64.1677H10.5588L29.2727 93.5415ZM29.2727 35.3625L10.5588 64.7363H2.36253V63.7887L21.5028 35.3625H29.2727ZM53.5297 93.5415H45.7599L26.6196 65.1153V64.1677H34.8158L53.5297 93.5415ZM53.5297 35.3625L34.8158 64.7363H26.6196V63.7887L45.7599 35.3625H53.5297Z", fill: "black" }),
    import_react153.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M19.5431 34.043C19.9822 33.391 20.7168 33 21.5028 33H29.2727C30.1352 33 30.9291 33.47 31.344 34.2262C31.7588 34.9824 31.7286 35.9045 31.2652 36.632L13.5411 64.452L31.2652 92.2721C31.7286 92.9995 31.7588 93.9216 31.344 94.6778C30.9291 95.434 30.1352 95.904 29.2727 95.904H21.5028C20.7168 95.904 19.9822 95.513 19.5431 94.861L0.402837 66.4348C0.140261 66.0448 0 65.5854 0 65.1153V63.7887C0 63.3186 0.140261 62.8592 0.402837 62.4692L19.5431 34.043ZM6.54628 67.0988L22.7602 91.1789H24.9662L9.62486 67.0988H6.54628ZM9.62486 61.8052H6.54628L22.7602 37.7251H24.9662L9.62486 61.8052ZM43.8002 34.043C44.2392 33.391 44.9738 33 45.7599 33H53.5297C54.3922 33 55.1861 33.47 55.601 34.2262C56.0158 34.9824 55.9856 35.9045 55.5222 36.632L37.7981 64.452L55.5222 92.2721C55.9856 92.9995 56.0158 93.9216 55.601 94.6778C55.1861 95.434 54.3922 95.904 53.5297 95.904H45.7599C44.9738 95.904 44.2392 95.513 43.8002 94.861L24.6599 66.4348C24.3973 66.0448 24.257 65.5854 24.257 65.1153V63.7887C24.257 63.3186 24.3973 62.8592 24.6599 62.4692L43.8002 34.043ZM30.8033 67.0988L47.0173 91.1789H49.2233L33.8819 67.0988H30.8033ZM33.8819 61.8052H30.8033L47.0173 37.7251H49.2233L33.8819 61.8052Z", fill: "black" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/stereotype-off.js
  var import_react154 = __toESM(require_react());
  var StereotypeOffIcon = (props) => import_react154.default.createElement(
    Icon,
    { viewBox: "0 0 128 128", ...props },
    import_react154.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M82.1654 32.6199C82.0806 32.6106 81.9949 32.6059 81.9085 32.6059H74.1387C73.2767 32.6059 72.4831 33.0754 72.068 33.8309C71.653 34.5864 71.6824 35.508 72.1447 36.2356L74.6334 40.1518L82.1654 32.6199ZM42.8297 71.9556L37.7981 64.0579L55.5222 36.2378C55.9856 35.5104 56.0158 34.5883 55.601 33.8321C55.1861 33.0759 54.3922 32.6059 53.5297 32.6059H45.7599C44.9738 32.6059 44.2392 32.9969 43.8002 33.6489L24.6599 62.0751C24.3973 62.465 24.257 62.9245 24.257 63.3946V64.7212C24.257 65.1913 24.3973 65.6507 24.6599 66.0407L34.3513 80.4339L42.8297 71.9556ZM47.3686 95.5099L53.7626 89.116L55.5222 91.8779C55.9856 92.6054 56.0158 93.5275 55.601 94.2837C55.1861 95.0399 54.3922 95.5099 53.5297 95.5099H47.3686ZM28.0126 86.7726L19.9011 94.8841C19.7674 94.7608 19.647 94.6212 19.5431 94.4669L0.402837 66.0407C0.140261 65.6507 0 65.1913 0 64.7212V63.3946C0 62.9245 0.140261 62.465 0.402837 62.0751L19.5431 33.6489C19.9822 32.9969 20.7168 32.6059 21.5028 32.6059H29.2727C30.1352 32.6059 30.9291 33.0759 31.344 33.8321C31.7588 34.5883 31.7286 35.5104 31.2652 36.2378L13.5411 64.0579L28.0126 86.7726ZM85.5494 57.3292L94.0734 48.8051L103.009 62.0751C103.271 62.465 103.411 62.9245 103.411 63.3946V64.7212C103.411 65.1913 103.271 65.6507 103.009 66.0407L83.8682 94.4669C83.4292 95.1189 82.6946 95.5099 81.9085 95.5099H74.1387C73.2767 95.5099 72.4831 95.0404 72.068 94.2849C71.653 93.5294 71.6824 92.6078 72.1447 91.8802L89.8253 64.0579L85.5494 57.3292ZM100.584 42.2947L114.414 64.0579L96.7334 91.8802C96.271 92.6078 96.2416 93.5294 96.6567 94.2849C97.0717 95.0404 97.8653 95.5099 98.7273 95.5099H106.497C107.283 95.5099 108.018 95.1189 108.457 94.4669L127.597 66.0407C127.86 65.6507 128 65.1913 128 64.7212V63.3946C128 62.9245 127.86 62.465 127.597 62.0751L108.768 34.1107L100.584 42.2947Z", fill: "black" }),
    import_react154.default.createElement("rect", { x: "110.479", y: "10", width: "11.8127", height: "141.697", rx: "2", transform: "rotate(45 110.479 10)", fill: "black" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/stereotype-toggle/stereotype-toggle.js
  var StereotypeToggle = class extends import_react155.Component {
    render() {
      const { value, onChange } = this.props;
      return import_react155.default.createElement(Button2, { color: "link", tabIndex: -1, onClick: onChange }, value ? import_react155.default.createElement(StereotypeOnIcon, null) : import_react155.default.createElement(StereotypeOffIcon, null));
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component-subsystem/uml-component-subsystem-update.js
  var Flex8 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var ComponentSubsystemUpdate = class extends import_react156.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onRename = (value) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name: value });
      };
      this.onStereotypeVisibilityToggle = () => {
        const { element, update: update3 } = this.props;
        const newVisibilityValue = !element.displayStereotype;
        update3(element.id, { displayStereotype: newVisibilityValue });
      };
    }
    render() {
      const { element } = this.props;
      return import_react156.default.createElement(
        "div",
        null,
        import_react156.default.createElement(
          "section",
          null,
          import_react156.default.createElement(
            Flex8,
            null,
            import_react156.default.createElement(Textfield, { value: element.name, onChange: this.onRename, autoFocus: true }),
            import_react156.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react156.default.createElement(StereotypeToggle, { value: element.displayStereotype, onChange: this.onStereotypeVisibilityToggle }),
            import_react156.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react156.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react156.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
      );
    }
  };
  var enhance36 = connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  });
  var UMLComponentSubsystemUpdate = enhance36(ComponentSubsystemUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/uml-component/uml-component-update.js
  var import_react157 = __toESM(require_react());
  var Flex9 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var ComponentUpdate = class extends import_react157.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onRename = (value) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name: value });
      };
      this.onStereotypeVisibilityToggle = () => {
        const { element, update: update3 } = this.props;
        const newVisibilityValue = !element.displayStereotype;
        update3(element.id, { displayStereotype: newVisibilityValue });
      };
    }
    render() {
      const { element } = this.props;
      return import_react157.default.createElement(
        "div",
        null,
        import_react157.default.createElement(
          "section",
          null,
          import_react157.default.createElement(
            Flex9,
            null,
            import_react157.default.createElement(Textfield, { value: element.name, onChange: this.onRename, autoFocus: true }),
            import_react157.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react157.default.createElement(StereotypeToggle, { value: element.displayStereotype, onChange: this.onStereotypeVisibilityToggle }),
            import_react157.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react157.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react157.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
      );
    }
  };
  var enhance37 = connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  });
  var UMLComponentUpdate = enhance37(ComponentUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-association/uml-class-association-update.js
  var import_react159 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/dropdown/dropdown.js
  var import_react158 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/dropdown/dropdown-button.js
  var DropdownButton = styled(Button2).attrs({
    block: true
  })`
  ::after {
    border-top: 0.3em solid;
    border-right: 0.3em solid transparent;
    border-bottom: 0;
    border-left: 0.3em solid transparent;
    content: '';
    display: inline-block;
    height: 0;
    margin-left: 0.255em;
    vertical-align: 0.255em;
    width: 0;
  }
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/dropdown/dropdown-item.js
  var DropdownItem = (props) => null;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/dropdown/dropdown-menu.js
  var DropdownMenu = styled.div`
  background-clip: padding-box;
  background-color: ${(props) => props.theme.color.background};
  border: 1px solid rgba(0, 0, 0, 0.15);
  border-radius: 0.25em;
  list-style: none;
  margin: 0.125em 0 0;
  padding: 0.5em 0;
  position: absolute;
  text-align: left;
  z-index: 1000;
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/dropdown/dropdown-styles.js
  var StyledDropdown = styled.div``;
  var StyledDropdownItem = styled(Button2).attrs({
    block: true,
    color: "link"
  })`
  color: ${(props) => props.theme.font.color};
  padding-right: 1.5em;
  padding-left: 1.5em;
  text-align: left;

  :hover {
    text-decoration: none;
    background-color: ${(props) => props.theme.color.gray};
  }
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/dropdown/dropdown.js
  var defaultProps7 = Object.freeze({
    color: "primary",
    outline: true,
    placeholder: "",
    size: "sm"
  });
  var intialState = Object.freeze({
    show: false,
    top: 0,
    left: 0,
    width: 0
  });
  var Dropdown = class extends import_react158.Component {
    constructor() {
      super(...arguments);
      this.state = intialState;
      this.activator = (0, import_react158.createRef)();
      this.dismiss = () => {
        if (this.activator.current) {
          const parent = this.getScrollableParent(this.activator.current);
          parent.removeEventListener("scroll", this.dismiss);
        }
        document.removeEventListener("click", this.dismiss);
        this.setState({ show: false });
      };
      this.select = (value) => () => {
        if (!this.props.onChange) {
          return;
        }
        this.props.onChange(value);
      };
      this.show = (event) => {
        if (!this.activator.current) {
          return;
        }
        const parent = this.getScrollableParent(this.activator.current);
        const parentBounds = parent.getBoundingClientRect();
        const activatorBounds = this.activator.current.getBoundingClientRect();
        this.setState({
          show: true,
          top: activatorBounds.top - parentBounds.top + activatorBounds.height,
          left: activatorBounds.left - parentBounds.left,
          width: activatorBounds.width
        });
        parent.addEventListener("scroll", this.dismiss, { once: true });
        document.addEventListener("click", this.dismiss, { once: true });
        event.stopPropagation();
      };
      this.getScrollableParent = (element) => {
        const style = getComputedStyle(element);
        const isScrollable = /(auto|scroll)/.test([style.overflow, style.overflowY, style.overflowX].join(""));
        if (isScrollable) {
          return element;
        }
        const parent = element.parentElement;
        if (parent) {
          return this.getScrollableParent(parent);
        }
        return document.body;
      };
    }
    componentWillUnmount() {
      document.removeEventListener("click", this.dismiss);
    }
    render() {
      const { color, outline, size } = this.props;
      const { show, top, left, width } = this.state;
      const selected = import_react158.Children.toArray(this.props.children).find((item) => item.props.value === this.props.value);
      return import_react158.default.createElement(
        StyledDropdown,
        null,
        import_react158.default.createElement(DropdownButton, { ref: this.activator, color, onClick: (event) => this.show(event), outline, size }, selected ? selected.props.children : this.props.placeholder),
        show && import_react158.default.createElement(DropdownMenu, { style: { top, left, minWidth: width } }, import_react158.Children.map(this.props.children, ({ props }) => this.renderItem(props)))
      );
    }
    renderItem(item) {
      const { size } = this.props;
      return import_react158.default.createElement(StyledDropdownItem, { size, onClick: this.select(item.value) }, item.children);
    }
  };
  Dropdown.defaultProps = defaultProps7;
  Dropdown.Item = DropdownItem;

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-class-diagram/uml-class-association/uml-class-association-update.js
  var enhance38 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip,
    getById: UMLElementRepository.getById
  }));
  var Flex10 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var ClassAssociationComponent = class extends import_react159.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onChange = (type) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { type });
      };
      this.onUpdate = (type, end) => (value) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { [end]: { ...element[end], [type]: value } });
      };
    }
    render() {
      const { element, getById } = this.props;
      const source = element.source && getById(element.source.element);
      const target = element.target && getById(element.target.element);
      if (!source || !target)
        return null;
      return import_react159.default.createElement(
        "div",
        null,
        import_react159.default.createElement(
          "section",
          null,
          import_react159.default.createElement(
            Flex10,
            null,
            import_react159.default.createElement(Header, { gutter: false, style: { flexGrow: 1 } }, this.props.translate("popup.association")),
            import_react159.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react159.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.flip(element.id) },
              import_react159.default.createElement(ExchangeIcon, null)
            ),
            import_react159.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.delete(element.id) },
              import_react159.default.createElement(TrashIcon, null)
            )
          ),
          import_react159.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true }),
          import_react159.default.createElement(Divider2, null)
        ),
        import_react159.default.createElement(
          "section",
          null,
          import_react159.default.createElement(
            Dropdown,
            { value: element.type, onChange: this.onChange },
            import_react159.default.createElement(Dropdown.Item, { value: ClassRelationshipType.ClassAggregation }, this.props.translate("packages.ClassDiagram.ClassAggregation")),
            import_react159.default.createElement(Dropdown.Item, { value: ClassRelationshipType.ClassUnidirectional }, this.props.translate("packages.ClassDiagram.ClassUnidirectional")),
            import_react159.default.createElement(Dropdown.Item, { value: ClassRelationshipType.ClassBidirectional }, this.props.translate("packages.ClassDiagram.ClassBidirectional")),
            import_react159.default.createElement(Dropdown.Item, { value: ClassRelationshipType.ClassComposition }, this.props.translate("packages.ClassDiagram.ClassComposition")),
            import_react159.default.createElement(Dropdown.Item, { value: ClassRelationshipType.ClassDependency }, this.props.translate("packages.ClassDiagram.ClassDependency")),
            import_react159.default.createElement(Dropdown.Item, { value: ClassRelationshipType.ClassInheritance }, this.props.translate("packages.ClassDiagram.ClassInheritance")),
            import_react159.default.createElement(Dropdown.Item, { value: ClassRelationshipType.ClassRealization }, this.props.translate("packages.ClassDiagram.ClassRealization"))
          ),
          import_react159.default.createElement(Divider2, null)
        ),
        import_react159.default.createElement(
          "section",
          null,
          import_react159.default.createElement(Header, null, source.name),
          import_react159.default.createElement(
            Flex10,
            null,
            import_react159.default.createElement(Body, { style: { marginRight: "0.5em" } }, this.props.translate("popup.multiplicity")),
            import_react159.default.createElement(Textfield, { style: { minWidth: 0 }, gutter: true, value: element.source.multiplicity, onChange: this.onUpdate("multiplicity", "source"), autoFocus: true })
          ),
          import_react159.default.createElement(
            Flex10,
            null,
            import_react159.default.createElement(Body, { style: { marginRight: "0.5em" } }, this.props.translate("popup.role")),
            import_react159.default.createElement(Textfield, { value: element.source.role, onChange: this.onUpdate("role", "source") })
          ),
          import_react159.default.createElement(Divider2, null)
        ),
        import_react159.default.createElement(
          "section",
          null,
          import_react159.default.createElement(Header, null, target.name),
          import_react159.default.createElement(
            Flex10,
            null,
            import_react159.default.createElement(Body, { style: { marginRight: "0.5em" } }, this.props.translate("popup.multiplicity")),
            import_react159.default.createElement(Textfield, { style: { minWidth: 0 }, gutter: true, value: element.target.multiplicity, onChange: this.onUpdate("multiplicity", "target") })
          ),
          import_react159.default.createElement(
            Flex10,
            null,
            import_react159.default.createElement(Body, { style: { marginRight: "0.5em" } }, this.props.translate("popup.role")),
            import_react159.default.createElement(Textfield, { value: element.target.role, onChange: this.onUpdate("role", "target") })
          )
        )
      );
    }
  };
  var UMLClassAssociationUpdate = enhance38(ClassAssociationComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-communication-diagram/uml-communication-link/uml-communication-link-update.js
  var import_react161 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/arrow-left.js
  var import_react160 = __toESM(require_react());
  var ArrowLeftIcon = (props) => import_react160.default.createElement(
    Icon,
    { viewBox: "0 0 448 512", ...props },
    import_react160.default.createElement("path", { d: "M136.97 380.485l7.071-7.07c4.686-4.686 4.686-12.284 0-16.971L60.113 273H436c6.627 0 12-5.373 12-12v-10c0-6.627-5.373-12-12-12H60.113l83.928-83.444c4.686-4.686 4.686-12.284 0-16.971l-7.071-7.07c-4.686-4.686-12.284-4.686-16.97 0l-116.485 116c-4.686 4.686-4.686 12.284 0 16.971l116.485 116c4.686 4.686 12.284 4.686 16.97-.001z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-communication-diagram/uml-communication-link/uml-communication-link-update.js
  var Flex11 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var getInitialState9 = () => ({
    fieldToFocus: void 0,
    colorOpen: false
  });
  var CommunicationLinkUpdate = class extends import_react161.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState9();
      this.newCommunicationLinkField = (0, import_react161.createRef)();
      this.messageRefs = [];
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.create = (value) => {
        const { element, update: update3 } = this.props;
        if (!element.messages.find((message) => message.name === value)) {
          update3(element.id, {
            messages: [...element.messages, new CommunicationLinkMessage({ id: uuid(), name: value, direction: "source" })]
          });
        }
      };
      this.rename = (value) => (name) => {
        const { element, update: update3 } = this.props;
        const messages = [...element.messages];
        const index = messages.findIndex((message) => message.name === value.name);
        messages[index].name = name;
        update3(element.id, { messages });
      };
      this.flip = (value) => () => {
        const { element, update: update3 } = this.props;
        const messages = [...element.messages];
        const index = messages.findIndex((message) => message.name === value.name);
        messages[index].direction = messages[index].direction === "source" ? "target" : "source";
        update3(element.id, { messages });
      };
      this.delete = (value) => () => {
        const { element, update: update3 } = this.props;
        update3(element.id, {
          messages: element.messages.filter((message) => message.name !== value.name)
        });
      };
    }
    componentDidMount() {
      this.setState({ fieldToFocus: this.newCommunicationLinkField.current });
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.state.fieldToFocus) {
        this.state.fieldToFocus.focus();
        this.setState({ fieldToFocus: void 0 });
      }
    }
    render() {
      const { element, getById } = this.props;
      const source = element.source && getById(element.source.element);
      const target = element.target && getById(element.target.element);
      if (!source || !target)
        return null;
      return import_react161.default.createElement(
        "div",
        null,
        import_react161.default.createElement(
          "section",
          null,
          import_react161.default.createElement(
            Flex11,
            null,
            import_react161.default.createElement(Header, { gutter: false }, this.props.translate("packages.CommunicationDiagram.CommunicationLink")),
            import_react161.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react161.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.delete(element.id) },
              import_react161.default.createElement(TrashIcon, null)
            )
          ),
          import_react161.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true }),
          import_react161.default.createElement(Divider2, null)
        ),
        import_react161.default.createElement(
          "section",
          null,
          import_react161.default.createElement(
            Header,
            null,
            this.props.translate("popup.messages"),
            " (",
            import_react161.default.createElement(
              "small",
              null,
              source.name,
              " \u27F6 ",
              target.name
            ),
            ")"
          ),
          element.messages.map((message, i2) => import_react161.default.createElement(
            Flex11,
            { key: message.id },
            import_react161.default.createElement(Textfield, { ref: (ref) => this.messageRefs[i2] = ref, gutter: true, value: message.name, onChange: this.rename(message), onSubmitKeyUp: () => i2 === element.messages.length - 1 ? this.newCommunicationLinkField.current?.focus() : this.setState({
              fieldToFocus: this.messageRefs[i2 + 1]
            }) }),
            import_react161.default.createElement(Button2, { color: "link", tabIndex: -1, onClick: this.flip(message) }, message.direction === "source" ? import_react161.default.createElement(ArrowRightIcon, null) : import_react161.default.createElement(ArrowLeftIcon, null)),
            import_react161.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(message) },
              import_react161.default.createElement(TrashIcon, null)
            )
          )),
          import_react161.default.createElement(Textfield, { ref: this.newCommunicationLinkField, outline: true, value: "", onSubmit: this.create, onSubmitKeyUp: () => this.setState({
            fieldToFocus: this.newCommunicationLinkField.current
          }), onKeyDown: (event) => {
            if (event.key === "Tab" && event.currentTarget.value) {
              event.preventDefault();
              event.currentTarget.blur();
              this.setState({
                fieldToFocus: this.newCommunicationLinkField.current
              });
            }
          } })
        )
      );
    }
  };
  var enhance39 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip,
    getById: UMLElementRepository.getById
  }));
  var UMLCommunicationLinkUpdate = enhance39(CommunicationLinkUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-component-diagram/uml-component-association-update.js
  var import_react162 = __toESM(require_react());
  var Flex12 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var ComponentAssociationUpdate = class extends import_react162.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onChange = (value) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { type: value });
      };
    }
    render() {
      const { element } = this.props;
      return import_react162.default.createElement(
        "div",
        null,
        import_react162.default.createElement(
          "section",
          null,
          import_react162.default.createElement(
            Flex12,
            null,
            import_react162.default.createElement(Header, { gutter: false, style: { flexGrow: 1 } }, this.props.translate("popup.association")),
            import_react162.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react162.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.flip(element.id) },
              import_react162.default.createElement(ExchangeIcon, null)
            ),
            import_react162.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react162.default.createElement(TrashIcon, null)
            )
          ),
          import_react162.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true }),
          import_react162.default.createElement(Divider2, null)
        ),
        import_react162.default.createElement(
          "section",
          null,
          import_react162.default.createElement(
            Dropdown,
            { value: element.type, onChange: this.onChange },
            import_react162.default.createElement(Dropdown.Item, { value: ComponentRelationshipType.ComponentDependency }, this.props.translate("packages.ComponentDiagram.ComponentDependency")),
            import_react162.default.createElement(Dropdown.Item, { value: ComponentRelationshipType.ComponentInterfaceProvided }, this.props.translate("packages.ComponentDiagram.ComponentInterfaceProvided")),
            import_react162.default.createElement(Dropdown.Item, { value: ComponentRelationshipType.ComponentInterfaceRequired }, this.props.translate("packages.ComponentDiagram.ComponentInterfaceRequired"))
          )
        )
      );
    }
  };
  var enhance40 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip
  }));
  var UMLComponentAssociationUpdate = enhance40(ComponentAssociationUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-association/uml-deployment-association-update.js
  var import_react163 = __toESM(require_react());
  var Flex13 = styled_components_browser_esm_default.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var DeploymentAssociationUpdate = class extends import_react163.Component {
    constructor(props) {
      super(props);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onChange = (value) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { type: value });
      };
      this.rename = (value) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name: value });
      };
      this.onChange = this.onChange.bind(this);
    }
    render() {
      const { element } = this.props;
      return import_react163.default.createElement(
        "div",
        null,
        import_react163.default.createElement(
          "section",
          null,
          import_react163.default.createElement(
            Flex13,
            null,
            import_react163.default.createElement(Header, { gutter: false, style: { flexGrow: 1 } }, this.props.translate("popup.association")),
            import_react163.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react163.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.flip(element.id) },
              import_react163.default.createElement(ExchangeIcon, null)
            ),
            import_react163.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react163.default.createElement(TrashIcon, null)
            )
          ),
          import_react163.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: element.type === DeploymentRelationshipType.DeploymentAssociation }),
          import_react163.default.createElement(Divider2, null)
        ),
        import_react163.default.createElement(
          "section",
          null,
          import_react163.default.createElement(
            Dropdown,
            { value: element.type, onChange: this.onChange },
            import_react163.default.createElement(Dropdown.Item, { value: DeploymentRelationshipType.DeploymentAssociation }, this.props.translate("packages.DeploymentDiagram.DeploymentAssociation")),
            import_react163.default.createElement(Dropdown.Item, { value: DeploymentRelationshipType.DeploymentDependency }, this.props.translate("packages.DeploymentDiagram.DeploymentDependency")),
            import_react163.default.createElement(Dropdown.Item, { value: DeploymentRelationshipType.DeploymentInterfaceProvided }, this.props.translate("packages.DeploymentDiagram.DeploymentInterfaceProvided")),
            import_react163.default.createElement(Dropdown.Item, { value: DeploymentRelationshipType.DeploymentInterfaceRequired }, this.props.translate("packages.DeploymentDiagram.DeploymentInterfaceRequired"))
          )
        ),
        element.type === DeploymentRelationshipType.DeploymentAssociation && import_react163.default.createElement(
          import_react163.default.Fragment,
          null,
          import_react163.default.createElement(Divider2, null),
          import_react163.default.createElement(
            "section",
            null,
            import_react163.default.createElement(
              Flex13,
              null,
              import_react163.default.createElement(Textfield, { value: element.name, onChange: this.rename, autoFocus: true }),
              import_react163.default.createElement(
                Button2,
                { color: "link", onClick: () => this.props.delete(element.id) },
                import_react163.default.createElement(TrashIcon, null)
              )
            )
          )
        )
      );
    }
  };
  var enhance41 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip
  }));
  var UMLDeploymentAssociationUpdate = enhance41(DeploymentAssociationUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-deployment-diagram/uml-deployment-node/uml-deployment-node-update.js
  var import_react164 = __toESM(require_react());
  var Flex14 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var DeploymentNodeUpdate = class extends import_react164.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onRename = (value) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name: value });
      };
      this.onStereotypeVisibilityToggle = () => {
        const { element, update: update3 } = this.props;
        const newVisibilityValue = !element.displayStereotype;
        update3(element.id, { displayStereotype: newVisibilityValue });
      };
      this.onStereotypeRename = (value) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { stereotype: value });
      };
    }
    render() {
      const { element } = this.props;
      return import_react164.default.createElement(
        "div",
        null,
        import_react164.default.createElement(
          "section",
          null,
          import_react164.default.createElement(
            Flex14,
            null,
            import_react164.default.createElement(Textfield, { value: element.name, onChange: this.onRename, autoFocus: true }),
            import_react164.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react164.default.createElement(StereotypeToggle, { value: element.displayStereotype, onChange: this.onStereotypeVisibilityToggle }),
            import_react164.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react164.default.createElement(TrashIcon, null)
            )
          ),
          import_react164.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
        ),
        import_react164.default.createElement(
          "section",
          null,
          import_react164.default.createElement(Divider2, null),
          import_react164.default.createElement(
            Flex14,
            null,
            import_react164.default.createElement(Textfield, { value: element.stereotype, onChange: this.onStereotypeRename })
          )
        )
      );
    }
  };
  var enhance42 = connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  });
  var UMLDeploymentNodeUpdate = enhance42(DeploymentNodeUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-object-diagram/uml-object-name/uml-object-name-update.js
  var import_react165 = __toESM(require_react());
  var Flex15 = styled_components_browser_esm_default.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var getInitialState10 = () => ({
    fieldToFocus: void 0,
    colorOpen: false
  });
  var ObjectNameComponent = class extends import_react165.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState10();
      this.newMethodField = (0, import_react165.createRef)();
      this.newAttributeField = (0, import_react165.createRef)();
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.create = (Clazz) => (value) => {
        const { element, create: create4 } = this.props;
        const member = new Clazz();
        member.name = value;
        create4(member, element.id);
      };
      this.rename = (id2) => (name) => {
        this.props.update(id2, { name });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.state.fieldToFocus) {
        this.state.fieldToFocus.focus();
        this.setState({ fieldToFocus: void 0 });
      }
    }
    render() {
      const { element, getById } = this.props;
      const children = element.ownedElements.map((id2) => getById(id2)).filter(notEmpty);
      const attributes = children.filter((child) => child instanceof UMLObjectAttribute);
      const methods = children.filter((child) => child instanceof UMLObjectMethod);
      const attributeRefs = [];
      const methodRefs = [];
      return import_react165.default.createElement(
        "div",
        null,
        import_react165.default.createElement(
          "section",
          null,
          import_react165.default.createElement(
            Flex15,
            null,
            import_react165.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react165.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react165.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react165.default.createElement(TrashIcon, null)
            )
          ),
          import_react165.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, fillColor: true, lineColor: true, textColor: true }),
          import_react165.default.createElement(Divider2, null)
        ),
        import_react165.default.createElement(
          "section",
          null,
          import_react165.default.createElement(Header, null, this.props.translate("popup.attributes")),
          attributes.map((attribute, index) => import_react165.default.createElement(uml_classifier_attribute_update_default, { id: attribute.id, key: attribute.id, value: attribute.name, onChange: this.props.update, onSubmitKeyUp: () => index === attributes.length - 1 ? this.newAttributeField.current?.focus() : this.setState({
            fieldToFocus: attributeRefs[index + 1]
          }), onDelete: this.delete, onRefChange: (ref) => attributeRefs[index] = ref, element: attribute })),
          import_react165.default.createElement(Textfield, { ref: this.newAttributeField, outline: true, value: "", onSubmit: this.create(UMLObjectAttribute), onSubmitKeyUp: (key, value) => {
            if (value) {
              this.setState({
                fieldToFocus: this.newAttributeField.current
              });
            } else {
              if (methodRefs && methodRefs.length > 0) {
                this.setState({
                  fieldToFocus: methodRefs[0]
                });
              } else {
                this.setState({
                  fieldToFocus: this.newMethodField.current
                });
              }
            }
          }, onKeyDown: (event) => {
            if (event.key === "Tab" && event.currentTarget.value) {
              event.preventDefault();
              event.currentTarget.blur();
              this.setState({
                fieldToFocus: this.newAttributeField.current
              });
            }
          } })
        ),
        import_react165.default.createElement(
          "section",
          null,
          import_react165.default.createElement(Divider2, null),
          import_react165.default.createElement(Header, null, this.props.translate("popup.methods")),
          methods.map((method, index) => import_react165.default.createElement(uml_classifier_attribute_update_default, { id: method.id, key: method.id, value: method.name, onChange: this.props.update, onSubmitKeyUp: () => index === methods.length - 1 ? this.newMethodField.current?.focus() : this.setState({
            fieldToFocus: methodRefs[index + 1]
          }), onDelete: this.delete, onRefChange: (ref) => methodRefs[index] = ref, element: method })),
          import_react165.default.createElement(Textfield, { ref: this.newMethodField, outline: true, value: "", onSubmit: this.create(UMLObjectMethod), onSubmitKeyUp: () => this.setState({
            fieldToFocus: this.newMethodField.current
          }), onKeyDown: (event) => {
            if (event.key === "Tab" && event.currentTarget.value) {
              event.preventDefault();
              event.currentTarget.blur();
              this.setState({
                fieldToFocus: this.newMethodField.current
              });
            }
          } })
        )
      );
    }
  };
  var enhance43 = compose(localized, connect_default(null, {
    create: UMLElementRepository.create,
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    getById: UMLElementRepository.getById
  }));
  var UMLObjectNameUpdate = enhance43(ObjectNameComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-use-case-diagram/uml-use-case-association/uml-use-case-association-update.js
  var import_react166 = __toESM(require_react());
  var Flex16 = styled_components_browser_esm_default.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var UseCaseAssociationUpdate = class extends import_react166.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.onChange = (type) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { type });
      };
    }
    render() {
      const { element } = this.props;
      return import_react166.default.createElement(
        "div",
        null,
        import_react166.default.createElement("section", null, element.type === UseCaseRelationshipType.UseCaseAssociation ? import_react166.default.createElement(
          Flex16,
          null,
          import_react166.default.createElement(Textfield, { value: element.name, placeholder: "...", onChange: this.rename(element.id), autoFocus: true }),
          import_react166.default.createElement(ColorButton, { onClick: this.toggleColor }),
          import_react166.default.createElement(
            Button2,
            { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
            import_react166.default.createElement(TrashIcon, null)
          )
        ) : import_react166.default.createElement(
          Flex16,
          null,
          import_react166.default.createElement(Header, { gutter: false, style: { flexGrow: 1 } }, {
            [UseCaseRelationshipType.UseCaseAssociation]: this.props.translate("packages.UseCaseDiagram.UseCaseAssociation"),
            [UseCaseRelationshipType.UseCaseGeneralization]: this.props.translate("packages.UseCaseDiagram.UseCaseGeneralization"),
            [UseCaseRelationshipType.UseCaseInclude]: this.props.translate("packages.UseCaseDiagram.UseCaseInclude"),
            [UseCaseRelationshipType.UseCaseExtend]: this.props.translate("packages.UseCaseDiagram.UseCaseExtend")
          }[element.type]),
          import_react166.default.createElement(ColorButton, { onClick: this.toggleColor }),
          import_react166.default.createElement(
            Button2,
            { color: "link", tabIndex: -1, onClick: () => this.props.flip(element.id) },
            import_react166.default.createElement(ExchangeIcon, null)
          ),
          import_react166.default.createElement(
            Button2,
            { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
            import_react166.default.createElement(TrashIcon, null)
          )
        )),
        import_react166.default.createElement(
          "section",
          null,
          import_react166.default.createElement(Divider2, null),
          import_react166.default.createElement(
            Dropdown,
            { value: element.type, onChange: this.onChange },
            import_react166.default.createElement(Dropdown.Item, { value: UseCaseRelationshipType.UseCaseAssociation }, this.props.translate("packages.UseCaseDiagram.UseCaseAssociation")),
            import_react166.default.createElement(Dropdown.Item, { value: UseCaseRelationshipType.UseCaseGeneralization }, this.props.translate("packages.UseCaseDiagram.UseCaseGeneralization")),
            import_react166.default.createElement(Dropdown.Item, { value: UseCaseRelationshipType.UseCaseInclude }, this.props.translate("packages.UseCaseDiagram.UseCaseInclude")),
            import_react166.default.createElement(Dropdown.Item, { value: UseCaseRelationshipType.UseCaseExtend }, this.props.translate("packages.UseCaseDiagram.UseCaseExtend"))
          )
        ),
        import_react166.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: element.type !== UseCaseRelationshipType.UseCaseGeneralization })
      );
    }
  };
  var enhance44 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip
  }));
  var UMLUseCaseAssociationUpdate = enhance44(UseCaseAssociationUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/uml-petri-net-place/uml-petri-net-place-update.js
  var import_react168 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/infinite.js
  var import_react167 = __toESM(require_react());
  var InfiniteIcon = (props) => import_react167.default.createElement(
    Icon,
    { viewBox: "0 0 330 220", ...props },
    import_react167.default.createElement(
      "g",
      { transform: "translate(0.912517,-1.244823)" },
      import_react167.default.createElement("path", { style: { fill: "#000000", fillOpacity: 1, stroke: "none" }, d: "M 177.49050,123.22017 C 184.81453,136.25742 193.31063,146.07188 202.97884,152.66359 C 212.79308,159.10900 223.85266,162.33166 236.15762,162.33158 C 250.95230,162.33166 263.03727,157.42443 272.41258,147.60987 C 281.78729,137.64902 286.47480,124.97811 286.47511,109.59709 C 286.47480,94.802293 282.15350,82.497592 273.51121,72.682955 C 264.86833,62.868664 254.02847,57.961432 240.99161,57.961244 C 229.12610,57.961432 218.35949,62.868664 208.69174,72.682955 C 199.17001,82.351107 188.76961,99.196829 177.49050,123.22017 M 150.68381,99.709379 C 143.50589,86.818886 135.00979,77.150906 125.19547,70.705411 C 115.52734,64.260267 104.46776,61.037607 92.016692,61.037422 C 77.221638,61.037607 65.136664,65.944839 55.761733,75.759133 C 46.386643,85.427283 41.699138,97.951711 41.699203,113.33245 C 41.699138,128.12753 46.020432,140.43223 54.663098,150.24659 C 63.305607,160.06115 74.145463,164.96839 87.182697,164.96830 C 99.047834,164.96839 109.74121,160.13440 119.26284,150.46632 C 128.93068,140.79844 139.40432,123.87947 150.68381,99.709379 M 166.28443,139.91942 C 155.88383,159.84143 144.97074,174.41664 133.54510,183.64510 C 122.26563,192.87369 109.66796,197.48795 95.752051,197.48790 C 75.976520,197.48795 59.204040,189.28482 45.434563,172.87848 C 31.811432,156.47228 24.999901,136.18417 24.999949,112.01409 C 24.999901,86.379432 31.079009,65.651870 43.237293,49.831344 C 55.541927,34.011210 71.508741,26.101045 91.137784,26.100825 C 105.05370,26.101045 117.50489,30.642066 128.49138,39.723901 C 139.47757,48.659664 150.46391,63.454602 161.45043,84.108760 C 171.41120,63.894056 182.17781,49.025875 193.75030,39.504174 C 205.32237,29.836401 218.21300,25.002411 232.42226,25.002190 C 251.90445,25.002411 268.53044,33.278788 282.30030,49.831344 C 296.21602,66.384293 303.17404,86.818886 303.17436,111.13518 C 303.17404,136.62363 297.02169,157.27795 284.71729,173.09820 C 272.55877,188.77212 256.66520,196.60905 237.03653,196.60900 C 223.12024,196.60905 210.74229,192.36099 199.90266,183.86483 C 189.20907,175.22230 178.00300,160.57385 166.28443,139.91942" })
    )
  );

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/uml-petri-net-place/uml-petri-net-place-update.js
  var enhance45 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var Flex17 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var UmlPetriNetPlaceUpdateComponent = class extends import_react168.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.changeTokenAmount = (id2) => (value) => {
        this.props.update(id2, { amountOfTokens: value });
      };
      this.changeCapacity = (id2) => (value) => {
        this.props.update(id2, { capacity: value });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react168.default.createElement(
        "div",
        null,
        import_react168.default.createElement(
          "section",
          null,
          import_react168.default.createElement(
            Flex17,
            null,
            import_react168.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react168.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react168.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react168.default.createElement(TrashIcon, null)
            )
          ),
          import_react168.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true }),
          import_react168.default.createElement(Divider2, null)
        ),
        import_react168.default.createElement(
          "section",
          null,
          import_react168.default.createElement(
            Flex17,
            null,
            import_react168.default.createElement(Body, { style: { marginRight: "0.5em", minWidth: "70px" } }, this.props.translate("popup.tokens")),
            import_react168.default.createElement(Textfield, { style: { minWidth: 0 }, value: element.amountOfTokens, type: "number", onChange: this.changeTokenAmount(element.id) })
          )
        ),
        import_react168.default.createElement(
          "section",
          null,
          import_react168.default.createElement(
            Flex17,
            { style: { marginTop: "0.5em", alignItems: "center" } },
            import_react168.default.createElement(Body, { style: { marginRight: "0.5em", minWidth: "70px" } }, this.props.translate("popup.capacity")),
            import_react168.default.createElement(
              "div",
              { style: { position: "relative" } },
              import_react168.default.createElement(Textfield, { value: element.capacity, type: "number", onChange: this.changeCapacity(element.id) }),
              !isFinite(element.capacity) && import_react168.default.createElement(InfiniteIcon, { style: { position: "absolute", top: "25%", left: "5%" }, key: element.capacity })
            ),
            import_react168.default.createElement(
              Button2,
              { color: "link", type: "reset", tabIndex: -1, onClick: (event) => this.changeCapacity(element.id)(Number.POSITIVE_INFINITY) },
              import_react168.default.createElement(InfiniteIcon, null)
            )
          )
        )
      );
    }
  };
  var UMLPetriNetPlaceUpdate = enhance45(UmlPetriNetPlaceUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-petri-net/uml-petri-net-arc/uml-petri-net-arc-update.js
  var import_react169 = __toESM(require_react());
  var enhance46 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip
  }));
  var Flex18 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var UMLPetriNetArcUpdateComponent = class extends import_react169.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react169.default.createElement(
        "div",
        null,
        import_react169.default.createElement(
          "section",
          null,
          import_react169.default.createElement(
            Flex18,
            null,
            import_react169.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react169.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react169.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.flip(element.id) },
              import_react169.default.createElement(ExchangeIcon, null)
            ),
            import_react169.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react169.default.createElement(TrashIcon, null)
            )
          ),
          import_react169.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true })
        )
      );
    }
  };
  var UMLPetriNetArcUpdate = enhance46(UMLPetriNetArcUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-reachability-graph/uml-reachability-graph-arc/uml-reachability-graph-arc-update.js
  var import_react170 = __toESM(require_react());
  var enhance47 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip
  }));
  var Flex19 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var UMLReachabilityGraphArcUpdateComponent = class extends import_react170.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react170.default.createElement(
        "div",
        null,
        import_react170.default.createElement(
          "section",
          null,
          import_react170.default.createElement(
            Flex19,
            null,
            import_react170.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react170.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react170.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.flip(element.id) },
              import_react170.default.createElement(ExchangeIcon, null)
            ),
            import_react170.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react170.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react170.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true })
      );
    }
  };
  var UMLReachabilityGraphArcUpdate = enhance47(UMLReachabilityGraphArcUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/uml-reachability-graph/uml-reachability-graph-marking/uml-reachability-graph-marking-update.js
  var import_react171 = __toESM(require_react());
  var enhance48 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var Flex20 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var UmlReachabilityGraphMarkingUpdate = class extends import_react171.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.toggleIsInitialMarking = (id2) => (event) => {
        this.props.update(id2, { isInitialMarking: event.currentTarget.checked });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react171.default.createElement(
        "div",
        null,
        import_react171.default.createElement(
          "section",
          null,
          import_react171.default.createElement(
            Flex20,
            null,
            import_react171.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react171.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react171.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react171.default.createElement(TrashIcon, null)
            )
          ),
          import_react171.default.createElement(Divider2, null)
        ),
        import_react171.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true }),
        import_react171.default.createElement(
          "section",
          null,
          import_react171.default.createElement(
            "label",
            { htmlFor: "toggleIsInitialMarking" },
            import_react171.default.createElement("input", { id: "toggleIsInitialMarking", type: "checkbox", checked: element.isInitialMarking, onChange: this.toggleIsInitialMarking(element.id) }),
            this.props.translate("packages.ReachabilityGraph.ReachabilityGraphIsInitialMarking")
          )
        )
      );
    }
  };
  var UMLReachabilityGraphMarkingUpdate = enhance48(UmlReachabilityGraphMarkingUpdate);

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/syntax-tree-terminal/syntax-tree-terminal-update.js
  var import_react172 = __toESM(require_react());
  var Flex21 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var SyntaxTreeTerminalUpdateComponent = class extends import_react172.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onUpdate = (name) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name });
      };
    }
    render() {
      const { element } = this.props;
      return import_react172.default.createElement(
        "div",
        null,
        import_react172.default.createElement(
          "section",
          null,
          import_react172.default.createElement(
            Flex21,
            null,
            import_react172.default.createElement(Textfield, { value: element.name, placeholder: this.props.translate("packages.SyntaxTree.SyntaxTreeTerminal"), onChange: this.onUpdate, autoFocus: true }),
            import_react172.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react172.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react172.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react172.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
      );
    }
  };
  var enhance49 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var SyntaxTreeTerminalUpdate = enhance49(SyntaxTreeTerminalUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/syntax-tree/syntax-tree-nonterminal/syntax-tree-nonterminal-update.js
  var import_react173 = __toESM(require_react());
  var Flex22 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var SyntaxTreeNonterminalUpdateComponent = class extends import_react173.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onUpdate = (name) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name });
      };
    }
    render() {
      const { element } = this.props;
      return import_react173.default.createElement(
        "div",
        null,
        import_react173.default.createElement(
          "section",
          null,
          import_react173.default.createElement(
            Flex22,
            null,
            import_react173.default.createElement(Textfield, { value: element.name, placeholder: this.props.translate("packages.SyntaxTree.SyntaxTreeNonterminal"), onChange: this.onUpdate, autoFocus: true }),
            import_react173.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react173.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react173.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react173.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
      );
    }
  };
  var enhance50 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var SyntaxTreeNonterminalUpdate = enhance50(SyntaxTreeNonterminalUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-terminal/flowchart-terminal-update.js
  var import_react175 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-element/flowchart-update.js
  var import_react174 = __toESM(require_react());
  var Flex23 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var FlowchartUpdateComponent = class extends import_react174.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onUpdate = (name) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name });
      };
    }
    render() {
      const { element } = this.props;
      return import_react174.default.createElement(
        "div",
        null,
        import_react174.default.createElement(
          "section",
          null,
          import_react174.default.createElement(
            Flex23,
            null,
            import_react174.default.createElement(Textfield, { value: element.name, placeholder: this.props.translate("packages.Flowchart.FlowchartDecision"), onChange: this.onUpdate, autoFocus: true }),
            import_react174.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react174.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react174.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react174.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
      );
    }
  };
  var enhance51 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-terminal/flowchart-terminal-update.js
  var FlowchartTerminalUpdateComponent = (props) => {
    return import_react175.default.createElement(FlowchartUpdateComponent, { ...props });
  };
  var FlowchartTerminalUpdate = enhance51(FlowchartTerminalUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-process/flowchart-process-update.js
  var import_react176 = __toESM(require_react());
  var FlowchartProcessUpdateComponent = (props) => {
    return import_react176.default.createElement(FlowchartUpdateComponent, { ...props });
  };
  var FlowchartProcessUpdate = enhance51(FlowchartProcessUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-decision/flowchart-decision-update.js
  var import_react177 = __toESM(require_react());
  var FlowchartDecisionUpdateComponent = (props) => {
    return import_react177.default.createElement(FlowchartUpdateComponent, { ...props });
  };
  var FlowchartDecisionUpdate = enhance51(FlowchartDecisionUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-function-call/flowchart-function-call-update.js
  var import_react178 = __toESM(require_react());
  var FlowchartFunctionCallUpdateComponent = (props) => {
    return import_react178.default.createElement(FlowchartUpdateComponent, { ...props });
  };
  var FlowchartFunctionCallUpdate = enhance51(FlowchartFunctionCallUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-input-output/flowchart-input-output-update.js
  var import_react179 = __toESM(require_react());
  var FlowchartInputOutputUpdateComponent = (props) => {
    return import_react179.default.createElement(FlowchartUpdateComponent, { ...props });
  };
  var FlowchartInputOutputUpdate = enhance51(FlowchartInputOutputUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/flowchart/flowchart-flowline/flowchart-flowline-update.js
  var import_react180 = __toESM(require_react());
  var Flex24 = styled_components_browser_esm_default.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var FlowchartFlowlineUpdateComponent = class extends import_react180.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (name) => {
        this.props.update(this.props.element.id, { name });
      };
    }
    render() {
      const { element } = this.props;
      return import_react180.default.createElement(
        "div",
        null,
        import_react180.default.createElement(
          "section",
          null,
          import_react180.default.createElement(
            Flex24,
            null,
            import_react180.default.createElement(Header, { gutter: false, style: { flexGrow: 1 } }, this.props.translate("packages.Flowchart.FlowchartFlowline")),
            import_react180.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react180.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.flip(element.id) },
              import_react180.default.createElement(ExchangeIcon, null)
            ),
            import_react180.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.delete(element.id) },
              import_react180.default.createElement(TrashIcon, null)
            )
          ),
          import_react180.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true }),
          import_react180.default.createElement(Divider2, null)
        ),
        import_react180.default.createElement(
          "section",
          null,
          import_react180.default.createElement(Textfield, { value: element.name, onChange: this.rename, autoFocus: true })
        )
      );
    }
  };
  var enhance52 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip
  }));
  var FlowchartFlowlineUpdate = enhance52(FlowchartFlowlineUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/common/color-legend/color-legend-update.js
  var import_react181 = __toESM(require_react());
  var Flex25 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var ColorLegendUpdateComponent = class extends import_react181.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.onUpdate = (name) => {
        const { element, update: update3 } = this.props;
        update3(element.id, { name });
      };
    }
    render() {
      const { element } = this.props;
      return import_react181.default.createElement(
        "div",
        null,
        import_react181.default.createElement(
          "section",
          null,
          import_react181.default.createElement(
            Flex25,
            null,
            import_react181.default.createElement(Textfield, { value: element.name, placeholder: this.props.translate("packages.SyntaxTree.SyntaxTreeNonterminal"), onChange: this.onUpdate, autoFocus: true }),
            import_react181.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react181.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.props.delete(element.id) },
              import_react181.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react181.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
      );
    }
  };
  var enhance53 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var ColorLegendUpdate = enhance53(ColorLegendUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-flow/bpmn-flow-update.js
  var import_react182 = __toESM(require_react());
  var enhance54 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    flip: UMLRelationshipRepository.flip
  }));
  var Flex26 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var BPMNFlowUpdateComponent = class extends import_react182.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.changeFlowType = (id2) => (value) => {
        this.props.update(id2, { flowType: value });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react182.default.createElement(
        "div",
        null,
        import_react182.default.createElement(
          "section",
          null,
          import_react182.default.createElement(
            Flex26,
            null,
            import_react182.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react182.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react182.default.createElement(
              Button2,
              { color: "link", onClick: () => this.props.flip(element.id) },
              import_react182.default.createElement(ExchangeIcon, null)
            ),
            import_react182.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react182.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react182.default.createElement(Divider2, null),
        import_react182.default.createElement(
          "section",
          null,
          import_react182.default.createElement(
            Dropdown,
            { value: element.flowType, onChange: this.changeFlowType(element.id) },
            import_react182.default.createElement(Dropdown.Item, { value: "sequence" }, this.props.translate("packages.BPMN.BPMNSequenceFlow")),
            import_react182.default.createElement(Dropdown.Item, { value: "message" }, this.props.translate("packages.BPMN.BPMNMessageFlow")),
            import_react182.default.createElement(Dropdown.Item, { value: "association" }, this.props.translate("packages.BPMN.BPMNAssociationFlow")),
            import_react182.default.createElement(Dropdown.Item, { value: "data association" }, this.props.translate("packages.BPMN.BPMNDataAssociationFlow"))
          )
        ),
        import_react182.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true })
      );
    }
  };
  var BPMNFlowUpdate = enhance54(BPMNFlowUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-gateway/bpmn-gateway-update.js
  var import_react183 = __toESM(require_react());
  var enhance55 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var Flex27 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var BPMNGatewayUpdateComponent = class extends import_react183.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.changeGatewayType = (id2) => (value) => {
        this.props.update(id2, { gatewayType: value });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react183.default.createElement(
        "div",
        null,
        import_react183.default.createElement(
          "section",
          null,
          import_react183.default.createElement(
            Flex27,
            null,
            import_react183.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react183.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react183.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react183.default.createElement(TrashIcon, null)
            )
          ),
          import_react183.default.createElement(Divider2, null)
        ),
        import_react183.default.createElement(
          "section",
          null,
          import_react183.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
        ),
        import_react183.default.createElement(
          "section",
          null,
          import_react183.default.createElement(
            Dropdown,
            { value: element.gatewayType, onChange: this.changeGatewayType(element.id) },
            import_react183.default.createElement(Dropdown.Item, { value: "exclusive" }, this.props.translate("packages.BPMN.BPMNExclusiveGateway")),
            import_react183.default.createElement(Dropdown.Item, { value: "parallel" }, this.props.translate("packages.BPMN.BPMNParallelGateway")),
            import_react183.default.createElement(Dropdown.Item, { value: "inclusive" }, this.props.translate("packages.BPMN.BPMNInclusiveGateway")),
            import_react183.default.createElement(Dropdown.Item, { value: "event-based" }, this.props.translate("packages.BPMN.BPMNEventBasedGateway")),
            import_react183.default.createElement(Dropdown.Item, { value: "complex" }, this.props.translate("packages.BPMN.BPMNComplexGateway"))
          )
        )
      );
    }
  };
  var BPMNGatewayUpdate = enhance55(BPMNGatewayUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-pool/bpmn-pool-update.js
  var import_react184 = __toESM(require_react());
  var enhance56 = compose(localized, connect_default(null, {
    create: UMLElementRepository.create,
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete,
    getById: UMLElementRepository.getById
  }));
  var Flex28 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var BPMNPoolUpdateComponent = class extends import_react184.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.newSwimlaneField = (0, import_react184.createRef)();
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2, name) => {
        this.props.update(id2, { name });
      };
      this.delete = (id2) => {
        this.props.delete(id2);
      };
      this.insertSwimlane = (owner, name) => {
        const children = this.props.element.ownedElements.map((id2) => this.props.getById(id2)).filter(notEmpty);
        const convertToSwimlaneBased = children.every((child) => child.type !== BPMNElementType.BPMNSwimlane);
        const swimlane = new BPMNSwimlane({
          id: uuid(),
          name: name ?? this.props.translate("packages.BPMN.BPMNSwimlane"),
          bounds: {
            x: BPMNPool.HEADER_WIDTH,
            width: this.props.element.bounds.width - BPMNPool.HEADER_WIDTH,
            height: convertToSwimlaneBased ? this.props.element.bounds.height : BPMNSwimlane.DEFAULT_HEIGHT
          },
          ownedElements: convertToSwimlaneBased ? this.props.element.ownedElements : []
        });
        this.props.create(swimlane, owner);
        const pool = new BPMNPool({
          ...this.props.element,
          ownedElements: convertToSwimlaneBased ? [swimlane.id] : [swimlane.id, ...this.props.element.ownedElements]
        });
        this.props.update(owner, pool);
        if (convertToSwimlaneBased) {
          children.forEach((child) => this.props.update(child.id, { owner: swimlane.id }));
        }
      };
    }
    render() {
      const { element, getById } = this.props;
      const swimlaneRefs = [];
      const swimlanes = element.ownedElements.map((id2) => getById(id2)).filter(notEmpty).filter((element2) => element2.type === BPMNElementType.BPMNSwimlane);
      return import_react184.default.createElement(
        "div",
        null,
        import_react184.default.createElement(
          "section",
          null,
          import_react184.default.createElement(
            Flex28,
            null,
            import_react184.default.createElement(Textfield, { value: element.name, onChange: (value) => this.rename(element.id, value), autoFocus: true }),
            import_react184.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react184.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: () => this.delete(element.id) },
              import_react184.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react184.default.createElement(
          "section",
          null,
          import_react184.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
        ),
        import_react184.default.createElement(
          "section",
          null,
          import_react184.default.createElement(Divider2, null),
          import_react184.default.createElement(Header, null, this.props.translate("packages.BPMN.BPMNSwimlanes")),
          swimlanes.reverse().map((swimlane, index) => import_react184.default.createElement(uml_classifier_attribute_update_default, { id: swimlane.id, key: swimlane.id, value: swimlane.name, onChange: this.props.update, onSubmitKeyUp: () => index === swimlanes.length - 1 ? this.newSwimlaneField.current?.focus() : this.setState({
            fieldToFocus: swimlaneRefs[index + 1]
          }), onDelete: (id2) => () => this.delete(id2), onRefChange: (ref) => swimlaneRefs[index] = ref, element: swimlane })),
          import_react184.default.createElement(Textfield, { ref: this.newSwimlaneField, outline: true, value: "", onSubmit: (name) => this.insertSwimlane(element.id, name), onSubmitKeyUp: () => this.setState({
            fieldToFocus: this.newSwimlaneField.current
          }), onKeyDown: (event) => {
            if (event.key === "Tab" && event.currentTarget.value) {
              event.preventDefault();
              event.currentTarget.blur();
              this.setState({
                fieldToFocus: this.newSwimlaneField.current
              });
            }
          } })
        )
      );
    }
  };
  var BPMNPoolUpdate = enhance56(BPMNPoolUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-intermediate-event/bpmn-intermediate-event-update.js
  var import_react185 = __toESM(require_react());
  var enhance57 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var Flex29 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var BPMNIntermediateEventUpdateComponent = class extends import_react185.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.changeEventType = (id2) => (value) => {
        this.props.update(id2, { eventType: value });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react185.default.createElement(
        "div",
        null,
        import_react185.default.createElement(
          "section",
          null,
          import_react185.default.createElement(
            Flex29,
            null,
            import_react185.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react185.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react185.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react185.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react185.default.createElement(
          "section",
          null,
          import_react185.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
        ),
        import_react185.default.createElement(
          "section",
          null,
          import_react185.default.createElement(Divider2, null),
          import_react185.default.createElement(
            Dropdown,
            { value: element.eventType, onChange: this.changeEventType(element.id) },
            import_react185.default.createElement(Dropdown.Item, { value: "default" }, this.props.translate("packages.BPMN.BPMNIntermediateEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "message-catch" }, this.props.translate("packages.BPMN.BPMNMessageIntermediateCatchEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "message-throw" }, this.props.translate("packages.BPMN.BPMNMessageIntermediateThrowEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "timer-catch" }, this.props.translate("packages.BPMN.BPMNTimerIntermediateCatchEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "escalation-throw" }, this.props.translate("packages.BPMN.BPMNEscalationIntermediateThrowEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "conditional-catch" }, this.props.translate("packages.BPMN.BPMNConditionalIntermediateCatchEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "link-catch" }, this.props.translate("packages.BPMN.BPMNLinkIntermediateCatchEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "link-throw" }, this.props.translate("packages.BPMN.BPMNLinkIntermediateThrowEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "compensation-throw" }, this.props.translate("packages.BPMN.BPMNCompensationIntermediateThrowEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "signal-catch" }, this.props.translate("packages.BPMN.BPMNSignalIntermediateCatchEvent")),
            import_react185.default.createElement(Dropdown.Item, { value: "signal-throw" }, this.props.translate("packages.BPMN.BPMNSignalIntermediateThrowEvent"))
          )
        )
      );
    }
  };
  var BPMNIntermediateEventUpdate = enhance57(BPMNIntermediateEventUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-start-event/bpmn-start-event-update.js
  var import_react186 = __toESM(require_react());
  var enhance58 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var Flex30 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var BPMNStartEventUpdateComponent = class extends import_react186.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.changeEventType = (id2) => (value) => {
        this.props.update(id2, { eventType: value });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react186.default.createElement(
        "div",
        null,
        import_react186.default.createElement(
          "section",
          null,
          import_react186.default.createElement(
            Flex30,
            null,
            import_react186.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react186.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react186.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react186.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react186.default.createElement(
          "section",
          null,
          import_react186.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
        ),
        import_react186.default.createElement(
          "section",
          null,
          import_react186.default.createElement(Divider2, null),
          import_react186.default.createElement(
            Dropdown,
            { value: element.eventType, onChange: this.changeEventType(element.id) },
            import_react186.default.createElement(Dropdown.Item, { value: "default" }, this.props.translate("packages.BPMN.BPMNStartEvent")),
            import_react186.default.createElement(Dropdown.Item, { value: "message" }, this.props.translate("packages.BPMN.BPMNMessageStartEvent")),
            import_react186.default.createElement(Dropdown.Item, { value: "timer" }, this.props.translate("packages.BPMN.BPMNTimerStartEvent")),
            import_react186.default.createElement(Dropdown.Item, { value: "conditional" }, this.props.translate("packages.BPMN.BPMNConditionalStartEvent")),
            import_react186.default.createElement(Dropdown.Item, { value: "signal" }, this.props.translate("packages.BPMN.BPMNSignalStartEvent"))
          )
        )
      );
    }
  };
  var BPMNStartEventUpdate = enhance58(BPMNStartEventUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-end-event/bpmn-end-event-update.js
  var import_react187 = __toESM(require_react());
  var enhance59 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var Flex31 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var BPMNEndEventUpdateComponent = class extends import_react187.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.changeEventType = (id2) => (value) => {
        this.props.update(id2, { eventType: value });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react187.default.createElement(
        "div",
        null,
        import_react187.default.createElement(
          "section",
          null,
          import_react187.default.createElement(
            Flex31,
            null,
            import_react187.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react187.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react187.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react187.default.createElement(TrashIcon, null)
            )
          )
        ),
        import_react187.default.createElement(
          "section",
          null,
          import_react187.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
        ),
        import_react187.default.createElement(
          "section",
          null,
          import_react187.default.createElement(Divider2, null),
          import_react187.default.createElement(
            Dropdown,
            { value: element.eventType, onChange: this.changeEventType(element.id) },
            import_react187.default.createElement(Dropdown.Item, { value: "default" }, this.props.translate("packages.BPMN.BPMNEndEvent")),
            import_react187.default.createElement(Dropdown.Item, { value: "message" }, this.props.translate("packages.BPMN.BPMNMessageEndEvent")),
            import_react187.default.createElement(Dropdown.Item, { value: "escalation" }, this.props.translate("packages.BPMN.BPMNEscalationEndEvent")),
            import_react187.default.createElement(Dropdown.Item, { value: "error" }, this.props.translate("packages.BPMN.BPMNErrorEndEvent")),
            import_react187.default.createElement(Dropdown.Item, { value: "compensation" }, this.props.translate("packages.BPMN.BPMNCompensationEndEvent")),
            import_react187.default.createElement(Dropdown.Item, { value: "signal" }, this.props.translate("packages.BPMN.BPMNSignalEndEvent")),
            import_react187.default.createElement(Dropdown.Item, { value: "terminate" }, this.props.translate("packages.BPMN.BPMNTerminateEndEvent"))
          )
        )
      );
    }
  };
  var BPMNEndEventUpdate = enhance59(BPMNEndEventUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/bpmn/bpmn-task/bpmn-task-update.js
  var import_react188 = __toESM(require_react());
  var enhance60 = compose(localized, connect_default(null, {
    update: UMLElementRepository.update,
    delete: UMLElementRepository.delete
  }));
  var Flex32 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var BPMNTaskUpdateComponent = class extends import_react188.Component {
    constructor() {
      super(...arguments);
      this.state = { colorOpen: false };
      this.toggleColor = () => {
        this.setState((state) => ({
          colorOpen: !state.colorOpen
        }));
      };
      this.rename = (id2) => (value) => {
        this.props.update(id2, { name: value });
      };
      this.changeTaskType = (id2) => (value) => {
        this.props.update(id2, { taskType: value });
      };
      this.changeMarker = (id2) => (value) => {
        if (this.props.element.marker === value) {
          this.props.update(id2, { marker: "none" });
          return;
        }
        this.props.update(id2, { marker: value });
      };
      this.delete = (id2) => () => {
        this.props.delete(id2);
      };
    }
    render() {
      const { element } = this.props;
      return import_react188.default.createElement(
        "div",
        null,
        import_react188.default.createElement(
          "section",
          null,
          import_react188.default.createElement(
            Flex32,
            null,
            import_react188.default.createElement(Textfield, { value: element.name, onChange: this.rename(element.id), autoFocus: true }),
            import_react188.default.createElement(ColorButton, { onClick: this.toggleColor }),
            import_react188.default.createElement(
              Button2,
              { color: "link", tabIndex: -1, onClick: this.delete(element.id) },
              import_react188.default.createElement(TrashIcon, null)
            )
          ),
          import_react188.default.createElement(
            "section",
            null,
            import_react188.default.createElement(StylePane, { open: this.state.colorOpen, element, onColorChange: this.props.update, lineColor: true, textColor: true, fillColor: true })
          )
        ),
        import_react188.default.createElement(
          "section",
          null,
          import_react188.default.createElement(Divider2, null),
          import_react188.default.createElement(
            Dropdown,
            { value: element.taskType, onChange: this.changeTaskType(element.id) },
            import_react188.default.createElement(Dropdown.Item, { value: "default" }, this.props.translate("packages.BPMN.BPMNTask")),
            import_react188.default.createElement(Dropdown.Item, { value: "user" }, this.props.translate("packages.BPMN.BPMNUserTask")),
            import_react188.default.createElement(Dropdown.Item, { value: "send" }, this.props.translate("packages.BPMN.BPMNSendTask")),
            import_react188.default.createElement(Dropdown.Item, { value: "receive" }, this.props.translate("packages.BPMN.BPMNReceiveTask")),
            import_react188.default.createElement(Dropdown.Item, { value: "manual" }, this.props.translate("packages.BPMN.BPMNManualTask")),
            import_react188.default.createElement(Dropdown.Item, { value: "business-rule" }, this.props.translate("packages.BPMN.BPMNBusinessRuleTask")),
            import_react188.default.createElement(Dropdown.Item, { value: "script" }, this.props.translate("packages.BPMN.BPMNScriptTask"))
          )
        ),
        import_react188.default.createElement(
          "section",
          null,
          import_react188.default.createElement(Divider2, null),
          import_react188.default.createElement(
            Switch,
            { value: element.marker, onChange: this.changeMarker(element.id), color: "primary" },
            import_react188.default.createElement(
              Switch.Item,
              { value: "parallel multi instance" },
              import_react188.default.createElement(BPMNParallelMarkerIcon, { stroke: "currentColor" })
            ),
            import_react188.default.createElement(
              Switch.Item,
              { value: "sequential multi instance" },
              import_react188.default.createElement(BPMNSequentialMarkerIcon, { stroke: "currentColor" })
            ),
            import_react188.default.createElement(
              Switch.Item,
              { value: "loop" },
              import_react188.default.createElement(BpmnLoopMarkerIcon, { stroke: "currentColor" })
            )
          )
        )
      );
    }
  };
  var BPMNTaskUpdate = enhance60(BPMNTaskUpdateComponent);

  // node_modules/@ls1intum/apollon/lib/es6/packages/popups.js
  var Popups = {
    // Elements
    [UMLElementType.Package]: DefaultPopup,
    [UMLElementType.Class]: UMLClassifierUpdate,
    [UMLElementType.AbstractClass]: UMLClassifierUpdate,
    [UMLElementType.Interface]: UMLClassifierUpdate,
    [UMLElementType.Enumeration]: UMLClassifierUpdate,
    [UMLElementType.ClassAttribute]: null,
    [UMLElementType.ClassMethod]: null,
    [UMLElementType.ObjectName]: UMLObjectNameUpdate,
    [UMLElementType.ObjectAttribute]: null,
    [UMLElementType.ObjectMethod]: null,
    [UMLElementType.Activity]: DefaultPopup,
    [UMLElementType.ActivityActionNode]: DefaultPopup,
    [UMLElementType.ActivityFinalNode]: DefaultPopup,
    [UMLElementType.ActivityForkNode]: DefaultPopup,
    [UMLElementType.ActivityForkNodeHorizontal]: DefaultPopup,
    [UMLElementType.ActivityInitialNode]: DefaultPopup,
    [UMLElementType.ActivityMergeNode]: UMLActivityMergeNodeUpdate,
    [UMLElementType.ActivityObjectNode]: DefaultPopup,
    [UMLElementType.UseCase]: DefaultPopup,
    [UMLElementType.UseCaseActor]: DefaultPopup,
    [UMLElementType.UseCaseSystem]: DefaultPopup,
    [UMLElementType.Component]: UMLComponentUpdate,
    [UMLElementType.Subsystem]: UMLComponentSubsystemUpdate,
    [UMLElementType.ComponentInterface]: DefaultPopup,
    [UMLElementType.DeploymentNode]: UMLDeploymentNodeUpdate,
    [UMLElementType.DeploymentComponent]: UMLComponentUpdate,
    [UMLElementType.DeploymentArtifact]: DefaultPopup,
    [UMLElementType.DeploymentInterface]: DefaultPopup,
    [UMLElementType.PetriNetPlace]: UMLPetriNetPlaceUpdate,
    [UMLElementType.PetriNetTransition]: DefaultPopup,
    [UMLElementType.ReachabilityGraphMarking]: UMLReachabilityGraphMarkingUpdate,
    [UMLElementType.CommunicationLinkMessage]: null,
    [UMLElementType.SyntaxTreeTerminal]: SyntaxTreeTerminalUpdate,
    [UMLElementType.SyntaxTreeNonterminal]: SyntaxTreeNonterminalUpdate,
    [UMLElementType.FlowchartTerminal]: FlowchartTerminalUpdate,
    [UMLElementType.FlowchartProcess]: FlowchartProcessUpdate,
    [UMLElementType.FlowchartDecision]: FlowchartDecisionUpdate,
    [UMLElementType.FlowchartFunctionCall]: FlowchartFunctionCallUpdate,
    [UMLElementType.FlowchartInputOutput]: FlowchartInputOutputUpdate,
    [UMLElementType.ColorLegend]: ColorLegendUpdate,
    [UMLElementType.BPMNTask]: BPMNTaskUpdate,
    [UMLElementType.BPMNSubprocess]: DefaultPopup,
    [UMLElementType.BPMNTransaction]: DefaultPopup,
    [UMLElementType.BPMNCallActivity]: DefaultPopup,
    [UMLElementType.BPMNAnnotation]: DefaultPopup,
    [UMLElementType.BPMNStartEvent]: BPMNStartEventUpdate,
    [UMLElementType.BPMNIntermediateEvent]: BPMNIntermediateEventUpdate,
    [UMLElementType.BPMNEndEvent]: BPMNEndEventUpdate,
    [UMLElementType.BPMNGateway]: BPMNGatewayUpdate,
    [UMLElementType.BPMNDataObject]: DefaultPopup,
    [UMLElementType.BPMNDataStore]: DefaultPopup,
    [UMLElementType.BPMNGroup]: DefaultPopup,
    [UMLElementType.BPMNPool]: BPMNPoolUpdate,
    [UMLElementType.BPMNSwimlane]: DefaultPopup,
    // Relationships
    [UMLRelationshipType.ClassAggregation]: UMLClassAssociationUpdate,
    [UMLRelationshipType.ClassBidirectional]: UMLClassAssociationUpdate,
    [UMLRelationshipType.ClassComposition]: UMLClassAssociationUpdate,
    [UMLRelationshipType.ClassDependency]: UMLClassAssociationUpdate,
    [UMLRelationshipType.ClassInheritance]: UMLClassAssociationUpdate,
    [UMLRelationshipType.ClassRealization]: UMLClassAssociationUpdate,
    [UMLRelationshipType.ClassUnidirectional]: UMLClassAssociationUpdate,
    [UMLRelationshipType.ObjectLink]: DefaultRelationshipPopup,
    [UMLRelationshipType.ActivityControlFlow]: UMLActivityControlFlowUpdate,
    [UMLRelationshipType.UseCaseAssociation]: UMLUseCaseAssociationUpdate,
    [UMLRelationshipType.UseCaseExtend]: UMLUseCaseAssociationUpdate,
    [UMLRelationshipType.UseCaseGeneralization]: UMLUseCaseAssociationUpdate,
    [UMLRelationshipType.UseCaseInclude]: UMLUseCaseAssociationUpdate,
    [UMLRelationshipType.CommunicationLink]: UMLCommunicationLinkUpdate,
    [UMLRelationshipType.ComponentInterfaceProvided]: UMLComponentAssociationUpdate,
    [UMLRelationshipType.ComponentInterfaceRequired]: UMLComponentAssociationUpdate,
    [UMLRelationshipType.ComponentDependency]: UMLComponentAssociationUpdate,
    [UMLRelationshipType.DeploymentAssociation]: UMLDeploymentAssociationUpdate,
    [UMLRelationshipType.DeploymentDependency]: UMLDeploymentAssociationUpdate,
    [UMLRelationshipType.DeploymentInterfaceProvided]: UMLDeploymentAssociationUpdate,
    [UMLRelationshipType.DeploymentInterfaceRequired]: UMLDeploymentAssociationUpdate,
    [UMLRelationshipType.PetriNetArc]: UMLPetriNetArcUpdate,
    [UMLRelationshipType.ReachabilityGraphArc]: UMLReachabilityGraphArcUpdate,
    [UMLRelationshipType.SyntaxTreeLink]: DefaultRelationshipPopup,
    [UMLRelationshipType.FlowchartFlowline]: FlowchartFlowlineUpdate,
    [UMLRelationshipType.BPMNFlow]: BPMNFlowUpdate
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/assessment/assessment.js
  var import_react194 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/assessment/assessment-section.js
  var import_react193 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/help.js
  var import_react189 = __toESM(require_react());
  var HelpIcon = (props) => import_react189.default.createElement(
    Icon,
    { viewBox: "0 0 512 512", ...props },
    import_react189.default.createElement("path", { d: "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z" })
  );

  // node_modules/@ls1intum/apollon/lib/es6/components/assessment/assessment-dropInfo-tooltip.js
  var import_react192 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/icon/link.js
  var import_react190 = __toESM(require_react());
  var LinkIcon = (props) => import_react190.default.createElement(
    Icon,
    { viewBox: "0 0 512 512", ...props },
    import_react190.default.createElement("path", { d: "M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z" })
  );

  // node_modules/react-tooltip/dist/index.es.js
  var import_react191 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());

  // node_modules/react-tooltip/node_modules/uuid/dist/esm-browser/rng.js
  var getRandomValues2 = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
  var rnds82 = new Uint8Array(16);
  function rng2() {
    if (!getRandomValues2) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    return getRandomValues2(rnds82);
  }

  // node_modules/react-tooltip/node_modules/uuid/dist/esm-browser/bytesToUuid.js
  var byteToHex2 = [];
  for (i2 = 0; i2 < 256; ++i2) {
    byteToHex2[i2] = (i2 + 256).toString(16).substr(1);
  }
  var i2;
  function bytesToUuid(buf, offset) {
    var i2 = offset || 0;
    var bth = byteToHex2;
    return [bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]]].join("");
  }
  var bytesToUuid_default = bytesToUuid;

  // node_modules/react-tooltip/node_modules/uuid/dist/esm-browser/v4.js
  function v42(options, buf, offset) {
    var i2 = buf && offset || 0;
    if (typeof options == "string") {
      buf = options === "binary" ? new Array(16) : null;
      options = null;
    }
    options = options || {};
    var rnds = options.random || (options.rng || rng2)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i2 + ii] = rnds[ii];
      }
    }
    return buf || bytesToUuid_default(rnds);
  }
  var v4_default2 = v42;

  // node_modules/react-tooltip/dist/index.es.js
  function ownKeys$2(object3, enumerableOnly) {
    var keys3 = Object.keys(object3);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object3);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      })), keys3.push.apply(keys3, symbols);
    }
    return keys3;
  }
  function _objectSpread22(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = null != arguments[i2] ? arguments[i2] : {};
      i2 % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o2) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
      return o3.__proto__ || Object.getPrototypeOf(o3);
    };
    return _getPrototypeOf(o2);
  }
  function _setPrototypeOf(o2, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p2) {
      o3.__proto__ = p2;
      return o3;
    };
    return _setPrototypeOf(o2, p);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _possibleConstructorReturn(self2, call3) {
    if (call3 && (typeof call3 === "object" || typeof call3 === "function")) {
      return call3;
    } else if (call3 !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2) return;
    if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set") return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
    return arr2;
  }
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (!it) {
      if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
        if (it) o2 = it;
        var i2 = 0;
        var F2 = function() {
        };
        return {
          s: F2,
          n: function() {
            if (i2 >= o2.length) return {
              done: true
            };
            return {
              done: false,
              value: o2[i2++]
            };
          },
          e: function(e2) {
            throw e2;
          },
          f: F2
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
      s: function() {
        it = it.call(o2);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e2) {
        didErr = true;
        err = e2;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  var check2 = function(it) {
    return it && it.Math == Math && it;
  };
  var global$a = (
    // eslint-disable-next-line es/no-global-this -- safe
    check2(typeof globalThis == "object" && globalThis) || check2(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    check2(typeof self == "object" && self) || check2(typeof commonjsGlobal == "object" && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
    /* @__PURE__ */ function() {
      return this;
    }() || Function("return this")()
  );
  var objectGetOwnPropertyDescriptor = {};
  var fails$9 = function(exec3) {
    try {
      return !!exec3();
    } catch (error) {
      return true;
    }
  };
  var fails$8 = fails$9;
  var descriptors = !fails$8(function() {
    return Object.defineProperty({}, 1, { get: function() {
      return 7;
    } })[1] != 7;
  });
  var fails$7 = fails$9;
  var functionBindNative = !fails$7(function() {
    var test2 = function() {
    }.bind();
    return typeof test2 != "function" || test2.hasOwnProperty("prototype");
  });
  var NATIVE_BIND$2 = functionBindNative;
  var call$4 = Function.prototype.call;
  var functionCall = NATIVE_BIND$2 ? call$4.bind(call$4) : function() {
    return call$4.apply(call$4, arguments);
  };
  var objectPropertyIsEnumerable = {};
  var $propertyIsEnumerable = {}.propertyIsEnumerable;
  var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
  var NASHORN_BUG = getOwnPropertyDescriptor$1 && !$propertyIsEnumerable.call({ 1: 2 }, 1);
  objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V2) {
    var descriptor = getOwnPropertyDescriptor$1(this, V2);
    return !!descriptor && descriptor.enumerable;
  } : $propertyIsEnumerable;
  var createPropertyDescriptor$2 = function(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value
    };
  };
  var NATIVE_BIND$1 = functionBindNative;
  var FunctionPrototype$1 = Function.prototype;
  var call$3 = FunctionPrototype$1.call;
  var uncurryThisWithBind = NATIVE_BIND$1 && FunctionPrototype$1.bind.bind(call$3, call$3);
  var functionUncurryThisRaw = function(fn) {
    return NATIVE_BIND$1 ? uncurryThisWithBind(fn) : function() {
      return call$3.apply(fn, arguments);
    };
  };
  var uncurryThisRaw$1 = functionUncurryThisRaw;
  var toString$1 = uncurryThisRaw$1({}.toString);
  var stringSlice = uncurryThisRaw$1("".slice);
  var classofRaw$2 = function(it) {
    return stringSlice(toString$1(it), 8, -1);
  };
  var classofRaw$1 = classofRaw$2;
  var uncurryThisRaw = functionUncurryThisRaw;
  var functionUncurryThis = function(fn) {
    if (classofRaw$1(fn) === "Function") return uncurryThisRaw(fn);
  };
  var uncurryThis$9 = functionUncurryThis;
  var fails$6 = fails$9;
  var classof$3 = classofRaw$2;
  var $Object$3 = Object;
  var split = uncurryThis$9("".split);
  var indexedObject = fails$6(function() {
    return !$Object$3("z").propertyIsEnumerable(0);
  }) ? function(it) {
    return classof$3(it) == "String" ? split(it, "") : $Object$3(it);
  } : $Object$3;
  var isNullOrUndefined$2 = function(it) {
    return it === null || it === void 0;
  };
  var isNullOrUndefined$1 = isNullOrUndefined$2;
  var $TypeError$5 = TypeError;
  var requireObjectCoercible$2 = function(it) {
    if (isNullOrUndefined$1(it)) throw $TypeError$5("Can't call method on " + it);
    return it;
  };
  var IndexedObject$1 = indexedObject;
  var requireObjectCoercible$1 = requireObjectCoercible$2;
  var toIndexedObject$4 = function(it) {
    return IndexedObject$1(requireObjectCoercible$1(it));
  };
  var documentAll$2 = typeof document == "object" && document.all;
  var IS_HTMLDDA = typeof documentAll$2 == "undefined" && documentAll$2 !== void 0;
  var documentAll_1 = {
    all: documentAll$2,
    IS_HTMLDDA
  };
  var $documentAll$1 = documentAll_1;
  var documentAll$1 = $documentAll$1.all;
  var isCallable$c = $documentAll$1.IS_HTMLDDA ? function(argument) {
    return typeof argument == "function" || argument === documentAll$1;
  } : function(argument) {
    return typeof argument == "function";
  };
  var isCallable$b = isCallable$c;
  var $documentAll = documentAll_1;
  var documentAll = $documentAll.all;
  var isObject$6 = $documentAll.IS_HTMLDDA ? function(it) {
    return typeof it == "object" ? it !== null : isCallable$b(it) || it === documentAll;
  } : function(it) {
    return typeof it == "object" ? it !== null : isCallable$b(it);
  };
  var global$9 = global$a;
  var isCallable$a = isCallable$c;
  var aFunction = function(argument) {
    return isCallable$a(argument) ? argument : void 0;
  };
  var getBuiltIn$5 = function(namespace, method) {
    return arguments.length < 2 ? aFunction(global$9[namespace]) : global$9[namespace] && global$9[namespace][method];
  };
  var uncurryThis$8 = functionUncurryThis;
  var objectIsPrototypeOf = uncurryThis$8({}.isPrototypeOf);
  var getBuiltIn$4 = getBuiltIn$5;
  var engineUserAgent = getBuiltIn$4("navigator", "userAgent") || "";
  var global$8 = global$a;
  var userAgent = engineUserAgent;
  var process3 = global$8.process;
  var Deno = global$8.Deno;
  var versions = process3 && process3.versions || Deno && Deno.version;
  var v8 = versions && versions.v8;
  var match;
  var version;
  if (v8) {
    match = v8.split(".");
    version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
  }
  if (!version && userAgent) {
    match = userAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
      match = userAgent.match(/Chrome\/(\d+)/);
      if (match) version = +match[1];
    }
  }
  var engineV8Version = version;
  var V8_VERSION = engineV8Version;
  var fails$5 = fails$9;
  var symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$5(function() {
    var symbol5 = Symbol();
    return !String(symbol5) || !(Object(symbol5) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
  });
  var NATIVE_SYMBOL$1 = symbolConstructorDetection;
  var useSymbolAsUid = NATIVE_SYMBOL$1 && !Symbol.sham && typeof Symbol.iterator == "symbol";
  var getBuiltIn$3 = getBuiltIn$5;
  var isCallable$9 = isCallable$c;
  var isPrototypeOf = objectIsPrototypeOf;
  var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
  var $Object$2 = Object;
  var isSymbol$2 = USE_SYMBOL_AS_UID$1 ? function(it) {
    return typeof it == "symbol";
  } : function(it) {
    var $Symbol = getBuiltIn$3("Symbol");
    return isCallable$9($Symbol) && isPrototypeOf($Symbol.prototype, $Object$2(it));
  };
  var $String$1 = String;
  var tryToString$1 = function(argument) {
    try {
      return $String$1(argument);
    } catch (error) {
      return "Object";
    }
  };
  var isCallable$8 = isCallable$c;
  var tryToString = tryToString$1;
  var $TypeError$4 = TypeError;
  var aCallable$2 = function(argument) {
    if (isCallable$8(argument)) return argument;
    throw $TypeError$4(tryToString(argument) + " is not a function");
  };
  var aCallable$1 = aCallable$2;
  var isNullOrUndefined = isNullOrUndefined$2;
  var getMethod$1 = function(V2, P) {
    var func3 = V2[P];
    return isNullOrUndefined(func3) ? void 0 : aCallable$1(func3);
  };
  var call$2 = functionCall;
  var isCallable$7 = isCallable$c;
  var isObject$5 = isObject$6;
  var $TypeError$3 = TypeError;
  var ordinaryToPrimitive$1 = function(input, pref) {
    var fn, val;
    if (pref === "string" && isCallable$7(fn = input.toString) && !isObject$5(val = call$2(fn, input))) return val;
    if (isCallable$7(fn = input.valueOf) && !isObject$5(val = call$2(fn, input))) return val;
    if (pref !== "string" && isCallable$7(fn = input.toString) && !isObject$5(val = call$2(fn, input))) return val;
    throw $TypeError$3("Can't convert object to primitive value");
  };
  var shared$3 = { exports: {} };
  var global$7 = global$a;
  var defineProperty$2 = Object.defineProperty;
  var defineGlobalProperty$3 = function(key, value) {
    try {
      defineProperty$2(global$7, key, { value, configurable: true, writable: true });
    } catch (error) {
      global$7[key] = value;
    }
    return value;
  };
  var global$6 = global$a;
  var defineGlobalProperty$2 = defineGlobalProperty$3;
  var SHARED = "__core-js_shared__";
  var store$3 = global$6[SHARED] || defineGlobalProperty$2(SHARED, {});
  var sharedStore = store$3;
  var store$2 = sharedStore;
  (shared$3.exports = function(key, value) {
    return store$2[key] || (store$2[key] = value !== void 0 ? value : {});
  })("versions", []).push({
    version: "3.25.5",
    mode: "global",
    copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
    license: "https://github.com/zloirock/core-js/blob/v3.25.5/LICENSE",
    source: "https://github.com/zloirock/core-js"
  });
  var requireObjectCoercible = requireObjectCoercible$2;
  var $Object$1 = Object;
  var toObject$2 = function(argument) {
    return $Object$1(requireObjectCoercible(argument));
  };
  var uncurryThis$7 = functionUncurryThis;
  var toObject$1 = toObject$2;
  var hasOwnProperty2 = uncurryThis$7({}.hasOwnProperty);
  var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
    return hasOwnProperty2(toObject$1(it), key);
  };
  var uncurryThis$6 = functionUncurryThis;
  var id = 0;
  var postfix = Math.random();
  var toString3 = uncurryThis$6(1 .toString);
  var uid$2 = function(key) {
    return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString3(++id + postfix, 36);
  };
  var global$5 = global$a;
  var shared$2 = shared$3.exports;
  var hasOwn$6 = hasOwnProperty_1;
  var uid$1 = uid$2;
  var NATIVE_SYMBOL = symbolConstructorDetection;
  var USE_SYMBOL_AS_UID = useSymbolAsUid;
  var WellKnownSymbolsStore = shared$2("wks");
  var Symbol$1 = global$5.Symbol;
  var symbolFor = Symbol$1 && Symbol$1["for"];
  var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$1;
  var wellKnownSymbol$5 = function(name) {
    if (!hasOwn$6(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
      var description = "Symbol." + name;
      if (NATIVE_SYMBOL && hasOwn$6(Symbol$1, name)) {
        WellKnownSymbolsStore[name] = Symbol$1[name];
      } else if (USE_SYMBOL_AS_UID && symbolFor) {
        WellKnownSymbolsStore[name] = symbolFor(description);
      } else {
        WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
      }
    }
    return WellKnownSymbolsStore[name];
  };
  var call$1 = functionCall;
  var isObject$4 = isObject$6;
  var isSymbol$1 = isSymbol$2;
  var getMethod = getMethod$1;
  var ordinaryToPrimitive = ordinaryToPrimitive$1;
  var wellKnownSymbol$4 = wellKnownSymbol$5;
  var $TypeError$2 = TypeError;
  var TO_PRIMITIVE = wellKnownSymbol$4("toPrimitive");
  var toPrimitive$1 = function(input, pref) {
    if (!isObject$4(input) || isSymbol$1(input)) return input;
    var exoticToPrim = getMethod(input, TO_PRIMITIVE);
    var result;
    if (exoticToPrim) {
      if (pref === void 0) pref = "default";
      result = call$1(exoticToPrim, input, pref);
      if (!isObject$4(result) || isSymbol$1(result)) return result;
      throw $TypeError$2("Can't convert object to primitive value");
    }
    if (pref === void 0) pref = "number";
    return ordinaryToPrimitive(input, pref);
  };
  var toPrimitive2 = toPrimitive$1;
  var isSymbol = isSymbol$2;
  var toPropertyKey$2 = function(argument) {
    var key = toPrimitive2(argument, "string");
    return isSymbol(key) ? key : key + "";
  };
  var global$4 = global$a;
  var isObject$3 = isObject$6;
  var document$1 = global$4.document;
  var EXISTS$1 = isObject$3(document$1) && isObject$3(document$1.createElement);
  var documentCreateElement$1 = function(it) {
    return EXISTS$1 ? document$1.createElement(it) : {};
  };
  var DESCRIPTORS$7 = descriptors;
  var fails$4 = fails$9;
  var createElement4 = documentCreateElement$1;
  var ie8DomDefine = !DESCRIPTORS$7 && !fails$4(function() {
    return Object.defineProperty(createElement4("div"), "a", {
      get: function() {
        return 7;
      }
    }).a != 7;
  });
  var DESCRIPTORS$6 = descriptors;
  var call2 = functionCall;
  var propertyIsEnumerableModule = objectPropertyIsEnumerable;
  var createPropertyDescriptor$1 = createPropertyDescriptor$2;
  var toIndexedObject$3 = toIndexedObject$4;
  var toPropertyKey$1 = toPropertyKey$2;
  var hasOwn$5 = hasOwnProperty_1;
  var IE8_DOM_DEFINE$1 = ie8DomDefine;
  var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
  objectGetOwnPropertyDescriptor.f = DESCRIPTORS$6 ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O2, P) {
    O2 = toIndexedObject$3(O2);
    P = toPropertyKey$1(P);
    if (IE8_DOM_DEFINE$1) try {
      return $getOwnPropertyDescriptor$1(O2, P);
    } catch (error) {
    }
    if (hasOwn$5(O2, P)) return createPropertyDescriptor$1(!call2(propertyIsEnumerableModule.f, O2, P), O2[P]);
  };
  var objectDefineProperty = {};
  var DESCRIPTORS$5 = descriptors;
  var fails$3 = fails$9;
  var v8PrototypeDefineBug = DESCRIPTORS$5 && fails$3(function() {
    return Object.defineProperty(function() {
    }, "prototype", {
      value: 42,
      writable: false
    }).prototype != 42;
  });
  var isObject$2 = isObject$6;
  var $String = String;
  var $TypeError$1 = TypeError;
  var anObject$4 = function(argument) {
    if (isObject$2(argument)) return argument;
    throw $TypeError$1($String(argument) + " is not an object");
  };
  var DESCRIPTORS$4 = descriptors;
  var IE8_DOM_DEFINE = ie8DomDefine;
  var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
  var anObject$3 = anObject$4;
  var toPropertyKey2 = toPropertyKey$2;
  var $TypeError = TypeError;
  var $defineProperty = Object.defineProperty;
  var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var ENUMERABLE = "enumerable";
  var CONFIGURABLE$1 = "configurable";
  var WRITABLE = "writable";
  objectDefineProperty.f = DESCRIPTORS$4 ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O2, P, Attributes) {
    anObject$3(O2);
    P = toPropertyKey2(P);
    anObject$3(Attributes);
    if (typeof O2 === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
      var current2 = $getOwnPropertyDescriptor(O2, P);
      if (current2 && current2[WRITABLE]) {
        O2[P] = Attributes.value;
        Attributes = {
          configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current2[CONFIGURABLE$1],
          enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current2[ENUMERABLE],
          writable: false
        };
      }
    }
    return $defineProperty(O2, P, Attributes);
  } : $defineProperty : function defineProperty2(O2, P, Attributes) {
    anObject$3(O2);
    P = toPropertyKey2(P);
    anObject$3(Attributes);
    if (IE8_DOM_DEFINE) try {
      return $defineProperty(O2, P, Attributes);
    } catch (error) {
    }
    if ("get" in Attributes || "set" in Attributes) throw $TypeError("Accessors not supported");
    if ("value" in Attributes) O2[P] = Attributes.value;
    return O2;
  };
  var DESCRIPTORS$3 = descriptors;
  var definePropertyModule$3 = objectDefineProperty;
  var createPropertyDescriptor = createPropertyDescriptor$2;
  var createNonEnumerableProperty$2 = DESCRIPTORS$3 ? function(object3, key, value) {
    return definePropertyModule$3.f(object3, key, createPropertyDescriptor(1, value));
  } : function(object3, key, value) {
    object3[key] = value;
    return object3;
  };
  var makeBuiltIn$2 = { exports: {} };
  var DESCRIPTORS$2 = descriptors;
  var hasOwn$4 = hasOwnProperty_1;
  var FunctionPrototype = Function.prototype;
  var getDescriptor = DESCRIPTORS$2 && Object.getOwnPropertyDescriptor;
  var EXISTS = hasOwn$4(FunctionPrototype, "name");
  var PROPER = EXISTS && function something() {
  }.name === "something";
  var CONFIGURABLE = EXISTS && (!DESCRIPTORS$2 || DESCRIPTORS$2 && getDescriptor(FunctionPrototype, "name").configurable);
  var functionName = {
    EXISTS,
    PROPER,
    CONFIGURABLE
  };
  var uncurryThis$5 = functionUncurryThis;
  var isCallable$6 = isCallable$c;
  var store$1 = sharedStore;
  var functionToString = uncurryThis$5(Function.toString);
  if (!isCallable$6(store$1.inspectSource)) {
    store$1.inspectSource = function(it) {
      return functionToString(it);
    };
  }
  var inspectSource$2 = store$1.inspectSource;
  var global$3 = global$a;
  var isCallable$5 = isCallable$c;
  var WeakMap$1 = global$3.WeakMap;
  var weakMapBasicDetection = isCallable$5(WeakMap$1) && /native code/.test(String(WeakMap$1));
  var shared$1 = shared$3.exports;
  var uid = uid$2;
  var keys = shared$1("keys");
  var sharedKey$2 = function(key) {
    return keys[key] || (keys[key] = uid(key));
  };
  var hiddenKeys$4 = {};
  var NATIVE_WEAK_MAP = weakMapBasicDetection;
  var global$2 = global$a;
  var isObject$1 = isObject$6;
  var createNonEnumerableProperty$1 = createNonEnumerableProperty$2;
  var hasOwn$3 = hasOwnProperty_1;
  var shared = sharedStore;
  var sharedKey$1 = sharedKey$2;
  var hiddenKeys$3 = hiddenKeys$4;
  var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
  var TypeError$1 = global$2.TypeError;
  var WeakMap2 = global$2.WeakMap;
  var set;
  var get;
  var has;
  var enforce = function(it) {
    return has(it) ? get(it) : set(it, {});
  };
  var getterFor = function(TYPE) {
    return function(it) {
      var state;
      if (!isObject$1(it) || (state = get(it)).type !== TYPE) {
        throw TypeError$1("Incompatible receiver, " + TYPE + " required");
      }
      return state;
    };
  };
  if (NATIVE_WEAK_MAP || shared.state) {
    store = shared.state || (shared.state = new WeakMap2());
    store.get = store.get;
    store.has = store.has;
    store.set = store.set;
    set = function(it, metadata) {
      if (store.has(it)) throw TypeError$1(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      store.set(it, metadata);
      return metadata;
    };
    get = function(it) {
      return store.get(it) || {};
    };
    has = function(it) {
      return store.has(it);
    };
  } else {
    STATE = sharedKey$1("state");
    hiddenKeys$3[STATE] = true;
    set = function(it, metadata) {
      if (hasOwn$3(it, STATE)) throw TypeError$1(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      createNonEnumerableProperty$1(it, STATE, metadata);
      return metadata;
    };
    get = function(it) {
      return hasOwn$3(it, STATE) ? it[STATE] : {};
    };
    has = function(it) {
      return hasOwn$3(it, STATE);
    };
  }
  var store;
  var STATE;
  var internalState = {
    set,
    get,
    has,
    enforce,
    getterFor
  };
  var fails$2 = fails$9;
  var isCallable$4 = isCallable$c;
  var hasOwn$2 = hasOwnProperty_1;
  var DESCRIPTORS$1 = descriptors;
  var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
  var inspectSource$1 = inspectSource$2;
  var InternalStateModule = internalState;
  var enforceInternalState = InternalStateModule.enforce;
  var getInternalState = InternalStateModule.get;
  var defineProperty$1 = Object.defineProperty;
  var CONFIGURABLE_LENGTH = DESCRIPTORS$1 && !fails$2(function() {
    return defineProperty$1(function() {
    }, "length", { value: 8 }).length !== 8;
  });
  var TEMPLATE = String(String).split("String");
  var makeBuiltIn$1 = makeBuiltIn$2.exports = function(value, name, options) {
    if (String(name).slice(0, 7) === "Symbol(") {
      name = "[" + String(name).replace(/^Symbol\(([^)]*)\)/, "$1") + "]";
    }
    if (options && options.getter) name = "get " + name;
    if (options && options.setter) name = "set " + name;
    if (!hasOwn$2(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
      if (DESCRIPTORS$1) defineProperty$1(value, "name", { value: name, configurable: true });
      else value.name = name;
    }
    if (CONFIGURABLE_LENGTH && options && hasOwn$2(options, "arity") && value.length !== options.arity) {
      defineProperty$1(value, "length", { value: options.arity });
    }
    try {
      if (options && hasOwn$2(options, "constructor") && options.constructor) {
        if (DESCRIPTORS$1) defineProperty$1(value, "prototype", { writable: false });
      } else if (value.prototype) value.prototype = void 0;
    } catch (error) {
    }
    var state = enforceInternalState(value);
    if (!hasOwn$2(state, "source")) {
      state.source = TEMPLATE.join(typeof name == "string" ? name : "");
    }
    return value;
  };
  Function.prototype.toString = makeBuiltIn$1(function toString4() {
    return isCallable$4(this) && getInternalState(this).source || inspectSource$1(this);
  }, "toString");
  var isCallable$3 = isCallable$c;
  var definePropertyModule$2 = objectDefineProperty;
  var makeBuiltIn = makeBuiltIn$2.exports;
  var defineGlobalProperty$1 = defineGlobalProperty$3;
  var defineBuiltIn$1 = function(O2, key, value, options) {
    if (!options) options = {};
    var simple = options.enumerable;
    var name = options.name !== void 0 ? options.name : key;
    if (isCallable$3(value)) makeBuiltIn(value, name, options);
    if (options.global) {
      if (simple) O2[key] = value;
      else defineGlobalProperty$1(key, value);
    } else {
      try {
        if (!options.unsafe) delete O2[key];
        else if (O2[key]) simple = true;
      } catch (error) {
      }
      if (simple) O2[key] = value;
      else definePropertyModule$2.f(O2, key, {
        value,
        enumerable: false,
        configurable: !options.nonConfigurable,
        writable: !options.nonWritable
      });
    }
    return O2;
  };
  var objectGetOwnPropertyNames = {};
  var ceil = Math.ceil;
  var floor = Math.floor;
  var mathTrunc = Math.trunc || function trunc(x2) {
    var n2 = +x2;
    return (n2 > 0 ? floor : ceil)(n2);
  };
  var trunc2 = mathTrunc;
  var toIntegerOrInfinity$2 = function(argument) {
    var number = +argument;
    return number !== number || number === 0 ? 0 : trunc2(number);
  };
  var toIntegerOrInfinity$1 = toIntegerOrInfinity$2;
  var max = Math.max;
  var min$1 = Math.min;
  var toAbsoluteIndex$1 = function(index, length) {
    var integer = toIntegerOrInfinity$1(index);
    return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
  };
  var toIntegerOrInfinity = toIntegerOrInfinity$2;
  var min = Math.min;
  var toLength$1 = function(argument) {
    return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
  };
  var toLength = toLength$1;
  var lengthOfArrayLike$2 = function(obj) {
    return toLength(obj.length);
  };
  var toIndexedObject$2 = toIndexedObject$4;
  var toAbsoluteIndex = toAbsoluteIndex$1;
  var lengthOfArrayLike$1 = lengthOfArrayLike$2;
  var createMethod$1 = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
      var O2 = toIndexedObject$2($this);
      var length = lengthOfArrayLike$1(O2);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O2[index++];
        if (value != value) return true;
      }
      else for (; length > index; index++) {
        if ((IS_INCLUDES || index in O2) && O2[index] === el) return IS_INCLUDES || index || 0;
      }
      return !IS_INCLUDES && -1;
    };
  };
  var arrayIncludes = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: createMethod$1(true),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod$1(false)
  };
  var uncurryThis$4 = functionUncurryThis;
  var hasOwn$1 = hasOwnProperty_1;
  var toIndexedObject$1 = toIndexedObject$4;
  var indexOf = arrayIncludes.indexOf;
  var hiddenKeys$2 = hiddenKeys$4;
  var push$1 = uncurryThis$4([].push);
  var objectKeysInternal = function(object3, names) {
    var O2 = toIndexedObject$1(object3);
    var i2 = 0;
    var result = [];
    var key;
    for (key in O2) !hasOwn$1(hiddenKeys$2, key) && hasOwn$1(O2, key) && push$1(result, key);
    while (names.length > i2) if (hasOwn$1(O2, key = names[i2++])) {
      ~indexOf(result, key) || push$1(result, key);
    }
    return result;
  };
  var enumBugKeys$3 = [
    "constructor",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf"
  ];
  var internalObjectKeys$1 = objectKeysInternal;
  var enumBugKeys$2 = enumBugKeys$3;
  var hiddenKeys$1 = enumBugKeys$2.concat("length", "prototype");
  objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O2) {
    return internalObjectKeys$1(O2, hiddenKeys$1);
  };
  var objectGetOwnPropertySymbols = {};
  objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;
  var getBuiltIn$2 = getBuiltIn$5;
  var uncurryThis$3 = functionUncurryThis;
  var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
  var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
  var anObject$2 = anObject$4;
  var concat = uncurryThis$3([].concat);
  var ownKeys$1 = getBuiltIn$2("Reflect", "ownKeys") || function ownKeys2(it) {
    var keys3 = getOwnPropertyNamesModule.f(anObject$2(it));
    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return getOwnPropertySymbols ? concat(keys3, getOwnPropertySymbols(it)) : keys3;
  };
  var hasOwn2 = hasOwnProperty_1;
  var ownKeys3 = ownKeys$1;
  var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
  var definePropertyModule$1 = objectDefineProperty;
  var copyConstructorProperties$1 = function(target, source, exceptions) {
    var keys3 = ownKeys3(source);
    var defineProperty4 = definePropertyModule$1.f;
    var getOwnPropertyDescriptor3 = getOwnPropertyDescriptorModule.f;
    for (var i2 = 0; i2 < keys3.length; i2++) {
      var key = keys3[i2];
      if (!hasOwn2(target, key) && !(exceptions && hasOwn2(exceptions, key))) {
        defineProperty4(target, key, getOwnPropertyDescriptor3(source, key));
      }
    }
  };
  var fails$1 = fails$9;
  var isCallable$2 = isCallable$c;
  var replacement = /#|\.prototype\./;
  var isForced$1 = function(feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL ? true : value == NATIVE ? false : isCallable$2(detection) ? fails$1(detection) : !!detection;
  };
  var normalize = isForced$1.normalize = function(string5) {
    return String(string5).replace(replacement, ".").toLowerCase();
  };
  var data = isForced$1.data = {};
  var NATIVE = isForced$1.NATIVE = "N";
  var POLYFILL = isForced$1.POLYFILL = "P";
  var isForced_1 = isForced$1;
  var global$1 = global$a;
  var getOwnPropertyDescriptor2 = objectGetOwnPropertyDescriptor.f;
  var createNonEnumerableProperty = createNonEnumerableProperty$2;
  var defineBuiltIn = defineBuiltIn$1;
  var defineGlobalProperty = defineGlobalProperty$3;
  var copyConstructorProperties = copyConstructorProperties$1;
  var isForced = isForced_1;
  var _export = function(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
    if (GLOBAL) {
      target = global$1;
    } else if (STATIC) {
      target = global$1[TARGET] || defineGlobalProperty(TARGET, {});
    } else {
      target = (global$1[TARGET] || {}).prototype;
    }
    if (target) for (key in source) {
      sourceProperty = source[key];
      if (options.dontCallGetSet) {
        descriptor = getOwnPropertyDescriptor2(target, key);
        targetProperty = descriptor && descriptor.value;
      } else targetProperty = target[key];
      FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
      if (!FORCED && targetProperty !== void 0) {
        if (typeof sourceProperty == typeof targetProperty) continue;
        copyConstructorProperties(sourceProperty, targetProperty);
      }
      if (options.sham || targetProperty && targetProperty.sham) {
        createNonEnumerableProperty(sourceProperty, "sham", true);
      }
      defineBuiltIn(target, key, sourceProperty, options);
    }
  };
  var uncurryThis$2 = functionUncurryThis;
  var aCallable = aCallable$2;
  var NATIVE_BIND = functionBindNative;
  var bind$1 = uncurryThis$2(uncurryThis$2.bind);
  var functionBindContext = function(fn, that) {
    aCallable(fn);
    return that === void 0 ? fn : NATIVE_BIND ? bind$1(fn, that) : function() {
      return fn.apply(that, arguments);
    };
  };
  var classof$2 = classofRaw$2;
  var isArray$1 = Array.isArray || function isArray(argument) {
    return classof$2(argument) == "Array";
  };
  var wellKnownSymbol$3 = wellKnownSymbol$5;
  var TO_STRING_TAG$1 = wellKnownSymbol$3("toStringTag");
  var test = {};
  test[TO_STRING_TAG$1] = "z";
  var toStringTagSupport = String(test) === "[object z]";
  var TO_STRING_TAG_SUPPORT = toStringTagSupport;
  var isCallable$1 = isCallable$c;
  var classofRaw = classofRaw$2;
  var wellKnownSymbol$2 = wellKnownSymbol$5;
  var TO_STRING_TAG = wellKnownSymbol$2("toStringTag");
  var $Object = Object;
  var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
    return arguments;
  }()) == "Arguments";
  var tryGet = function(it, key) {
    try {
      return it[key];
    } catch (error) {
    }
  };
  var classof$1 = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
    var O2, tag, result;
    return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O2 = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O2) : (result = classofRaw(O2)) == "Object" && isCallable$1(O2.callee) ? "Arguments" : result;
  };
  var uncurryThis$1 = functionUncurryThis;
  var fails = fails$9;
  var isCallable = isCallable$c;
  var classof = classof$1;
  var getBuiltIn$1 = getBuiltIn$5;
  var inspectSource = inspectSource$2;
  var noop4 = function() {
  };
  var empty = [];
  var construct = getBuiltIn$1("Reflect", "construct");
  var constructorRegExp = /^\s*(?:class|function)\b/;
  var exec2 = uncurryThis$1(constructorRegExp.exec);
  var INCORRECT_TO_STRING = !constructorRegExp.exec(noop4);
  var isConstructorModern = function isConstructor(argument) {
    if (!isCallable(argument)) return false;
    try {
      construct(noop4, empty, argument);
      return true;
    } catch (error) {
      return false;
    }
  };
  var isConstructorLegacy = function isConstructor2(argument) {
    if (!isCallable(argument)) return false;
    switch (classof(argument)) {
      case "AsyncFunction":
      case "GeneratorFunction":
      case "AsyncGeneratorFunction":
        return false;
    }
    try {
      return INCORRECT_TO_STRING || !!exec2(constructorRegExp, inspectSource(argument));
    } catch (error) {
      return true;
    }
  };
  isConstructorLegacy.sham = true;
  var isConstructor$1 = !construct || fails(function() {
    var called;
    return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
      called = true;
    }) || called;
  }) ? isConstructorLegacy : isConstructorModern;
  var isArray2 = isArray$1;
  var isConstructor3 = isConstructor$1;
  var isObject = isObject$6;
  var wellKnownSymbol$1 = wellKnownSymbol$5;
  var SPECIES = wellKnownSymbol$1("species");
  var $Array = Array;
  var arraySpeciesConstructor$1 = function(originalArray) {
    var C2;
    if (isArray2(originalArray)) {
      C2 = originalArray.constructor;
      if (isConstructor3(C2) && (C2 === $Array || isArray2(C2.prototype))) C2 = void 0;
      else if (isObject(C2)) {
        C2 = C2[SPECIES];
        if (C2 === null) C2 = void 0;
      }
    }
    return C2 === void 0 ? $Array : C2;
  };
  var arraySpeciesConstructor = arraySpeciesConstructor$1;
  var arraySpeciesCreate$1 = function(originalArray, length) {
    return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
  };
  var bind2 = functionBindContext;
  var uncurryThis = functionUncurryThis;
  var IndexedObject = indexedObject;
  var toObject = toObject$2;
  var lengthOfArrayLike = lengthOfArrayLike$2;
  var arraySpeciesCreate = arraySpeciesCreate$1;
  var push = uncurryThis([].push);
  var createMethod = function(TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var IS_FILTER_REJECT = TYPE == 7;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function($this, callbackfn, that, specificCreate) {
      var O2 = toObject($this);
      var self2 = IndexedObject(O2);
      var boundFunction = bind2(callbackfn, that);
      var length = lengthOfArrayLike(self2);
      var index = 0;
      var create4 = specificCreate || arraySpeciesCreate;
      var target = IS_MAP ? create4($this, length) : IS_FILTER || IS_FILTER_REJECT ? create4($this, 0) : void 0;
      var value, result;
      for (; length > index; index++) if (NO_HOLES || index in self2) {
        value = self2[index];
        result = boundFunction(value, index, O2);
        if (TYPE) {
          if (IS_MAP) target[index] = result;
          else if (result) switch (TYPE) {
            case 3:
              return true;
            // some
            case 5:
              return value;
            // find
            case 6:
              return index;
            // findIndex
            case 2:
              push(target, value);
          }
          else switch (TYPE) {
            case 4:
              return false;
            // every
            case 7:
              push(target, value);
          }
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };
  var arrayIteration = {
    // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    forEach: createMethod(0),
    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    map: createMethod(1),
    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    filter: createMethod(2),
    // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    some: createMethod(3),
    // `Array.prototype.every` method
    // https://tc39.es/ecma262/#sec-array.prototype.every
    every: createMethod(4),
    // `Array.prototype.find` method
    // https://tc39.es/ecma262/#sec-array.prototype.find
    find: createMethod(5),
    // `Array.prototype.findIndex` method
    // https://tc39.es/ecma262/#sec-array.prototype.findIndex
    findIndex: createMethod(6),
    // `Array.prototype.filterReject` method
    // https://github.com/tc39/proposal-array-filtering
    filterReject: createMethod(7)
  };
  var objectDefineProperties = {};
  var internalObjectKeys = objectKeysInternal;
  var enumBugKeys$1 = enumBugKeys$3;
  var objectKeys$1 = Object.keys || function keys2(O2) {
    return internalObjectKeys(O2, enumBugKeys$1);
  };
  var DESCRIPTORS = descriptors;
  var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
  var definePropertyModule = objectDefineProperty;
  var anObject$1 = anObject$4;
  var toIndexedObject = toIndexedObject$4;
  var objectKeys = objectKeys$1;
  objectDefineProperties.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O2, Properties) {
    anObject$1(O2);
    var props = toIndexedObject(Properties);
    var keys3 = objectKeys(Properties);
    var length = keys3.length;
    var index = 0;
    var key;
    while (length > index) definePropertyModule.f(O2, key = keys3[index++], props[key]);
    return O2;
  };
  var getBuiltIn = getBuiltIn$5;
  var html$1 = getBuiltIn("document", "documentElement");
  var anObject = anObject$4;
  var definePropertiesModule = objectDefineProperties;
  var enumBugKeys = enumBugKeys$3;
  var hiddenKeys = hiddenKeys$4;
  var html = html$1;
  var documentCreateElement = documentCreateElement$1;
  var sharedKey = sharedKey$2;
  var GT = ">";
  var LT = "<";
  var PROTOTYPE = "prototype";
  var SCRIPT = "script";
  var IE_PROTO = sharedKey("IE_PROTO");
  var EmptyConstructor = function() {
  };
  var scriptTag = function(content) {
    return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
  };
  var NullProtoObjectViaActiveX = function(activeXDocument2) {
    activeXDocument2.write(scriptTag(""));
    activeXDocument2.close();
    var temp = activeXDocument2.parentWindow.Object;
    activeXDocument2 = null;
    return temp;
  };
  var NullProtoObjectViaIFrame = function() {
    var iframe = documentCreateElement("iframe");
    var JS = "java" + SCRIPT + ":";
    var iframeDocument;
    iframe.style.display = "none";
    html.appendChild(iframe);
    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag("document.F=Object"));
    iframeDocument.close();
    return iframeDocument.F;
  };
  var activeXDocument;
  var NullProtoObject = function() {
    try {
      activeXDocument = new ActiveXObject("htmlfile");
    } catch (error) {
    }
    NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
    var length = enumBugKeys.length;
    while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
    return NullProtoObject();
  };
  hiddenKeys[IE_PROTO] = true;
  var objectCreate = Object.create || function create2(O2, Properties) {
    var result;
    if (O2 !== null) {
      EmptyConstructor[PROTOTYPE] = anObject(O2);
      result = new EmptyConstructor();
      EmptyConstructor[PROTOTYPE] = null;
      result[IE_PROTO] = O2;
    } else result = NullProtoObject();
    return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
  };
  var wellKnownSymbol = wellKnownSymbol$5;
  var create3 = objectCreate;
  var defineProperty3 = objectDefineProperty.f;
  var UNSCOPABLES = wellKnownSymbol("unscopables");
  var ArrayPrototype = Array.prototype;
  if (ArrayPrototype[UNSCOPABLES] == void 0) {
    defineProperty3(ArrayPrototype, UNSCOPABLES, {
      configurable: true,
      value: create3(null)
    });
  }
  var addToUnscopables$1 = function(key) {
    ArrayPrototype[UNSCOPABLES][key] = true;
  };
  var $2 = _export;
  var $find = arrayIteration.find;
  var addToUnscopables = addToUnscopables$1;
  var FIND = "find";
  var SKIPS_HOLES = true;
  if (FIND in []) Array(1)[FIND](function() {
    SKIPS_HOLES = false;
  });
  $2({ target: "Array", proto: true, forced: SKIPS_HOLES }, {
    find: function find(callbackfn) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  addToUnscopables(FIND);
  var CONSTANT = {
    GLOBAL: {
      HIDE: "__react_tooltip_hide_event",
      REBUILD: "__react_tooltip_rebuild_event",
      SHOW: "__react_tooltip_show_event"
    }
  };
  var dispatchGlobalEvent = function dispatchGlobalEvent2(eventName, opts) {
    var event;
    if (typeof window.CustomEvent === "function") {
      event = new window.CustomEvent(eventName, {
        detail: opts
      });
    } else {
      event = document.createEvent("Event");
      event.initEvent(eventName, false, true, opts);
    }
    window.dispatchEvent(event);
  };
  function staticMethods(target) {
    target.hide = function(target2) {
      dispatchGlobalEvent(CONSTANT.GLOBAL.HIDE, {
        target: target2
      });
    };
    target.rebuild = function() {
      dispatchGlobalEvent(CONSTANT.GLOBAL.REBUILD);
    };
    target.show = function(target2) {
      dispatchGlobalEvent(CONSTANT.GLOBAL.SHOW, {
        target: target2
      });
    };
    target.prototype.globalRebuild = function() {
      if (this.mount) {
        this.unbindListener();
        this.bindListener();
      }
    };
    target.prototype.globalShow = function(event) {
      if (this.mount) {
        var hasTarget = event && event.detail && event.detail.target && true || false;
        this.showTooltip({
          currentTarget: hasTarget && event.detail.target
        }, true);
      }
    };
    target.prototype.globalHide = function(event) {
      if (this.mount) {
        var hasTarget = event && event.detail && event.detail.target && true || false;
        this.hideTooltip({
          currentTarget: hasTarget && event.detail.target
        }, hasTarget);
      }
    };
  }
  function windowListener(target) {
    target.prototype.bindWindowEvents = function(resizeHide) {
      window.removeEventListener(CONSTANT.GLOBAL.HIDE, this.globalHide);
      window.addEventListener(CONSTANT.GLOBAL.HIDE, this.globalHide, false);
      window.removeEventListener(CONSTANT.GLOBAL.REBUILD, this.globalRebuild);
      window.addEventListener(CONSTANT.GLOBAL.REBUILD, this.globalRebuild, false);
      window.removeEventListener(CONSTANT.GLOBAL.SHOW, this.globalShow);
      window.addEventListener(CONSTANT.GLOBAL.SHOW, this.globalShow, false);
      if (resizeHide) {
        window.removeEventListener("resize", this.onWindowResize);
        window.addEventListener("resize", this.onWindowResize, false);
      }
    };
    target.prototype.unbindWindowEvents = function() {
      window.removeEventListener(CONSTANT.GLOBAL.HIDE, this.globalHide);
      window.removeEventListener(CONSTANT.GLOBAL.REBUILD, this.globalRebuild);
      window.removeEventListener(CONSTANT.GLOBAL.SHOW, this.globalShow);
      window.removeEventListener("resize", this.onWindowResize);
    };
    target.prototype.onWindowResize = function() {
      if (!this.mount) return;
      this.hideTooltip();
    };
  }
  var checkStatus = function checkStatus2(dataEventOff, e2) {
    var show = this.state.show;
    var id2 = this.props.id;
    var isCapture2 = this.isCapture(e2.currentTarget);
    var currentItem = e2.currentTarget.getAttribute("currentItem");
    if (!isCapture2) e2.stopPropagation();
    if (show && currentItem === "true") {
      if (!dataEventOff) this.hideTooltip(e2);
    } else {
      e2.currentTarget.setAttribute("currentItem", "true");
      setUntargetItems(e2.currentTarget, this.getTargetArray(id2));
      this.showTooltip(e2);
    }
  };
  var setUntargetItems = function setUntargetItems2(currentTarget, targetArray) {
    for (var i2 = 0; i2 < targetArray.length; i2++) {
      if (currentTarget !== targetArray[i2]) {
        targetArray[i2].setAttribute("currentItem", "false");
      } else {
        targetArray[i2].setAttribute("currentItem", "true");
      }
    }
  };
  var customListeners = {
    id: "9b69f92e-d3fe-498b-b1b4-c5e63a51b0cf",
    set: function set2(target, event, listener) {
      if (this.id in target) {
        var map2 = target[this.id];
        map2[event] = listener;
      } else {
        Object.defineProperty(target, this.id, {
          configurable: true,
          value: _defineProperty2({}, event, listener)
        });
      }
    },
    get: function get2(target, event) {
      var map2 = target[this.id];
      if (map2 !== void 0) {
        return map2[event];
      }
    }
  };
  function customEvent(target) {
    target.prototype.isCustomEvent = function(ele) {
      var event = this.state.event;
      return event || !!ele.getAttribute("data-event");
    };
    target.prototype.customBindListener = function(ele) {
      var _this = this;
      var _this$state = this.state, event = _this$state.event, eventOff = _this$state.eventOff;
      var dataEvent = ele.getAttribute("data-event") || event;
      var dataEventOff = ele.getAttribute("data-event-off") || eventOff;
      dataEvent.split(" ").forEach(function(event2) {
        ele.removeEventListener(event2, customListeners.get(ele, event2));
        var customListener = checkStatus.bind(_this, dataEventOff);
        customListeners.set(ele, event2, customListener);
        ele.addEventListener(event2, customListener, false);
      });
      if (dataEventOff) {
        dataEventOff.split(" ").forEach(function(event2) {
          ele.removeEventListener(event2, _this.hideTooltip);
          ele.addEventListener(event2, _this.hideTooltip, false);
        });
      }
    };
    target.prototype.customUnbindListener = function(ele) {
      var _this$state2 = this.state, event = _this$state2.event, eventOff = _this$state2.eventOff;
      var dataEvent = event || ele.getAttribute("data-event");
      var dataEventOff = eventOff || ele.getAttribute("data-event-off");
      ele.removeEventListener(dataEvent, customListeners.get(ele, event));
      if (dataEventOff) ele.removeEventListener(dataEventOff, this.hideTooltip);
    };
  }
  function isCapture(target) {
    target.prototype.isCapture = function(currentTarget) {
      return currentTarget && currentTarget.getAttribute("data-iscapture") === "true" || this.props.isCapture || false;
    };
  }
  function getEffect(target) {
    target.prototype.getEffect = function(currentTarget) {
      var dataEffect = currentTarget.getAttribute("data-effect");
      return dataEffect || this.props.effect || "float";
    };
  }
  var makeProxy = function makeProxy2(e2) {
    var proxy = {};
    for (var key in e2) {
      if (typeof e2[key] === "function") {
        proxy[key] = e2[key].bind(e2);
      } else {
        proxy[key] = e2[key];
      }
    }
    return proxy;
  };
  var bodyListener = function bodyListener2(callback, options, e2) {
    var _options$respectEffec = options.respectEffect, respectEffect = _options$respectEffec === void 0 ? false : _options$respectEffec, _options$customEvent = options.customEvent, customEvent2 = _options$customEvent === void 0 ? false : _options$customEvent;
    var id2 = this.props.id;
    var tip = null;
    var forId;
    var target = e2.target;
    var lastTarget;
    while (tip === null && target !== null) {
      lastTarget = target;
      tip = target.getAttribute("data-tip") || null;
      forId = target.getAttribute("data-for") || null;
      target = target.parentElement;
    }
    target = lastTarget || e2.target;
    if (this.isCustomEvent(target) && !customEvent2) {
      return;
    }
    var isTargetBelongsToTooltip = id2 == null && forId == null || forId === id2;
    if (tip != null && (!respectEffect || this.getEffect(target) === "float") && isTargetBelongsToTooltip) {
      var proxy = makeProxy(e2);
      proxy.currentTarget = target;
      callback(proxy);
    }
  };
  var findCustomEvents = function findCustomEvents2(targetArray, dataAttribute) {
    var events = {};
    targetArray.forEach(function(target) {
      var event = target.getAttribute(dataAttribute);
      if (event) event.split(" ").forEach(function(event2) {
        return events[event2] = true;
      });
    });
    return events;
  };
  var getBody = function getBody2() {
    return document.getElementsByTagName("body")[0];
  };
  function bodyMode(target) {
    target.prototype.isBodyMode = function() {
      return !!this.props.bodyMode;
    };
    target.prototype.bindBodyListener = function(targetArray) {
      var _this = this;
      var _this$state = this.state, event = _this$state.event, eventOff = _this$state.eventOff, possibleCustomEvents = _this$state.possibleCustomEvents, possibleCustomEventsOff = _this$state.possibleCustomEventsOff;
      var body = getBody();
      var customEvents = findCustomEvents(targetArray, "data-event");
      var customEventsOff = findCustomEvents(targetArray, "data-event-off");
      if (event != null) customEvents[event] = true;
      if (eventOff != null) customEventsOff[eventOff] = true;
      possibleCustomEvents.split(" ").forEach(function(event2) {
        return customEvents[event2] = true;
      });
      possibleCustomEventsOff.split(" ").forEach(function(event2) {
        return customEventsOff[event2] = true;
      });
      this.unbindBodyListener(body);
      var listeners = this.bodyModeListeners = {};
      if (event == null) {
        listeners.mouseover = bodyListener.bind(this, this.showTooltip, {});
        listeners.mousemove = bodyListener.bind(this, this.updateTooltip, {
          respectEffect: true
        });
        listeners.mouseout = bodyListener.bind(this, this.hideTooltip, {});
      }
      for (var _event in customEvents) {
        listeners[_event] = bodyListener.bind(this, function(e2) {
          var targetEventOff = e2.currentTarget.getAttribute("data-event-off") || eventOff;
          checkStatus.call(_this, targetEventOff, e2);
        }, {
          customEvent: true
        });
      }
      for (var _event2 in customEventsOff) {
        listeners[_event2] = bodyListener.bind(this, this.hideTooltip, {
          customEvent: true
        });
      }
      for (var _event3 in listeners) {
        body.addEventListener(_event3, listeners[_event3]);
      }
    };
    target.prototype.unbindBodyListener = function(body) {
      body = body || getBody();
      var listeners = this.bodyModeListeners;
      for (var event in listeners) {
        body.removeEventListener(event, listeners[event]);
      }
    };
  }
  var getMutationObserverClass = function getMutationObserverClass2() {
    return window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
  };
  function trackRemoval(target) {
    target.prototype.bindRemovalTracker = function() {
      var _this = this;
      var MutationObserver = getMutationObserverClass();
      if (MutationObserver == null) return;
      var observer = new MutationObserver(function(mutations) {
        for (var m1 = 0; m1 < mutations.length; m1++) {
          var mutation = mutations[m1];
          for (var m2 = 0; m2 < mutation.removedNodes.length; m2++) {
            var element = mutation.removedNodes[m2];
            if (element === _this.state.currentTarget) {
              _this.hideTooltip();
              return;
            }
          }
        }
      });
      observer.observe(window.document, {
        childList: true,
        subtree: true
      });
      this.removalTracker = observer;
    };
    target.prototype.unbindRemovalTracker = function() {
      if (this.removalTracker) {
        this.removalTracker.disconnect();
        this.removalTracker = null;
      }
    };
  }
  function getPosition(e2, target, node, place, desiredPlace, effect3, offset) {
    var _getDimensions = getDimensions(node), tipWidth = _getDimensions.width, tipHeight = _getDimensions.height;
    var _getDimensions2 = getDimensions(target), targetWidth = _getDimensions2.width, targetHeight = _getDimensions2.height;
    var _getCurrentOffset = getCurrentOffset(e2, target, effect3), mouseX = _getCurrentOffset.mouseX, mouseY = _getCurrentOffset.mouseY;
    var defaultOffset = getDefaultPosition(effect3, targetWidth, targetHeight, tipWidth, tipHeight);
    var _calculateOffset = calculateOffset(offset), extraOffsetX = _calculateOffset.extraOffsetX, extraOffsetY = _calculateOffset.extraOffsetY;
    var windowWidth = window.innerWidth;
    var windowHeight = window.innerHeight;
    var _getParent = getParent(node), parentTop = _getParent.parentTop, parentLeft = _getParent.parentLeft;
    var getTipOffsetLeft = function getTipOffsetLeft2(place2) {
      var offsetX = defaultOffset[place2].l;
      return mouseX + offsetX + extraOffsetX;
    };
    var getTipOffsetRight = function getTipOffsetRight2(place2) {
      var offsetX = defaultOffset[place2].r;
      return mouseX + offsetX + extraOffsetX;
    };
    var getTipOffsetTop = function getTipOffsetTop2(place2) {
      var offsetY = defaultOffset[place2].t;
      return mouseY + offsetY + extraOffsetY;
    };
    var getTipOffsetBottom = function getTipOffsetBottom2(place2) {
      var offsetY = defaultOffset[place2].b;
      return mouseY + offsetY + extraOffsetY;
    };
    var outsideLeft = function outsideLeft2(p) {
      return getTipOffsetLeft(p) < 0;
    };
    var outsideRight = function outsideRight2(p) {
      return getTipOffsetRight(p) > windowWidth;
    };
    var outsideTop = function outsideTop2(p) {
      return getTipOffsetTop(p) < 0;
    };
    var outsideBottom = function outsideBottom2(p) {
      return getTipOffsetBottom(p) > windowHeight;
    };
    var outside = function outside2(p) {
      return outsideLeft(p) || outsideRight(p) || outsideTop(p) || outsideBottom(p);
    };
    var inside = function inside2(p) {
      return !outside(p);
    };
    var placeIsInside = {
      top: inside("top"),
      bottom: inside("bottom"),
      left: inside("left"),
      right: inside("right")
    };
    function choose() {
      var allPlaces = desiredPlace.split(",").concat(place, ["top", "bottom", "left", "right"]);
      var _iterator = _createForOfIteratorHelper(allPlaces), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var d2 = _step.value;
          if (placeIsInside[d2]) return d2;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return place;
    }
    var chosen = choose();
    var isNewState = false;
    var newPlace;
    if (chosen && chosen !== place) {
      isNewState = true;
      newPlace = chosen;
    }
    if (isNewState) {
      return {
        isNewState: true,
        newState: {
          place: newPlace
        }
      };
    }
    return {
      isNewState: false,
      position: {
        left: parseInt(getTipOffsetLeft(place) - parentLeft, 10),
        top: parseInt(getTipOffsetTop(place) - parentTop, 10)
      }
    };
  }
  var getDimensions = function getDimensions2(node) {
    var _node$getBoundingClie = node.getBoundingClientRect(), height = _node$getBoundingClie.height, width = _node$getBoundingClie.width;
    return {
      height: parseInt(height, 10),
      width: parseInt(width, 10)
    };
  };
  var getCurrentOffset = function getCurrentOffset2(e2, currentTarget, effect3) {
    var boundingClientRect = currentTarget.getBoundingClientRect();
    var targetTop = boundingClientRect.top;
    var targetLeft = boundingClientRect.left;
    var _getDimensions3 = getDimensions(currentTarget), targetWidth = _getDimensions3.width, targetHeight = _getDimensions3.height;
    if (effect3 === "float") {
      return {
        mouseX: e2.clientX,
        mouseY: e2.clientY
      };
    }
    return {
      mouseX: targetLeft + targetWidth / 2,
      mouseY: targetTop + targetHeight / 2
    };
  };
  var getDefaultPosition = function getDefaultPosition2(effect3, targetWidth, targetHeight, tipWidth, tipHeight) {
    var top;
    var right;
    var bottom;
    var left;
    var disToMouse = 3;
    var triangleHeight = 2;
    var cursorHeight = 12;
    if (effect3 === "float") {
      top = {
        l: -(tipWidth / 2),
        r: tipWidth / 2,
        t: -(tipHeight + disToMouse + triangleHeight),
        b: -disToMouse
      };
      bottom = {
        l: -(tipWidth / 2),
        r: tipWidth / 2,
        t: disToMouse + cursorHeight,
        b: tipHeight + disToMouse + triangleHeight + cursorHeight
      };
      left = {
        l: -(tipWidth + disToMouse + triangleHeight),
        r: -disToMouse,
        t: -(tipHeight / 2),
        b: tipHeight / 2
      };
      right = {
        l: disToMouse,
        r: tipWidth + disToMouse + triangleHeight,
        t: -(tipHeight / 2),
        b: tipHeight / 2
      };
    } else if (effect3 === "solid") {
      top = {
        l: -(tipWidth / 2),
        r: tipWidth / 2,
        t: -(targetHeight / 2 + tipHeight + triangleHeight),
        b: -(targetHeight / 2)
      };
      bottom = {
        l: -(tipWidth / 2),
        r: tipWidth / 2,
        t: targetHeight / 2,
        b: targetHeight / 2 + tipHeight + triangleHeight
      };
      left = {
        l: -(tipWidth + targetWidth / 2 + triangleHeight),
        r: -(targetWidth / 2),
        t: -(tipHeight / 2),
        b: tipHeight / 2
      };
      right = {
        l: targetWidth / 2,
        r: tipWidth + targetWidth / 2 + triangleHeight,
        t: -(tipHeight / 2),
        b: tipHeight / 2
      };
    }
    return {
      top,
      bottom,
      left,
      right
    };
  };
  var calculateOffset = function calculateOffset2(offset) {
    var extraOffsetX = 0;
    var extraOffsetY = 0;
    if (Object.prototype.toString.apply(offset) === "[object String]") {
      offset = JSON.parse(offset.toString().replace(/'/g, '"'));
    }
    for (var key in offset) {
      if (key === "top") {
        extraOffsetY -= parseInt(offset[key], 10);
      } else if (key === "bottom") {
        extraOffsetY += parseInt(offset[key], 10);
      } else if (key === "left") {
        extraOffsetX -= parseInt(offset[key], 10);
      } else if (key === "right") {
        extraOffsetX += parseInt(offset[key], 10);
      }
    }
    return {
      extraOffsetX,
      extraOffsetY
    };
  };
  var getParent = function getParent2(currentTarget) {
    var currentParent = currentTarget;
    while (currentParent) {
      var computedStyle = window.getComputedStyle(currentParent);
      if (computedStyle.getPropertyValue("transform") !== "none" || computedStyle.getPropertyValue("will-change") === "transform") break;
      currentParent = currentParent.parentElement;
    }
    var parentTop = currentParent && currentParent.getBoundingClientRect().top || 0;
    var parentLeft = currentParent && currentParent.getBoundingClientRect().left || 0;
    return {
      parentTop,
      parentLeft
    };
  };
  function TipContent(tip, children, getContent, multiline) {
    if (children) return children;
    if (getContent !== void 0 && getContent !== null) return getContent;
    if (getContent === null) return null;
    var regexp = /<br\s*\/?>/;
    if (!multiline || multiline === "false" || !regexp.test(tip)) {
      return tip;
    }
    return tip.split(regexp).map(function(d2, i2) {
      return /* @__PURE__ */ import_react191.default.createElement("span", {
        key: i2,
        className: "multi-line"
      }, d2);
    });
  }
  function parseAria(props) {
    var ariaObj = {};
    Object.keys(props).filter(function(prop) {
      return /(^aria-\w+$|^role$)/.test(prop);
    }).forEach(function(prop) {
      ariaObj[prop] = props[prop];
    });
    return ariaObj;
  }
  function nodeListToArray(nodeList) {
    var length = nodeList.length;
    if (nodeList.hasOwnProperty) {
      return Array.prototype.slice.call(nodeList);
    }
    return new Array(length).fill().map(function(index) {
      return nodeList[index];
    });
  }
  function generateUUID() {
    return "t" + v4_default2();
  }
  var baseCss = '.__react_component_tooltip {\n  border-radius: 3px;\n  display: inline-block;\n  font-size: 13px;\n  left: -999em;\n  opacity: 0;\n  position: fixed;\n  pointer-events: none;\n  transition: opacity 0.3s ease-out;\n  top: -999em;\n  visibility: hidden;\n  z-index: 999;\n}\n.__react_component_tooltip.allow_hover, .__react_component_tooltip.allow_click {\n  pointer-events: auto;\n}\n.__react_component_tooltip::before, .__react_component_tooltip::after {\n  content: "";\n  width: 0;\n  height: 0;\n  position: absolute;\n}\n.__react_component_tooltip.show {\n  opacity: 0.9;\n  margin-top: 0;\n  margin-left: 0;\n  visibility: visible;\n}\n.__react_component_tooltip.place-top::before {\n  bottom: 0;\n  left: 50%;\n  margin-left: -11px;\n}\n.__react_component_tooltip.place-bottom::before {\n  top: 0;\n  left: 50%;\n  margin-left: -11px;\n}\n.__react_component_tooltip.place-left::before {\n  right: 0;\n  top: 50%;\n  margin-top: -9px;\n}\n.__react_component_tooltip.place-right::before {\n  left: 0;\n  top: 50%;\n  margin-top: -9px;\n}\n.__react_component_tooltip .multi-line {\n  display: block;\n  padding: 2px 0;\n  text-align: center;\n}';
  var defaultColors = {
    dark: {
      text: "#fff",
      background: "#222",
      border: "transparent",
      arrow: "#222"
    },
    success: {
      text: "#fff",
      background: "#8DC572",
      border: "transparent",
      arrow: "#8DC572"
    },
    warning: {
      text: "#fff",
      background: "#F0AD4E",
      border: "transparent",
      arrow: "#F0AD4E"
    },
    error: {
      text: "#fff",
      background: "#BE6464",
      border: "transparent",
      arrow: "#BE6464"
    },
    info: {
      text: "#fff",
      background: "#337AB7",
      border: "transparent",
      arrow: "#337AB7"
    },
    light: {
      text: "#222",
      background: "#fff",
      border: "transparent",
      arrow: "#fff"
    }
  };
  function getDefaultPopupColors(type) {
    return defaultColors[type] ? _objectSpread22({}, defaultColors[type]) : void 0;
  }
  var DEFAULT_PADDING = "8px 21px";
  var DEFAULT_RADIUS = {
    tooltip: 3,
    arrow: 0
  };
  function generateTooltipStyle(uuid2, customColors, type, hasBorder, padding, radius) {
    return generateStyle(uuid2, getPopupColors(customColors, type, hasBorder), padding, radius);
  }
  function generateStyle(uuid2, colors2) {
    var padding = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : DEFAULT_PADDING;
    var radius = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_RADIUS;
    var textColor = colors2.text;
    var backgroundColor = colors2.background;
    var borderColor = colors2.border;
    var arrowColor = colors2.arrow;
    var arrowRadius = radius.arrow;
    var tooltipRadius = radius.tooltip;
    return "\n  	.".concat(uuid2, " {\n	    color: ").concat(textColor, ";\n	    background: ").concat(backgroundColor, ";\n	    border: 1px solid ").concat(borderColor, ";\n	    border-radius: ").concat(tooltipRadius, "px;\n	    padding: ").concat(padding, ";\n  	}\n\n  	.").concat(uuid2, ".place-top {\n        margin-top: -10px;\n    }\n    .").concat(uuid2, '.place-top::before {\n        content: "";\n        background-color: inherit;\n        position: absolute;\n        z-index: 2;\n        width: 20px;\n        height: 12px;\n    }\n    .').concat(uuid2, '.place-top::after {\n        content: "";\n        position: absolute;\n        width: 10px;\n        height: 10px;\n        border-top-right-radius: ').concat(arrowRadius, "px;\n        border: 1px solid ").concat(borderColor, ";\n        background-color: ").concat(arrowColor, ";\n        z-index: -2;\n        bottom: -6px;\n        left: 50%;\n        margin-left: -6px;\n        transform: rotate(135deg);\n    }\n\n    .").concat(uuid2, ".place-bottom {\n        margin-top: 10px;\n    }\n    .").concat(uuid2, '.place-bottom::before {\n        content: "";\n        background-color: inherit;\n        position: absolute;\n        z-index: -1;\n        width: 18px;\n        height: 10px;\n    }\n    .').concat(uuid2, '.place-bottom::after {\n        content: "";\n        position: absolute;\n        width: 10px;\n        height: 10px;\n        border-top-right-radius: ').concat(arrowRadius, "px;\n        border: 1px solid ").concat(borderColor, ";\n        background-color: ").concat(arrowColor, ";\n        z-index: -2;\n        top: -6px;\n        left: 50%;\n        margin-left: -6px;\n        transform: rotate(45deg);\n    }\n\n    .").concat(uuid2, ".place-left {\n        margin-left: -10px;\n    }\n    .").concat(uuid2, '.place-left::before {\n        content: "";\n        background-color: inherit;\n        position: absolute;\n        z-index: -1;\n        width: 10px;\n        height: 18px;\n    }\n    .').concat(uuid2, '.place-left::after {\n        content: "";\n        position: absolute;\n        width: 10px;\n        height: 10px;\n        border-top-right-radius: ').concat(arrowRadius, "px;\n        border: 1px solid ").concat(borderColor, ";\n        background-color: ").concat(arrowColor, ";\n        z-index: -2;\n        right: -6px;\n        top: 50%;\n        margin-top: -6px;\n        transform: rotate(45deg);\n    }\n\n    .").concat(uuid2, ".place-right {\n        margin-left: 10px;\n    }\n    .").concat(uuid2, '.place-right::before {\n        content: "";\n        background-color: inherit;\n        position: absolute;\n        z-index: -1;\n        width: 10px;\n        height: 18px;\n    }\n    .').concat(uuid2, '.place-right::after {\n        content: "";\n        position: absolute;\n        width: 10px;\n        height: 10px;\n        border-top-right-radius: ').concat(arrowRadius, "px;\n        border: 1px solid ").concat(borderColor, ";\n        background-color: ").concat(arrowColor, ";\n        z-index: -2;\n        left: -6px;\n        top: 50%;\n        margin-top: -6px;\n        transform: rotate(-135deg);\n    }\n  ");
  }
  function getPopupColors(customColors, type, hasBorder) {
    var textColor = customColors.text;
    var backgroundColor = customColors.background;
    var borderColor = customColors.border;
    var arrowColor = customColors.arrow ? customColors.arrow : customColors.background;
    var colors2 = getDefaultPopupColors(type);
    if (textColor) {
      colors2.text = textColor;
    }
    if (backgroundColor) {
      colors2.background = backgroundColor;
    }
    if (hasBorder) {
      if (borderColor) {
        colors2.border = borderColor;
      } else {
        colors2.border = type === "light" ? "black" : "white";
      }
    }
    if (arrowColor) {
      colors2.arrow = arrowColor;
    }
    return colors2;
  }
  var _class;
  var _class2;
  var ReactTooltip = staticMethods(_class = windowListener(_class = customEvent(_class = isCapture(_class = getEffect(_class = bodyMode(_class = trackRemoval(_class = (_class2 = /* @__PURE__ */ function(_React$Component) {
    _inherits(ReactTooltip2, _React$Component);
    var _super = _createSuper(ReactTooltip2);
    function ReactTooltip2(props) {
      var _this;
      _classCallCheck(this, ReactTooltip2);
      _this = _super.call(this, props);
      _this.state = {
        uuid: props.uuid || generateUUID(),
        place: props.place || "top",
        // Direction of tooltip
        desiredPlace: props.place || "top",
        type: props.type || "dark",
        // Color theme of tooltip
        effect: props.effect || "float",
        // float or fixed
        show: false,
        border: false,
        borderClass: "border",
        customColors: {},
        customRadius: {},
        offset: {},
        padding: props.padding,
        extraClass: "",
        html: false,
        delayHide: 0,
        delayShow: 0,
        event: props.event || null,
        eventOff: props.eventOff || null,
        currentEvent: null,
        // Current mouse event
        currentTarget: null,
        // Current target of mouse event
        ariaProps: parseAria(props),
        // aria- and role attributes
        isEmptyTip: false,
        disable: false,
        possibleCustomEvents: props.possibleCustomEvents || "",
        possibleCustomEventsOff: props.possibleCustomEventsOff || "",
        originTooltip: null,
        isMultiline: false
      };
      _this.bind(["showTooltip", "updateTooltip", "hideTooltip", "hideTooltipOnScroll", "getTooltipContent", "globalRebuild", "globalShow", "globalHide", "onWindowResize", "mouseOnToolTip"]);
      _this.mount = true;
      _this.delayShowLoop = null;
      _this.delayHideLoop = null;
      _this.delayReshow = null;
      _this.intervalUpdateContent = null;
      return _this;
    }
    _createClass(ReactTooltip2, [{
      key: "bind",
      value: function bind3(methodArray) {
        var _this2 = this;
        methodArray.forEach(function(method) {
          _this2[method] = _this2[method].bind(_this2);
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props;
        _this$props.insecure;
        var resizeHide = _this$props.resizeHide, disableInternalStyle = _this$props.disableInternalStyle;
        this.mount = true;
        this.bindListener();
        this.bindWindowEvents(resizeHide);
        if (!disableInternalStyle) {
          this.injectStyles();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mount = false;
        this.clearTimer();
        this.unbindListener();
        this.removeScrollListener(this.state.currentTarget);
        this.unbindWindowEvents();
      }
      /* Look for the closest DOM root having tooltip and inject styles. */
    }, {
      key: "injectStyles",
      value: function injectStyles() {
        var tooltipRef = this.tooltipRef;
        if (!tooltipRef) {
          return;
        }
        var parentNode = tooltipRef.parentNode;
        while (parentNode.parentNode) {
          parentNode = parentNode.parentNode;
        }
        var domRoot;
        switch (parentNode.constructor.name) {
          case "Document":
          case "HTMLDocument":
          case void 0:
            domRoot = parentNode.head;
            break;
          case "ShadowRoot":
          default:
            domRoot = parentNode;
            break;
        }
        if (!domRoot.querySelector("style[data-react-tooltip]")) {
          var style = document.createElement("style");
          style.textContent = baseCss;
          style.setAttribute("data-react-tooltip", "true");
          domRoot.appendChild(style);
        }
      }
      /**
       * Return if the mouse is on the tooltip.
       * @returns {boolean} true - mouse is on the tooltip
       */
    }, {
      key: "mouseOnToolTip",
      value: function mouseOnToolTip() {
        var show = this.state.show;
        if (show && this.tooltipRef) {
          if (!this.tooltipRef.matches) {
            if (this.tooltipRef.msMatchesSelector) {
              this.tooltipRef.matches = this.tooltipRef.msMatchesSelector;
            } else {
              this.tooltipRef.matches = this.tooltipRef.mozMatchesSelector;
            }
          }
          return this.tooltipRef.matches(":hover");
        }
        return false;
      }
      /**
       * Pick out corresponded target elements
       */
    }, {
      key: "getTargetArray",
      value: function getTargetArray(id2) {
        var targetArray = [];
        var selector;
        if (!id2) {
          selector = "[data-tip]:not([data-for])";
        } else {
          var escaped = id2.replace(/\\/g, "\\\\").replace(/"/g, '\\"');
          selector = '[data-tip][data-for="'.concat(escaped, '"]');
        }
        nodeListToArray(document.getElementsByTagName("*")).filter(function(element) {
          return element.shadowRoot;
        }).forEach(function(element) {
          targetArray = targetArray.concat(nodeListToArray(element.shadowRoot.querySelectorAll(selector)));
        });
        return targetArray.concat(nodeListToArray(document.querySelectorAll(selector)));
      }
      /**
       * Bind listener to the target elements
       * These listeners used to trigger showing or hiding the tooltip
       */
    }, {
      key: "bindListener",
      value: function bindListener() {
        var _this3 = this;
        var _this$props2 = this.props, id2 = _this$props2.id, globalEventOff = _this$props2.globalEventOff, isCapture2 = _this$props2.isCapture;
        var targetArray = this.getTargetArray(id2);
        targetArray.forEach(function(target) {
          if (target.getAttribute("currentItem") === null) {
            target.setAttribute("currentItem", "false");
          }
          _this3.unbindBasicListener(target);
          if (_this3.isCustomEvent(target)) {
            _this3.customUnbindListener(target);
          }
        });
        if (this.isBodyMode()) {
          this.bindBodyListener(targetArray);
        } else {
          targetArray.forEach(function(target) {
            var isCaptureMode = _this3.isCapture(target);
            var effect3 = _this3.getEffect(target);
            if (_this3.isCustomEvent(target)) {
              _this3.customBindListener(target);
              return;
            }
            target.addEventListener("mouseenter", _this3.showTooltip, isCaptureMode);
            target.addEventListener("focus", _this3.showTooltip, isCaptureMode);
            if (effect3 === "float") {
              target.addEventListener("mousemove", _this3.updateTooltip, isCaptureMode);
            }
            target.addEventListener("mouseleave", _this3.hideTooltip, isCaptureMode);
            target.addEventListener("blur", _this3.hideTooltip, isCaptureMode);
          });
        }
        if (globalEventOff) {
          window.removeEventListener(globalEventOff, this.hideTooltip);
          window.addEventListener(globalEventOff, this.hideTooltip, isCapture2);
        }
        this.bindRemovalTracker();
      }
      /**
       * Unbind listeners on target elements
       */
    }, {
      key: "unbindListener",
      value: function unbindListener() {
        var _this4 = this;
        var _this$props3 = this.props, id2 = _this$props3.id, globalEventOff = _this$props3.globalEventOff;
        if (this.isBodyMode()) {
          this.unbindBodyListener();
        } else {
          var targetArray = this.getTargetArray(id2);
          targetArray.forEach(function(target) {
            _this4.unbindBasicListener(target);
            if (_this4.isCustomEvent(target)) _this4.customUnbindListener(target);
          });
        }
        if (globalEventOff) window.removeEventListener(globalEventOff, this.hideTooltip);
        this.unbindRemovalTracker();
      }
      /**
       * Invoke this before bind listener and unmount the component
       * it is necessary to invoke this even when binding custom event
       * so that the tooltip can switch between custom and default listener
       */
    }, {
      key: "unbindBasicListener",
      value: function unbindBasicListener(target) {
        var isCaptureMode = this.isCapture(target);
        target.removeEventListener("mouseenter", this.showTooltip, isCaptureMode);
        target.removeEventListener("mousemove", this.updateTooltip, isCaptureMode);
        target.removeEventListener("mouseleave", this.hideTooltip, isCaptureMode);
      }
    }, {
      key: "getTooltipContent",
      value: function getTooltipContent() {
        var _this$props4 = this.props, getContent = _this$props4.getContent, children = _this$props4.children;
        var content;
        if (getContent) {
          if (Array.isArray(getContent)) {
            content = getContent[0] && getContent[0](this.state.originTooltip);
          } else {
            content = getContent(this.state.originTooltip);
          }
        }
        return TipContent(this.state.originTooltip, children, content, this.state.isMultiline);
      }
    }, {
      key: "isEmptyTip",
      value: function isEmptyTip(placeholder) {
        return typeof placeholder === "string" && placeholder === "" || placeholder === null;
      }
      /**
       * When mouse enter, show the tooltip
       */
    }, {
      key: "showTooltip",
      value: function showTooltip(e2, isGlobalCall) {
        if (!this.tooltipRef) {
          return;
        }
        if (isGlobalCall) {
          var targetArray = this.getTargetArray(this.props.id);
          var isMyElement = targetArray.some(function(ele) {
            return ele === e2.currentTarget;
          });
          if (!isMyElement) return;
        }
        var _this$props5 = this.props, multiline = _this$props5.multiline, getContent = _this$props5.getContent;
        var originTooltip = e2.currentTarget.getAttribute("data-tip");
        var isMultiline = e2.currentTarget.getAttribute("data-multiline") || multiline || false;
        var switchToSolid = e2 instanceof window.FocusEvent || isGlobalCall;
        var scrollHide = true;
        if (e2.currentTarget.getAttribute("data-scroll-hide")) {
          scrollHide = e2.currentTarget.getAttribute("data-scroll-hide") === "true";
        } else if (this.props.scrollHide != null) {
          scrollHide = this.props.scrollHide;
        }
        if (e2 && e2.currentTarget && e2.currentTarget.setAttribute) {
          e2.currentTarget.setAttribute("aria-describedby", this.props.id || this.state.uuid);
        }
        var desiredPlace = e2.currentTarget.getAttribute("data-place") || this.props.place || "top";
        var effect3 = switchToSolid && "solid" || this.getEffect(e2.currentTarget);
        var offset = e2.currentTarget.getAttribute("data-offset") || this.props.offset || {};
        var result = getPosition(e2, e2.currentTarget, this.tooltipRef, desiredPlace.split(",")[0], desiredPlace, effect3, offset);
        if (result.position && this.props.overridePosition) {
          result.position = this.props.overridePosition(result.position, e2, e2.currentTarget, this.tooltipRef, desiredPlace, desiredPlace, effect3, offset);
        }
        var place = result.isNewState ? result.newState.place : desiredPlace.split(",")[0];
        this.clearTimer();
        var target = e2.currentTarget;
        var reshowDelay = this.state.show ? target.getAttribute("data-delay-update") || this.props.delayUpdate : 0;
        var self2 = this;
        var updateState = function updateState2() {
          self2.setState({
            originTooltip,
            isMultiline,
            desiredPlace,
            place,
            type: target.getAttribute("data-type") || self2.props.type || "dark",
            customColors: {
              text: target.getAttribute("data-text-color") || self2.props.textColor || null,
              background: target.getAttribute("data-background-color") || self2.props.backgroundColor || null,
              border: target.getAttribute("data-border-color") || self2.props.borderColor || null,
              arrow: target.getAttribute("data-arrow-color") || self2.props.arrowColor || null
            },
            customRadius: {
              tooltip: target.getAttribute("data-tooltip-radius") || self2.props.tooltipRadius || "3",
              arrow: target.getAttribute("data-arrow-radius") || self2.props.arrowRadius || "0"
            },
            effect: effect3,
            offset,
            padding: target.getAttribute("data-padding") || self2.props.padding,
            html: (target.getAttribute("data-html") ? target.getAttribute("data-html") === "true" : self2.props.html) || false,
            delayShow: target.getAttribute("data-delay-show") || self2.props.delayShow || 0,
            delayHide: target.getAttribute("data-delay-hide") || self2.props.delayHide || 0,
            delayUpdate: target.getAttribute("data-delay-update") || self2.props.delayUpdate || 0,
            border: (target.getAttribute("data-border") ? target.getAttribute("data-border") === "true" : self2.props.border) || false,
            borderClass: target.getAttribute("data-border-class") || self2.props.borderClass || "border",
            extraClass: target.getAttribute("data-class") || self2.props["class"] || self2.props.className || "",
            disable: (target.getAttribute("data-tip-disable") ? target.getAttribute("data-tip-disable") === "true" : self2.props.disable) || false,
            currentTarget: target
          }, function() {
            if (scrollHide) {
              self2.addScrollListener(self2.state.currentTarget);
            }
            self2.updateTooltip(e2);
            if (getContent && Array.isArray(getContent)) {
              self2.intervalUpdateContent = setInterval(function() {
                if (self2.mount) {
                  var _getContent = self2.props.getContent;
                  var placeholder = TipContent(originTooltip, "", _getContent[0](), isMultiline);
                  var isEmptyTip = self2.isEmptyTip(placeholder);
                  self2.setState({
                    isEmptyTip
                  });
                  self2.updatePosition();
                }
              }, getContent[1]);
            }
          });
        };
        if (reshowDelay) {
          this.delayReshow = setTimeout(updateState, reshowDelay);
        } else {
          updateState();
        }
      }
      /**
       * When mouse hover, update tool tip
       */
    }, {
      key: "updateTooltip",
      value: function updateTooltip(e2) {
        var _this5 = this;
        var _this$state = this.state, delayShow = _this$state.delayShow, disable = _this$state.disable;
        var _this$props6 = this.props, afterShow = _this$props6.afterShow, disableProp = _this$props6.disable;
        var placeholder = this.getTooltipContent();
        var eventTarget = e2.currentTarget || e2.target;
        if (this.mouseOnToolTip()) {
          return;
        }
        if (this.isEmptyTip(placeholder) || disable || disableProp) {
          return;
        }
        var delayTime = !this.state.show ? parseInt(delayShow, 10) : 0;
        var updateState = function updateState2() {
          if (Array.isArray(placeholder) && placeholder.length > 0 || placeholder) {
            var isInvisible = !_this5.state.show;
            _this5.setState({
              currentEvent: e2,
              currentTarget: eventTarget,
              show: true
            }, function() {
              _this5.updatePosition(function() {
                if (isInvisible && afterShow) {
                  afterShow(e2);
                }
              });
            });
          }
        };
        if (this.delayShowLoop) {
          clearTimeout(this.delayShowLoop);
        }
        if (delayTime) {
          this.delayShowLoop = setTimeout(updateState, delayTime);
        } else {
          this.delayShowLoop = null;
          updateState();
        }
      }
      /*
       * If we're mousing over the tooltip remove it when we leave.
       */
    }, {
      key: "listenForTooltipExit",
      value: function listenForTooltipExit() {
        var show = this.state.show;
        if (show && this.tooltipRef) {
          this.tooltipRef.addEventListener("mouseleave", this.hideTooltip);
        }
      }
    }, {
      key: "removeListenerForTooltipExit",
      value: function removeListenerForTooltipExit() {
        var show = this.state.show;
        if (show && this.tooltipRef) {
          this.tooltipRef.removeEventListener("mouseleave", this.hideTooltip);
        }
      }
      /**
       * When mouse leave, hide tooltip
       */
    }, {
      key: "hideTooltip",
      value: function hideTooltip(e2, hasTarget) {
        var _this6 = this;
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
          isScroll: false
        };
        var disable = this.state.disable;
        var isScroll = options.isScroll;
        var delayHide = isScroll ? 0 : this.state.delayHide;
        var _this$props7 = this.props, afterHide = _this$props7.afterHide, disableProp = _this$props7.disable;
        var placeholder = this.getTooltipContent();
        if (!this.mount) return;
        if (this.isEmptyTip(placeholder) || disable || disableProp) return;
        if (hasTarget) {
          var targetArray = this.getTargetArray(this.props.id);
          var isMyElement = targetArray.some(function(ele) {
            return ele === e2.currentTarget;
          });
          if (!isMyElement || !this.state.show) return;
        }
        if (e2 && e2.currentTarget && e2.currentTarget.removeAttribute) {
          e2.currentTarget.removeAttribute("aria-describedby");
        }
        var resetState = function resetState2() {
          var isVisible = _this6.state.show;
          if (_this6.mouseOnToolTip()) {
            _this6.listenForTooltipExit();
            return;
          }
          _this6.removeListenerForTooltipExit();
          _this6.setState({
            show: false
          }, function() {
            _this6.removeScrollListener(_this6.state.currentTarget);
            if (isVisible && afterHide) {
              afterHide(e2);
            }
          });
        };
        this.clearTimer();
        if (delayHide) {
          this.delayHideLoop = setTimeout(resetState, parseInt(delayHide, 10));
        } else {
          resetState();
        }
      }
      /**
       * When scroll, hide tooltip
       */
    }, {
      key: "hideTooltipOnScroll",
      value: function hideTooltipOnScroll(event, hasTarget) {
        this.hideTooltip(event, hasTarget, {
          isScroll: true
        });
      }
      /**
       * Add scroll event listener when tooltip show
       * automatically hide the tooltip when scrolling
       */
    }, {
      key: "addScrollListener",
      value: function addScrollListener(currentTarget) {
        var isCaptureMode = this.isCapture(currentTarget);
        window.addEventListener("scroll", this.hideTooltipOnScroll, isCaptureMode);
      }
    }, {
      key: "removeScrollListener",
      value: function removeScrollListener(currentTarget) {
        var isCaptureMode = this.isCapture(currentTarget);
        window.removeEventListener("scroll", this.hideTooltipOnScroll, isCaptureMode);
      }
      // Calculation the position
    }, {
      key: "updatePosition",
      value: function updatePosition(callbackAfter) {
        var _this7 = this;
        var _this$state2 = this.state, currentEvent = _this$state2.currentEvent, currentTarget = _this$state2.currentTarget, place = _this$state2.place, desiredPlace = _this$state2.desiredPlace, effect3 = _this$state2.effect, offset = _this$state2.offset;
        var node = this.tooltipRef;
        var result = getPosition(currentEvent, currentTarget, node, place, desiredPlace, effect3, offset);
        if (result.position && this.props.overridePosition) {
          result.position = this.props.overridePosition(result.position, currentEvent, currentTarget, node, place, desiredPlace, effect3, offset);
        }
        if (result.isNewState) {
          return this.setState(result.newState, function() {
            _this7.updatePosition(callbackAfter);
          });
        }
        if (callbackAfter && typeof callbackAfter === "function") {
          callbackAfter();
        }
        node.style.left = result.position.left + "px";
        node.style.top = result.position.top + "px";
      }
      /**
       * CLear all kinds of timeout of interval
       */
    }, {
      key: "clearTimer",
      value: function clearTimer() {
        if (this.delayShowLoop) {
          clearTimeout(this.delayShowLoop);
          this.delayShowLoop = null;
        }
        if (this.delayHideLoop) {
          clearTimeout(this.delayHideLoop);
          this.delayHideLoop = null;
        }
        if (this.delayReshow) {
          clearTimeout(this.delayReshow);
          this.delayReshow = null;
        }
        if (this.intervalUpdateContent) {
          clearInterval(this.intervalUpdateContent);
          this.intervalUpdateContent = null;
        }
      }
    }, {
      key: "hasCustomColors",
      value: function hasCustomColors() {
        var _this8 = this;
        return Boolean(Object.keys(this.state.customColors).find(function(color) {
          return color !== "border" && _this8.state.customColors[color];
        }) || this.state.border && this.state.customColors["border"]);
      }
    }, {
      key: "render",
      value: function render2() {
        var _this9 = this;
        var _this$state3 = this.state, extraClass = _this$state3.extraClass, html2 = _this$state3.html, ariaProps = _this$state3.ariaProps, disable = _this$state3.disable, uuid2 = _this$state3.uuid;
        var content = this.getTooltipContent();
        var isEmptyTip = this.isEmptyTip(content);
        var style = this.props.disableInternalStyle ? "" : generateTooltipStyle(this.state.uuid, this.state.customColors, this.state.type, this.state.border, this.state.padding, this.state.customRadius);
        var tooltipClass = "__react_component_tooltip" + " ".concat(this.state.uuid) + (this.state.show && !disable && !isEmptyTip ? " show" : "") + (this.state.border ? " " + this.state.borderClass : "") + " place-".concat(this.state.place) + // top, bottom, left, right
        " type-".concat(this.hasCustomColors() ? "custom" : this.state.type) + // dark, success, warning, error, info, light, custom
        (this.props.delayUpdate ? " allow_hover" : "") + (this.props.clickable ? " allow_click" : "");
        var Wrapper = this.props.wrapper;
        if (ReactTooltip2.supportedWrappers.indexOf(Wrapper) < 0) {
          Wrapper = ReactTooltip2.defaultProps.wrapper;
        }
        var wrapperClassName = [tooltipClass, extraClass].filter(Boolean).join(" ");
        if (html2) {
          var htmlContent = "".concat(content).concat(style ? '\n<style aria-hidden="true">'.concat(style, "</style>") : "");
          return /* @__PURE__ */ import_react191.default.createElement(Wrapper, _extends2({
            className: "".concat(wrapperClassName),
            id: this.props.id || uuid2,
            ref: function ref(_ref) {
              return _this9.tooltipRef = _ref;
            }
          }, ariaProps, {
            "data-id": "tooltip",
            dangerouslySetInnerHTML: {
              __html: htmlContent
            }
          }));
        } else {
          return /* @__PURE__ */ import_react191.default.createElement(Wrapper, _extends2({
            className: "".concat(wrapperClassName),
            id: this.props.id || uuid2
          }, ariaProps, {
            ref: function ref(_ref2) {
              return _this9.tooltipRef = _ref2;
            },
            "data-id": "tooltip"
          }), style && /* @__PURE__ */ import_react191.default.createElement("style", {
            dangerouslySetInnerHTML: {
              __html: style
            },
            "aria-hidden": "true"
          }), content);
        }
      }
    }], [{
      key: "propTypes",
      get: function get3() {
        return {
          uuid: import_prop_types.default.string,
          children: import_prop_types.default.any,
          place: import_prop_types.default.string,
          type: import_prop_types.default.string,
          effect: import_prop_types.default.string,
          offset: import_prop_types.default.object,
          padding: import_prop_types.default.string,
          multiline: import_prop_types.default.bool,
          border: import_prop_types.default.bool,
          borderClass: import_prop_types.default.string,
          textColor: import_prop_types.default.string,
          backgroundColor: import_prop_types.default.string,
          borderColor: import_prop_types.default.string,
          arrowColor: import_prop_types.default.string,
          arrowRadius: import_prop_types.default.string,
          tooltipRadius: import_prop_types.default.string,
          insecure: import_prop_types.default.bool,
          "class": import_prop_types.default.string,
          className: import_prop_types.default.string,
          id: import_prop_types.default.string,
          html: import_prop_types.default.bool,
          delayHide: import_prop_types.default.number,
          delayUpdate: import_prop_types.default.number,
          delayShow: import_prop_types.default.number,
          event: import_prop_types.default.string,
          eventOff: import_prop_types.default.string,
          isCapture: import_prop_types.default.bool,
          globalEventOff: import_prop_types.default.string,
          getContent: import_prop_types.default.any,
          afterShow: import_prop_types.default.func,
          afterHide: import_prop_types.default.func,
          overridePosition: import_prop_types.default.func,
          disable: import_prop_types.default.bool,
          scrollHide: import_prop_types.default.bool,
          resizeHide: import_prop_types.default.bool,
          wrapper: import_prop_types.default.string,
          bodyMode: import_prop_types.default.bool,
          possibleCustomEvents: import_prop_types.default.string,
          possibleCustomEventsOff: import_prop_types.default.string,
          clickable: import_prop_types.default.bool,
          disableInternalStyle: import_prop_types.default.bool
        };
      }
    }, {
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var ariaProps = prevState.ariaProps;
        var newAriaProps = parseAria(nextProps);
        var isChanged = Object.keys(newAriaProps).some(function(props) {
          return newAriaProps[props] !== ariaProps[props];
        });
        if (!isChanged) {
          return null;
        }
        return _objectSpread22(_objectSpread22({}, prevState), {}, {
          ariaProps: newAriaProps
        });
      }
    }]);
    return ReactTooltip2;
  }(import_react191.default.Component), _defineProperty2(_class2, "defaultProps", {
    insecure: true,
    resizeHide: true,
    wrapper: "div",
    clickable: false
  }), _defineProperty2(_class2, "supportedWrappers", ["div", "span"]), _defineProperty2(_class2, "displayName", "ReactTooltip"), _class2)) || _class) || _class) || _class) || _class) || _class) || _class) || _class;

  // node_modules/@ls1intum/apollon/lib/es6/components/assessment/assessment-dropInfo-tooltip.js
  var enhance61 = compose(localized, connect_default(null, { assess: AssessmentRepository.assess }));
  var initialState10 = Object.freeze({
    showLinkIcon: true
  });
  var AssessmentDropInfoTooltipComponent = class extends import_react192.Component {
    constructor() {
      super(...arguments);
      this.state = initialState10;
      this.toggle = () => {
        this.setState({ showLinkIcon: !this.state.showLinkIcon });
      };
      this.removeLink = () => {
        const { element, assessment } = this.props;
        this.props.assess(element.id, { ...assessment }, "MANUAL");
      };
    }
    render() {
      const { assessment, readonly } = this.props;
      const message = assessment?.dropInfo.tooltipMessage;
      return import_react192.default.createElement(
        "div",
        null,
        readonly ? import_react192.default.createElement(
          Button2,
          { color: "link", tabIndex: -1, "data-tip": true, "data-for": "tooltip" },
          import_react192.default.createElement(LinkIcon, null)
        ) : this.state.showLinkIcon ? import_react192.default.createElement(
          Button2,
          { color: "link", tabIndex: -1, "data-tip": true, "data-for": "tooltip", onClick: this.toggle },
          import_react192.default.createElement(LinkIcon, null)
        ) : import_react192.default.createElement(
          Button2,
          { color: "link", tabIndex: -1, "data-tip": true, "data-for": "tooltip", onClick: this.removeLink, onMouseLeave: this.toggle },
          import_react192.default.createElement(TrashIcon, null)
        ),
        import_react192.default.createElement(ReactTooltip, { id: "tooltip", place: "right", effect: "solid" }, this.state.showLinkIcon ? message : assessment?.dropInfo.removeMessage)
      );
    }
  };
  var AssessmentDropInfoTooltip = enhance61(AssessmentDropInfoTooltipComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/assessment/assessment-section.js
  var Flex33 = styled.div`
  display: flex;
  align-items: baseline;
  justify-content: space-between;
`;
  var Action2 = styled.span`
  margin-top: 10px;
  font-size: 12px;
`;
  var Badge = styled.div`
  color: white;
  background-color: ${(props) => props.color || "grey"};
  text-align: center;
  margin: 0.4rem auto 0 auto;
  padding: 0.25em 0.4em;
  border-radius: 0.15rem;
  font-size: 12px;
  font-weight: bold;
`;
  var enhance62 = compose(localized, connect_default((state, props) => ({
    readonly: state.editor.readonly,
    assessment: AssessmentRepository.getById(state.assessments)(props.element.id),
    diagramType: state.diagram.type
  }), {
    assess: AssessmentRepository.assess,
    delete: AssessmentRepository.delete,
    updateEndAll: UMLElementRepository.updateEndAll
  }));
  var AssessmentSectionComponent = class extends import_react193.Component {
    constructor() {
      super(...arguments);
      this.updateScore = (value) => {
        const { element, assessment } = this.props;
        const score = parseFloat(value) || 0;
        const newCorrectionStatus = {
          description: void 0,
          status: "NOT_VALIDATED"
        };
        this.props.assess(element.id, {
          ...assessment,
          correctionStatus: newCorrectionStatus,
          score
        });
      };
      this.updateFeedback = (value) => {
        const { element, assessment } = this.props;
        const feedback = value.length ? value : void 0;
        const assessmentType = assessment?.dropInfo ? "DROPPED" : "MANUAL";
        this.props.assess(element.id, { score: 0, ...assessment, feedback }, assessmentType);
      };
      this.deleteFeedback = () => {
        this.props.updateEndAll();
        this.props.delete(this.props.element.id);
      };
    }
    render() {
      const { element, assessment, readonly, diagramType } = this.props;
      return import_react193.default.createElement(
        import_react193.default.Fragment,
        null,
        import_react193.default.createElement(
          "section",
          null,
          import_react193.default.createElement(
            Header,
            null,
            this.props.translate("assessment.assessment"),
            " ",
            this.props.translate(`packages.${diagramType}.${element.type}`),
            element.name ? import_react193.default.createElement(
              import_react193.default.Fragment,
              null,
              " ",
              import_react193.default.createElement("span", { style: { display: "inline-block" } }, `"${element.name}"`)
            ) : ""
          ),
          assessment?.dropInfo ? import_react193.default.createElement(AssessmentDropInfoTooltip, { assessment, element, readonly }) : null
        ),
        import_react193.default.createElement(
          "section",
          null,
          import_react193.default.createElement(
            Flex33,
            null,
            import_react193.default.createElement(
              "span",
              { style: { marginRight: "0.5em" } },
              this.props.translate("assessment.score"),
              ":"
            ),
            readonly ? import_react193.default.createElement("span", null, assessment && assessment.score || "-") : import_react193.default.createElement(Textfield, { gutter: true, type: "number", step: 0.5, onChange: this.updateScore, value: assessment ? String(assessment.score) : "" }),
            !readonly ? import_react193.default.createElement(
              Button2,
              { color: "link", onClick: this.deleteFeedback },
              import_react193.default.createElement(TrashIcon, null)
            ) : null
          )
        ),
        import_react193.default.createElement("span", { style: { display: "inline" } }, this.props.translate("assessment.feedback")),
        assessment?.dropInfo && assessment?.dropInfo.instruction ? import_react193.default.createElement(
          "div",
          { style: { display: "inline" } },
          import_react193.default.createElement(
            Button2,
            { color: "link", tabIndex: -1, "data-tip": true, "data-for": "tooltip-feedback-hint" },
            import_react193.default.createElement(HelpIcon, null)
          ),
          import_react193.default.createElement(ReactTooltip, { id: "tooltip-feedback-hint", place: "right", effect: "solid" }, assessment.dropInfo.feedbackHint),
          assessment.dropInfo.instruction.feedback
        ) : null,
        readonly ? assessment && assessment.feedback && import_react193.default.createElement("section", null, assessment.feedback) : import_react193.default.createElement(
          "section",
          null,
          import_react193.default.createElement(Textfield, { multiline: true, placeholder: assessment?.dropInfo ? this.props.translate("assessment.additionalFeedbackPlaceholder") : this.props.translate("assessment.feedbackPlaceholder"), onChange: this.updateFeedback, enterToSubmit: false, value: assessment && assessment.feedback ? assessment.feedback : "" }),
          assessment?.label ? import_react193.default.createElement(
            Flex33,
            null,
            import_react193.default.createElement(Badge, { color: assessment?.labelColor }, assessment?.label)
          ) : null,
          element?.assessmentNote ? import_react193.default.createElement(
            Flex33,
            null,
            import_react193.default.createElement(Action2, null, element.assessmentNote)
          ) : null,
          assessment?.correctionStatus?.description ? import_react193.default.createElement(
            Flex33,
            null,
            import_react193.default.createElement("span", null, assessment.correctionStatus.description)
          ) : null
        ),
        import_react193.default.createElement(Divider2, null)
      );
    }
  };
  var AssessmentSection = enhance62(AssessmentSectionComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/assessment/assessment.js
  var getInitialState11 = ({ element, getChildren: getChildren2 }) => ({
    elements: getChildren2(element.id)
  });
  var enhance63 = connect_default(null, {
    getChildren: UMLElementRepository.getChildren,
    assessNext: (current2) => (dispatch, getState) => {
      const { elements } = getState();
      const children = dispatch(UMLElementRepository.getChildren(current2.id));
      const last2 = children.length ? children[children.length - 1] : current2;
      const index = Object.keys(elements).indexOf(last2.id) + 1;
      const next = Object.keys(elements)[index % Object.keys(elements).length];
      dispatch(UMLElementRepository.updateEnd(current2.id));
      dispatch(UMLElementRepository.deselect(current2.id));
      dispatch(UMLElementRepository.updateStart(next));
      dispatch(UMLElementRepository.select(next));
    }
  });
  var AssessmentComponent = class extends import_react194.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState11(this.props);
      this.container = (0, import_react194.createRef)();
      this.setFocus = () => {
        if (!this.container.current) {
          return;
        }
        const focusable = this.container.current.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        if (focusable) {
          focusable.focus();
        }
      };
      this.onKey = (event) => {
        if (event.key === "Enter") {
          if (event.type === "keydown") {
            event.preventDefault();
          } else {
            this.next();
          }
        }
      };
      this.next = () => {
        const { assessNext, element } = this.props;
        assessNext(element);
      };
    }
    componentDidMount() {
      this.setFocus();
    }
    componentDidUpdate(props) {
      if (props.element !== this.props.element) {
        this.setState(getInitialState11(this.props), this.setFocus);
      }
    }
    render() {
      const { elements } = this.state;
      return import_react194.default.createElement(
        "div",
        { ref: this.container, id: "modeling-assessment-container" },
        elements.map((element) => import_react194.default.createElement(AssessmentSection, { key: element.id, element })),
        import_react194.default.createElement(
          "section",
          null,
          import_react194.default.createElement(Button2, { block: true, outline: true, color: "primary", onClick: this.next, onKeyDown: this.onKey, onKeyUp: this.onKey }, "Next Assessment")
        )
      );
    }
  };
  var Assessment = enhance63(AssessmentComponent);

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/popover/popover.js
  var import_react195 = __toESM(require_react());

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/popover/popover-styles.js
  var PopoverContainer = styled.div`
  background-clip: padding-box;
  background-color: ${(props) => props.theme.color.backgroundVariant};
  border: 1px solid ${(props) => props.theme.color.primaryContrast}33;
  border-radius: 0.3em;
  box-sizing: border-box;
  display: block;
  filter: drop-shadow(0 2px 2px rgba(0, 0, 0, 0.2));
  font-family: ${(props) => props.theme.font.family}, sans-serif;
  font-size: ${(props) => props.theme.font.size}px;
  font-style: normal;
  font-weight: 400;
  left: 0;
  letter-spacing: normal;
  line-break: auto;
  line-height: 1.5;
  max-width: 276px;
  position: absolute;
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-transform: none;
  text-shadow: none;
  top: 0;
  will-change: transform;
  white-space: normal;
  word-break: normal;
  word-spacing: normal;
  word-wrap: break-word;

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }

  ${(props) => {
    let x2 = `${props.position.x}px`;
    let y2 = `${props.position.y}px`;
    const alignment = props.alignment === "start" ? 0 : props.alignment === "end" ? 100 : 50;
    switch (props.placement) {
      case "top":
        x2 += ` - ${alignment}%`;
        y2 += ` - 100% - 0.5em`;
        break;
      case "right":
        x2 += ` + 0.5em`;
        y2 += ` - ${alignment}%`;
        break;
      case "bottom":
        x2 += ` - ${alignment}%`;
        y2 += ` + 0.5em`;
        break;
      case "left":
        x2 += ` - 100% - 0.5em`;
        y2 += ` - ${alignment}%`;
        break;
    }
    return css`
      transform: translate(calc(${x2}), calc(${y2}));
    `;
  }}
`;
  var PopoverBody = styled.div`
  color: ${(props) => props.theme.font.color};
  padding: 0.5em 0.75em;

  ${(props) => props.maxHeight && css`
      max-height: ${props.maxHeight}px;
      overflow: auto;
    `}
`;
  var ArrowTop = css`
  bottom: calc((0.5em + 1px) * -1);

  &::before {
    border-top-color: ${(props) => props.theme.color.primaryContrast}33;
    border-width: 0.5em 0.5em 0;
    bottom: 0;
  }

  &::after {
    border-top-color: ${(props) => props.theme.color.gray};
    border-width: 0.5em 0.5em 0;
    bottom: 1px;
  }
`;
  var ArrowRight = css`
  height: 1em;
  left: calc((0.5em + 1px) * -1);
  width: 0.5em;

  &::before {
    border-right-color: ${(props) => props.theme.color.primaryContrast}33;
    border-width: 0.5em 0.5em 0.5em 0;
    left: 0;
  }

  &::after {
    border-right-color: ${(props) => props.theme.color.gray};
    border-width: 0.5em 0.5em 0.5em 0;
    left: 1px;
  }
`;
  var ArrowBottom = css`
  top: calc((0.5em + 1px) * -1);

  &::before {
    border-bottom-color: ${(props) => props.theme.color.primaryContrast}33;
    border-width: 0 0.5em 0.5em 0.5em;
    top: 0;
  }

  &::after {
    border-bottom-color: ${(props) => props.theme.color.gray};
    border-width: 0 0.5em 0.5em 0.5em;
    top: 1px;
  }
`;
  var ArrowLeft = css`
  height: 1em;
  right: calc((0.5em + 1px) * -1);
  width: 0.5em;

  &::before {
    border-left-color: ${(props) => props.theme.color.primaryContrast}33;
    border-width: 0.5em 0 0.5em 0.5em;
    right: 0;
  }

  &::after {
    border-left-color: ${(props) => props.theme.color.gray};
    border-width: 0.5em 0 0.5em 0.5em;
    right: 1px;
  }
`;
  var Arrow3 = styled.div`
  display: block;
  height: 0.5em;
  position: absolute;
  width: 1em;

  &::before,
  &::after {
    content: '';
    border-color: transparent;
    border-style: solid;
    display: block;
    position: absolute;
  }

  ${(props) => props.placement === "top" && ArrowTop}
  ${(props) => props.placement === "right" && ArrowRight}
  ${(props) => props.placement === "bottom" && ArrowBottom}
  ${(props) => props.placement === "left" && ArrowLeft}

  ${(props) => props.placement === "top" || props.placement === "bottom" ? props.alignment === "start" ? "left: 0.3em;" : props.alignment === "end" ? "right: 0.3em;" : "left: 50%; transform: translate(-50%, 0);" : props.alignment === "start" ? "top: 0.3em;" : props.alignment === "end" ? "bottom: 0.3em;" : "top: 50%; transform: translate(0, -50%);"}
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/popover/popover.js
  var Popover = (0, import_react195.forwardRef)(({ children, placement = "right", alignment = "center", maxHeight, ...props }, ref) => import_react195.default.createElement(
    PopoverContainer,
    { ref, placement, alignment, ...props },
    import_react195.default.createElement(Arrow3, { placement, alignment }),
    import_react195.default.createElement(PopoverBody, { maxHeight }, children)
  ));

  // node_modules/@ls1intum/apollon/lib/es6/components/update-pane/update-pane.js
  var enhance64 = compose(withCanvas, withRoot, connect_default((state) => ({
    element: state.elements[state.updating[0]],
    disabled: !state.editor.enablePopups,
    mode: state.editor.mode
  }), {
    updateEnd: UMLElementRepository.updateEnd,
    getAbsolutePosition: UMLElementRepository.getAbsolutePosition
  }));
  var initialState11 = Object.freeze({
    position: null,
    placement: void 0,
    alignment: void 0
  });
  var UnwrappedUpdatePane = class extends import_react196.Component {
    constructor() {
      super(...arguments);
      this.state = initialState11;
      this.popover = (0, import_react196.createRef)();
      this.show = () => {
        this.position(this.props);
        document.addEventListener("pointerdown", this.onPointerDown);
        const { parentElement: canvas } = this.props.canvas.layer;
        if (canvas) {
          canvas.addEventListener("scroll", this.onScroll);
        }
      };
      this.dismiss = () => {
        this.setState(initialState11);
        document.removeEventListener("pointerdown", this.onPointerDown);
        const { parentElement: canvas } = this.props.canvas.layer;
        if (canvas) {
          canvas.removeEventListener("scroll", this.onScroll);
        }
        if (this.props.element) {
          this.props.updateEnd(this.props.element.id);
        }
      };
      this.position = ({ element, canvas }) => {
        const container = canvas.layer.parentElement;
        if (element && container) {
          const absolute = this.props.getAbsolutePosition(element.id).add(canvas.origin().subtract(this.props.root.getBoundingClientRect().x, this.props.root.getBoundingClientRect().y));
          const elementCenter = absolute.add(element.bounds.width / 2, element.bounds.height / 2);
          const position = absolute;
          const canvasBounds = container.getBoundingClientRect();
          const placement = elementCenter.x < canvasBounds.width / 2 ? "right" : "left";
          const alignment = elementCenter.y < canvasBounds.height / 2 ? "start" : "end";
          if (UMLRelationship.isUMLRelationship(element)) {
            const path = new Path(element.path);
            const p = path.position(path.length / 2);
            position.x += p.x;
            position.y += p.y;
            if (alignment === "start") {
              position.y -= 15;
            }
            if (alignment === "end") {
              position.y += 15;
            }
          } else {
            if (placement === "right") {
              position.x += element.bounds.width;
            }
            if (alignment === "end") {
              position.y += element.bounds.height;
            }
          }
          this.setState({ position, alignment, placement });
        }
      };
      this.onPointerDown = (event) => {
        if (this.popover.current && event.target instanceof HTMLElement && this.popover.current.contains(event.target)) {
          return;
        }
        this.dismiss();
      };
      this.onScroll = (event) => {
        this.dismiss();
      };
    }
    componentDidUpdate(prevProps) {
      if (!prevProps.element && this.props.element) {
        setTimeout(this.show, 0);
      } else if (prevProps.element && this.props.element && prevProps.element !== this.props.element) {
        this.position(this.props);
      }
    }
    render() {
      const { element, disabled, mode } = this.props;
      const { position, alignment, placement } = this.state;
      if (!element || disabled || !position) {
        return null;
      }
      let CustomPopupComponent;
      if (mode === ApollonMode.Assessment) {
        CustomPopupComponent = Assessment;
      } else {
        CustomPopupComponent = Popups[element.type];
      }
      if (!CustomPopupComponent) {
        return null;
      }
      return (0, import_react_dom12.createPortal)(import_react196.default.createElement(
        Popover,
        { ref: this.popover, position, placement, alignment, maxHeight: 500 },
        import_react196.default.createElement(CustomPopupComponent, { element })
      ), this.props.root);
    }
  };
  var UpdatePane = enhance64(UnwrappedUpdatePane);

  // node_modules/@ls1intum/apollon/lib/es6/scenes/svg-styles.js
  var Style = css((props) => `
  text {
    fill: ${props.theme.font.color};
    font-family: ${props.theme.font.family};
    font-size: ${props.theme.font.size}px;
  }

  marker, text {
    fill-opacity: 1;
  }

  * {
    overflow: visible;
  }
`);

  // node_modules/@ls1intum/apollon/lib/es6/scenes/application-styles.js
  var Layout = styled.div`
  display: flex;
  width: 100%;
  height: 100%;
  min-width: inherit;
  min-height: inherit;
  max-width: inherit;
  max-height: inherit;
  box-sizing: border-box;
  user-select: none;
  position: relative;
  touch-action: none;

  font-family: ${({ theme }) => theme.font.family}, sans-serif;
  font-size: ${({ theme }) => theme.font.size}px;
  color: ${({ theme }) => theme.font.color};
  font-weight: 400;
  line-height: 1.5;
  text-size-adjust: 100%;
  -webkit-tap-highlight-color: transparent;

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }

  svg {
    ${Style}
  }
`;

  // node_modules/@ls1intum/apollon/lib/es6/components/canvas/mouse-eventlistener.js
  var import_react197 = __toESM(require_react());
  var enhance65 = compose(withCanvas, connect_default((state) => ({
    readonly: state.editor.readonly,
    mode: state.editor.mode,
    elements: state.elements,
    resizingInProgress: state.resizing.length > 0,
    connectingInProgress: state.connecting.length > 0,
    reconnectingInProgress: Object.keys(state.reconnecting).length > 0,
    hoveringInProgress: state.hovered.length > 0,
    zoomFactor: state.editor.zoomFactor
  }), {
    select: UMLElementRepository.select,
    changeSelectionBox: EditorRepository.setSelectionBoxActive
  }));
  var MouseEventListenerComponent = class extends import_react197.Component {
    constructor(props) {
      super(props);
      this.mouseDown = (event) => {
        if (this.state.selectionStarted) {
          this.setState((prevState) => {
            return {
              ...prevState,
              selectionRectangle: {
                ...prevState.selectionRectangle,
                endX: event.clientX,
                endY: event.clientY
              }
            };
          });
          return;
        }
        if (this.props.resizingInProgress || this.props.connectingInProgress || this.props.reconnectingInProgress || this.props.hoveringInProgress) {
          return;
        }
        this.props.changeSelectionBox(true);
        this.setState({
          selectionStarted: true,
          selectionRectangle: {
            x: event.clientX,
            y: event.clientY,
            width: void 0,
            height: void 0
          }
        });
      };
      this.mouseUp = () => {
        if (!this.state.selectionStarted) {
          return;
        }
        const selection = this.getElementIDsInSelectionBox();
        this.setState({
          selectionStarted: false,
          selectionRectangle: {
            x: void 0,
            y: void 0,
            width: void 0,
            height: void 0
          }
        });
        this.props.changeSelectionBox(false);
      };
      this.mouseMove = (event) => {
        if (!this.state.selectionStarted) {
          return;
        }
        const selection = this.getElementIDsInSelectionBox();
        this.props.select(selection, true);
        this.setState((prevState) => {
          return {
            selectionStarted: prevState.selectionStarted,
            selectionRectangle: {
              ...prevState.selectionRectangle,
              width: event.clientX - (prevState.selectionRectangle.x ?? 0),
              height: event.clientY - (prevState.selectionRectangle.y ?? 0)
            }
          };
        });
      };
      this.isElementInSelectionBox = (element) => {
        const canvasOrigin = this.props.canvas.origin();
        const { x: x2, y: y2, width, height } = this.state.selectionRectangle;
        if (!x2 || !y2 || !width || !height) {
          return false;
        }
        const normalizedSelectionBounds = {
          x: (x2 - canvasOrigin.x) / this.props.zoomFactor,
          y: (y2 - canvasOrigin.y) / this.props.zoomFactor,
          height: height / this.props.zoomFactor,
          width: width / this.props.zoomFactor
        };
        return areBoundsIntersecting(element.bounds, normalizedSelectionBounds);
      };
      this.getElementIDsInSelectionBox = () => {
        return Object.entries(this.props.elements).reduce((selectedIDs, [id2, element]) => {
          if (element.owner !== null) {
            return selectedIDs;
          }
          if (this.isElementInSelectionBox(element)) {
            return [...selectedIDs, id2];
          }
          return selectedIDs;
        }, []);
      };
      this.state = {
        selectionStarted: false,
        selectionRectangle: {
          x: void 0,
          y: void 0,
          width: void 0,
          height: void 0
        }
      };
    }
    componentDidMount() {
      const { layer } = this.props.canvas;
      if (!this.props.readonly && (this.props.mode === ApollonMode.Modelling || this.props.mode === ApollonMode.Exporting)) {
        layer.addEventListener("mousedown", this.mouseDown);
        layer.addEventListener("mousemove", this.mouseMove);
        layer.addEventListener("mouseup", this.mouseUp);
      }
    }
    componentWillUnmount() {
      const { layer } = this.props.canvas;
      layer.removeEventListener("mousedown", this.mouseDown);
      layer.removeEventListener("mousemove", this.mouseMove);
      layer.removeEventListener("mouseup", this.mouseUp);
    }
    render() {
      const { x: x2 = 0, y: y2 = 0, width = 0, height = 0 } = this.state.selectionRectangle;
      const theme = defaults();
      return this.state.selectionStarted && width != 0 && import_react197.default.createElement("svg", { opacity: 0.5, pointerEvents: "none", style: {
        position: "fixed",
        left: `${Math.min(x2, x2 + width)}px`,
        width: `${Math.abs(width)}px`,
        top: `${Math.min(y2, y2 + height)}px`,
        height: `${Math.abs(height)}px`,
        backgroundColor: theme.color.primary
      } });
    }
  };
  var MouseEventListener = enhance65(MouseEventListenerComponent);

  // node_modules/@ls1intum/apollon/lib/es6/scenes/application.js
  var initialState12 = Object.freeze({
    canvas: null,
    root: null
  });
  var Application = class extends import_react198.default.Component {
    constructor() {
      super(...arguments);
      this.state = initialState12;
      this.resolveInitialized = () => void 0;
      this.initializedPromise = new Promise((resolve) => {
        this.resolveInitialized = resolve;
      });
      this.setCanvas = (ref) => {
        if (ref && ref.layer.current) {
          this.setState({ canvas: { ...ref, layer: ref.layer.current } });
        }
      };
      this.setLayout = (ref) => {
        if (ref) {
          this.setState({ root: ref });
        }
      };
    }
    render() {
      const canvasContext = this.state.canvas ? { canvas: this.state.canvas } : null;
      const rootContext = this.state.root ? { root: this.state.root } : null;
      return import_react198.default.createElement(
        CanvasProvider,
        { value: canvasContext },
        import_react198.default.createElement(
          RootProvider,
          { value: rootContext },
          import_react198.default.createElement(
            StoreProvider,
            { initialState: this.props.state, patcher: this.props.patcher, ref: (ref) => {
              this.store ??= ref;
              this.resolveInitialized();
            } },
            import_react198.default.createElement(
              I18nProvider2,
              { locale: this.props.locale },
              import_react198.default.createElement(
                Theme,
                { styles: this.props.styles },
                import_react198.default.createElement(Layout, { className: "apollon-editor", ref: this.setLayout }, rootContext && import_react198.default.createElement(
                  DraggableLayer,
                  null,
                  canvasContext && import_react198.default.createElement(
                    import_react198.default.Fragment,
                    null,
                    import_react198.default.createElement(UpdatePane, null),
                    import_react198.default.createElement(Sidebar, null),
                    import_react198.default.createElement(KeyboardEventListener, null)
                  ),
                  import_react198.default.createElement(
                    Editor,
                    null,
                    import_react198.default.createElement(Canvas, { ref: this.setCanvas })
                  ),
                  canvasContext && import_react198.default.createElement(
                    import_react198.default.Fragment,
                    null,
                    import_react198.default.createElement(MouseEventListener, null)
                  )
                ))
              )
            )
          )
        )
      );
    }
    get initialized() {
      return this.initializedPromise;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/scenes/svg.js
  var import_react199 = __toESM(require_react());
  var includeChildren = (elements, ids, include) => {
    const result = /* @__PURE__ */ new Set();
    for (const id2 of ids) {
      const element = elements[id2];
      if (!element)
        continue;
      const children = new Set(UMLContainer.isUMLContainer(element) ? element.ownedElements : []);
      if (include.has(id2)) {
        result.add(id2);
        include = /* @__PURE__ */ new Set([...include, ...children]);
      }
      includeChildren(elements, children, include).forEach(result.add, result);
    }
    return result;
  };
  var excludeChildren = (elements, ids, exclude) => {
    const result = /* @__PURE__ */ new Set();
    for (const id2 of ids) {
      const element = elements[id2];
      if (!element)
        continue;
      const children = new Set(UMLContainer.isUMLContainer(element) ? element.ownedElements : []);
      if (!exclude.has(id2)) {
        result.add(id2);
      } else {
        exclude = /* @__PURE__ */ new Set([...exclude, ...children]);
      }
      excludeChildren(elements, children, exclude).forEach(result.add, result);
    }
    return result;
  };
  var getInitialState12 = ({ model, options }) => {
    const layer = {
      layer: document.createElementNS("http://www.w3.org/2000/svg", "svg"),
      origin: () => new Point()
    };
    const apollonElements = model.elements;
    const apollonRelationships = model.relationships;
    const deserialize = (apollonElement) => {
      const element = new UMLElements[apollonElement.type]();
      const apollonChildren = UMLContainer.isUMLContainer(element) ? Object.values(apollonElements).filter((child) => child.owner === apollonElement.id) : [];
      element.deserialize(apollonElement, apollonChildren);
      const children = apollonChildren.reduce((acc, val) => [...acc, ...deserialize(val)], []);
      const [root, ...updates] = element.render(layer, children, true);
      updates.map((x2) => {
        const original = apollonChildren.find((y2) => y2.id === x2.id);
        if (!original) {
          return x2;
        }
        x2.bounds.x = original.bounds.x;
        x2.bounds.y = original.bounds.y;
        return x2;
      });
      return [root, ...updates];
    };
    const elements = Object.values(apollonElements).filter((element) => !element.owner).reduce((acc, val) => [...acc, ...deserialize(val)], []);
    const relationships = Object.values(apollonRelationships).map((apollonRelationship) => {
      const relationship = new UMLRelationships[apollonRelationship.type]();
      relationship.deserialize(apollonRelationship);
      return relationship;
    });
    const elementState = [...elements, ...relationships].reduce((acc, val) => ({ ...acc, [val.id]: val }), {});
    const roots = Object.values(elementState).filter((element) => !element.owner);
    let layout2 = new Set(Object.values(elementState).map((x2) => x2.id));
    if (options && options.include) {
      layout2 = includeChildren(elementState, new Set(roots.map((element) => element.id)), new Set(options.include));
    }
    if (options && options.exclude) {
      layout2 = excludeChildren(elementState, new Set(roots.map((element) => element.id)), new Set(options.exclude));
    }
    const keepOriginalSize = options && options.keepOriginalSize || false;
    const bounds = computeBoundingBoxForElements(Object.values(elementState).filter((element) => keepOriginalSize || layout2.has(element.id)));
    const margin = getMargin(options?.margin);
    bounds.x -= margin.left;
    bounds.y -= margin.top;
    bounds.width += margin.left + margin.right;
    bounds.height += margin.top + margin.bottom;
    const state = Object.values(elementState).filter((element) => layout2.has(element.id)).map((element) => {
      element.bounds.x -= bounds.x;
      element.bounds.y -= bounds.y;
      return element;
    });
    return {
      elements: state,
      bounds
    };
  };
  var getMargin = (margin = 15) => {
    if (typeof margin === "number") {
      return { top: margin, right: margin, bottom: margin, left: margin };
    }
    const result = { top: 0, right: 0, bottom: 0, left: 0 };
    return Object.assign(result, margin);
  };
  var Svg2 = class extends import_react199.Component {
    constructor() {
      super(...arguments);
      this.state = getInitialState12(this.props);
    }
    render() {
      const { bounds, elements } = this.state;
      const theme = update2(defaults(), this.props.styles || {});
      const state = ModelState.fromModel(this.props.model);
      const translationFactor = () => {
        let minX = 0;
        let minY = 0;
        for (const element of elements) {
          if (UMLRelationship.isUMLRelationship(element)) {
            for (const p of element.path) {
              if (p.x < minX)
                minX = p.x + element.bounds.x - 15;
              if (p.y < minY)
                minY = p.y + element.bounds.y - 15;
            }
          }
        }
        return { minX: Math.min(minX, 0), minY: Math.min(minY, 0) };
      };
      const svgElementDetails = (element, x2, y2) => {
        return {
          x: x2,
          y: y2,
          width: element.bounds.width,
          height: element.bounds.height,
          className: element.name ? element.name.replace(/[<>]/g, "") : "",
          fill: element.fillColor || theme.color.background
        };
      };
      const tfact = translationFactor();
      return import_react199.default.createElement(
        StoreProvider,
        { initialState: state },
        import_react199.default.createElement(
          Le,
          { theme },
          import_react199.default.createElement(
            "svg",
            { width: bounds.width - tfact.minX + 1, height: bounds.height - tfact.minY + 1, xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", fill: theme.color.background },
            import_react199.default.createElement(
              "defs",
              null,
              import_react199.default.createElement("style", null, Style[0]({ theme }))
            ),
            elements.map((element, index) => {
              const ElementComponent = Components[element.type];
              switch (ElementComponent) {
                case UMLClassifierComponent:
                  const members = elements.filter((member) => member.owner === element.id);
                  return import_react199.default.createElement(
                    "svg",
                    { key: element.id, ...svgElementDetails(element, element.bounds.x - tfact.minX, element.bounds.y - tfact.minY) },
                    import_react199.default.createElement(ElementComponent, { key: index, element }, members.map((memberElement, memberIndex) => {
                      const MemberElementComponent = Components[memberElement.type];
                      return import_react199.default.createElement(
                        "svg",
                        { key: memberElement.id, ...svgElementDetails(memberElement, 0, memberElement.bounds.y - element.bounds.y) },
                        import_react199.default.createElement(MemberElementComponent, { key: memberIndex, element: memberElement })
                      );
                    }))
                  );
                case UMLClassifierMemberComponent:
                  break;
                default:
                  return import_react199.default.createElement(
                    "svg",
                    { key: element.id, ...svgElementDetails(element, element.bounds.x - tfact.minX, element.bounds.y - tfact.minY) },
                    import_react199.default.createElement(ElementComponent, { key: index, element })
                  );
              }
            })
          )
        )
      );
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/utils/delay.js
  var delay2 = async (t2) => {
    return await new Promise((res) => setTimeout(res, t2));
  };

  // node_modules/@ls1intum/apollon/lib/es6/components/controls/error-boundary/ErrorBoundary.js
  var React194 = __toESM(require_react());
  var ErrorBoundary = class extends React194.Component {
    constructor(props) {
      super(props);
      this.state = { hasError: false };
    }
    componentDidCatch(error, errorInfo) {
      this.setState({ hasError: true, error });
    }
    render() {
      if (this.state.hasError && this.state.error) {
        this.props.onError(this.state.error);
        return null;
      }
      return this.props.children;
    }
  };

  // node_modules/@ls1intum/apollon/lib/es6/utils/replace-color-variables.js
  var colorVariableRegex = /var\(--apollon-[\S]+, #[0-9a-fA-F]+\)/g;
  var colorRegex = /#[0-9a-fA-F]+/;
  var replaceColorVariables = (innerHTML) => {
    const variablesToReplace = innerHTML.match(colorVariableRegex);
    const matchesAndColors = variablesToReplace?.map((match2) => {
      return {
        match: match2,
        color: match2.match(colorRegex)
      };
    });
    matchesAndColors?.forEach((element) => {
      innerHTML = innerHTML.replace(element.match, element.color ? element.color[0] : "");
    });
    return innerHTML;
  };

  // node_modules/@ls1intum/apollon/lib/es6/apollon-editor.js
  var ApollonEditor = class _ApollonEditor {
    ensureInitialized() {
      if (!this.store) {
        console.error("The application state of Apollon could not be retrieved. The editor may already be destroyed or you might need to `await apollonEditor.nextRender`.");
        throw new Error("The application state of Apollon could not be retrieved. The editor may already be destroyed or you might need to `await apollonEditor.nextRender`.");
      }
    }
    /**
     * Returns the current model of the Apollon Editor
     */
    get model() {
      this.ensureInitialized();
      return ModelState.toModel(this.store.getState());
    }
    /**
     * Sets a model as the current model of the Apollon Editor
     * @param model valid Apollon Editor Model
     */
    set model(model) {
      this.ensureInitialized();
      const state = {
        ...ModelState.fromModel(model),
        editor: { ...this.store.getState().editor }
      };
      this.recreateEditor(state);
    }
    /**
     * Sets the diagram type of the current Apollon Editor. This changes the selection of elements the user can chose from on the sidebar.
     * @param diagramType the new diagram type
     */
    set type(diagramType) {
      this.ensureInitialized();
      const state = {
        ...this.store.getState(),
        diagram: new UMLDiagram({
          type: diagramType
        }),
        elements: void 0
      };
      this.recreateEditor(state);
    }
    /**
     * Sets the current locale of the Apollon Editor.
     * @param locale supported locale
     */
    set locale(locale) {
      this.ensureInitialized();
      const state = this.store.getState();
      this.options.locale = locale;
      this.recreateEditor(state);
    }
    /**
     * renders a model as a svg and returns it. Therefore the svg is temporarily added to the dom and removed after it has been rendered.
     * @param model the apollon model to export as a svg
     * @param options options to change the export behavior (add margin, exclude element ...)
     * @param theme the theme which should be applied on the svg
     */
    static async exportModelAsSvg(model, options, theme) {
      const container = document.createElement("div");
      const root = (0, import_client.createRoot)(container);
      const element = (0, import_react200.createElement)(Svg2, { model, options, styles: theme });
      const svg = new Svg2({ model, options, styles: theme });
      root.render(element);
      await delay2(50);
      return {
        svg: replaceColorVariables(container.querySelector("svg").outerHTML),
        clip: svg.state.bounds
      };
    }
    constructor(container, options) {
      this.container = container;
      this.options = options;
      this.selection = { elements: {}, relationships: {} };
      this.assessments = [];
      this.application = null;
      this.patcher = new Patcher();
      this.selectionSubscribers = {};
      this.assessmentSubscribers = {};
      this.modelSubscribers = {};
      this.discreteModelSubscribers = {};
      this.errorSubscribers = {};
      this.componentDidMount = () => {
        this.container.setAttribute("touch-action", "none");
      };
      this.onDispatch = () => {
        if (!this.store)
          return;
        const { elements, selected, assessments } = this.store.getState();
        const selection = {
          elements: selected.filter((id2) => elements[id2].type in UMLElementType).reduce((acc, id2) => ({ ...acc, [id2]: true }), {}),
          relationships: selected.filter((id2) => elements[id2].type in UMLRelationshipType).reduce((acc, id2) => ({ ...acc, [id2]: true }), {})
        };
        if (JSON.stringify(this.selection) !== JSON.stringify(selection)) {
          Object.values(this.selectionSubscribers).forEach((subscriber) => subscriber(selection));
          this.selection = selection;
        }
        const umlAssessments = Object.keys(assessments).map((id2) => ({
          modelElementId: id2,
          elementType: elements[id2].type,
          score: assessments[id2].score,
          feedback: assessments[id2].feedback,
          dropInfo: assessments[id2].dropInfo
        }));
        if (JSON.stringify(this.assessments) !== JSON.stringify(umlAssessments)) {
          Object.values(this.assessmentSubscribers).forEach((subscriber) => subscriber(umlAssessments));
          this.assessments = umlAssessments;
        }
        this.notifyModelSubscribers();
        this.notifyDiscreteModelSubscribers();
      };
      this.notifyDiscreteModelSubscribers = () => {
        try {
          if (!this.store)
            return;
          const model = this.model;
          if (
            // At the end of each update operation there is an action that ends with END except DELETE
            // Function is called with every redux action but only notifies subscribers if the action ends with given words
            this.store.getState().lastAction.endsWith("END") || this.store.getState().lastAction.endsWith("DELETE")
          ) {
            const lastModel = ModelState.toModel(this.store.getState());
            Object.values(this.discreteModelSubscribers).forEach((subscriber) => subscriber(lastModel));
          }
        } catch (error) {
        }
      };
      this.notifyModelSubscribers = debounce(() => {
        try {
          if (!this.store)
            return;
          const model = this.model;
          const lastModel = this.currentModelState ? ModelState.toModel(this.currentModelState) : null;
          if (!lastModel && model || lastModel && JSON.stringify(model) !== JSON.stringify(lastModel)) {
            Object.values(this.modelSubscribers).forEach((subscriber) => subscriber(model));
            this.currentModelState = this.store.getState();
          } else {
            this.currentModelState = this.store.getState();
          }
        } catch (error) {
        }
      }, 50);
      let state = options.model ? ModelState.fromModel(options.model) : {};
      state = {
        ...state,
        diagram: new UMLDiagram({
          ...state.diagram,
          type: options.type
        }),
        editor: {
          ...state.editor,
          view: "Modelling",
          mode: options.mode || ApollonMode.Exporting,
          colorEnabled: options.colorEnabled || false,
          zoomFactor: options.scale || 1,
          readonly: options.readonly || false,
          enablePopups: options.enablePopups === true || options.enablePopups === void 0,
          enableCopyPasteToClipboard: options.copyPasteToClipboard === true,
          features: {
            hoverable: true,
            selectable: true,
            movable: !options.readonly,
            resizable: !options.readonly,
            connectable: !options.readonly,
            updatable: !options.readonly,
            droppable: !options.readonly,
            alternativePortVisualization: false
          }
        }
      };
      let nextRenderResolve;
      this.nextRenderPromise = new Promise((resolve) => {
        nextRenderResolve = resolve;
      });
      const element = (0, import_react200.createElement)(Application, {
        ref: async (app) => {
          if (app == null)
            return;
          this.application = app;
          await app.initialized;
          this.store.subscribe(this.onDispatch);
          nextRenderResolve();
        },
        state,
        patcher: this.patcher,
        styles: options.theme,
        locale: options.locale
      });
      const errorBoundary = (0, import_react200.createElement)(ErrorBoundary, { onError: this.onErrorOccurred.bind(this) }, element);
      this.root = (0, import_client.createRoot)(container);
      this.root.render(errorBoundary);
      try {
        this.currentModelState = this.store?.getState();
      } catch (error) {
        this.currentModelState = void 0;
      }
      this.componentDidMount();
    }
    /**
     * Destroys the Apollon Editor and unmounts it from its container
     */
    destroy() {
      this.root?.unmount();
    }
    /**
     * Selects the by their id identified UMLElements and UMLRelationships
     * @param selection contains ids of the elements and relationships which should be selected
     */
    select(selection) {
      if (!this.store)
        return;
      const dispatch = this.store.dispatch;
      dispatch(UMLElementRepository.deselect());
      dispatch(UMLElementRepository.select([
        ...Object.entries(selection.elements).filter(([, selected]) => selected).map(([id2]) => id2),
        ...Object.entries(selection.relationships).filter(([, selected]) => selected).map(([id2]) => id2)
      ]));
    }
    _getNewSubscriptionId(subscribers) {
      if (Object.keys(subscribers).length === 0)
        return 0;
      return Math.max(...Object.keys(subscribers).map((key) => parseInt(key))) + 1;
    }
    /**
     * Register callback which is executed when the selection of elements and relationships changes
     * @param callback function which is called when selection changes
     * @return returns the subscription identifier which can be used to unsubscribe
     */
    subscribeToSelectionChange(callback) {
      const id2 = this._getNewSubscriptionId(this.selectionSubscribers);
      this.selectionSubscribers[id2] = callback;
      return id2;
    }
    /**
     * Remove selection subscription, so that the corresponding callback is no longer executed when the selection of elements is changed.
     * @param subscriptionId subscription identifier
     */
    unsubscribeFromSelectionChange(subscriptionId) {
      delete this.selectionSubscribers[subscriptionId];
    }
    /**
     * Register callback which is executed when the assessment of elements and relationships are changed
     * @param callback function which is called when assessment changes
     * @return returns the subscription identifier which can be used to unsubscribe
     */
    subscribeToAssessmentChange(callback) {
      const id2 = this._getNewSubscriptionId(this.assessmentSubscribers);
      this.assessmentSubscribers[id2] = callback;
      return id2;
    }
    /**
     * Remove assessment subscription, so that the corresponding callback is no longer executed when the assessment of elements are changed.
     * @param subscriptionId subscription identifier
     */
    unsubscribeFromAssessmentChange(subscriptionId) {
      delete this.assessmentSubscribers[subscriptionId];
    }
    /**
     * Register callback which is executed when the model changes
     * @param callback function which is called when the model changes
     * @return returns the subscription identifier which can be used to unsubscribe
     */
    subscribeToModelChange(callback) {
      const id2 = this._getNewSubscriptionId(this.modelSubscribers);
      this.modelSubscribers[id2] = callback;
      return id2;
    }
    /**
     * Remove assessment subscription, so that the corresponding callback is no longer executed when the assessment of elements are changed.
     * @param subscriptionId subscription identifier
     */
    unsubscribeFromModelChange(subscriptionId) {
      delete this.modelSubscribers[subscriptionId];
    }
    /**
     * Register callback which is executed at the end of each user action and ignores the changes during a user action
     * For example: moving of an element is ignored until user releases the element
     * @param callback function which is called when the model changes
     * @return returns the subscription identifier which can be used to unsubscribe
     */
    subscribeToModelDiscreteChange(callback) {
      const id2 = this._getNewSubscriptionId(this.discreteModelSubscribers);
      this.discreteModelSubscribers[id2] = callback;
      return id2;
    }
    /**
     * Remove model change subscription, so that the corresponding callback is no longer executed when the model is changed.
     * @param subscriptionId subscription identifier
     */
    unsubscribeFromDiscreteModelChange(subscriptionId) {
      delete this.discreteModelSubscribers[subscriptionId];
    }
    /**
     * Register callback which is executed when the model changes, receiving the changes to the model
     * in [JSONPatch](http://jsonpatch.com/) format. This callback is only executed for discrete changes to the model.
     * Discrete changes are changes that should not be missed and are executed at the end of important user actions.
     * @param callback function which is called when the model changes
     * @returns the subscription identifier which can be used to unsubscribe
     */
    subscribeToModelChangePatches(callback) {
      return this.patcher.subscribeToDiscreteChanges(callback);
    }
    /**
     * Registers a callback which is executed when the model changes, receiving the changes to the model
     * in [JSONPatch](http://jsonpatch.com/) format. This callback is executed for every change to the model, including
     * discrete and continuous changes. Discrete changes are changes that should not be missed and are executed at
     * the end of important user actions. Continuous changes are changes that are executed during user actions, and is
     * ok to miss some of them. For example: moving of an element is a continuous change, while releasing the element
     * is a discrete change.
     * @param callback function which is called when the model changes
     * @returns the subscription identifier which can be used to unsubscribe using `unsubscribeFromModelChangePatches()`.
     */
    subscribeToAllModelChangePatches(callback) {
      return this.patcher.subscribe(callback);
    }
    /**
     * Registers a callback which is executed when the model changes, receiving only the continuous changes to the model.
     * Continuous changes are changes that are executed during user actions, and is ok to miss some of them. For example:
     * moving of an element is a continuous change, while releasing the element is a discrete change.
     *
     * **IMPORTANT**: If you want to keep proper track of the model, make sure that you subscribe to discrete changes
     * as well, either via `subscribeToModelChangePatches()` or `subscribeToAllModelChangePatches()`.
     *
     * @param callback function which is called when the model changes
     * @returns the subscription identifier which can be used to unsubscribe using `unsubscribeFromModelChangePatches()`.
     */
    subscribeToModelContinuousChangePatches(callback) {
      return this.patcher.subscribeToContinuousChanges(callback);
    }
    /**
     * Remove model change subscription, so that the corresponding callback is no longer executed when the model is changed.
     * @param subscriptionId subscription identifier
     */
    unsubscribeFromModelChangePatches(subscriptionId) {
      return this.patcher.unsubscribe(subscriptionId);
    }
    /**
     * Imports a patch into the current model.
     * @param patch changes to be applied to the model, in [JSONPatch](http://jsonpatch.com/) format.
     */
    importPatch(patch) {
      this.store?.dispatch(PatcherRepository.patch(patch));
    }
    /**
     * Register callback which is executed when an error occurs in the editor. Apollon will try to recreate the latest working state when an error occurs, so that it is less visible to user / less interrupting.
     * A registered callback would be called anyway, giving the full error, so that the application which uses Apollon can decide what to do next.
     * @param callback callback function which is called when an error occurs
     * @return returns the subscription identifier which can be used to unsubscribe
     */
    subscribeToApollonErrors(callback) {
      const id2 = this._getNewSubscriptionId(this.errorSubscribers);
      this.errorSubscribers[id2] = callback;
      return id2;
    }
    /**
     * Displays given elements and relationships as selected or deselected by
     * a given remote selector, identified by a name and a color.
     * @param selectorName name of the remote selector
     * @param selectorColor color of the remote selector
     * @param select ids of elements and relationships to be selected
     * @param deselect ids of elements and relationships to be deselected
     */
    remoteSelect(selectorName, selectorColor, select2, deselect) {
      this.store?.dispatch(UMLElementRepository.remoteSelectDeselect({ name: selectorName, color: selectorColor }, select2, deselect || []));
    }
    /**
     * Allows a given set of remote selectors for remotely selecting and deselecting
     * elements and relationships, removing all other selectors. This won't have an effect
     * on future remote selections.
     * @param allowedSelectors allowed remote selectors
     */
    pruneRemoteSelectors(allowedSelectors) {
      this.store?.dispatch(UMLElementRepository.pruneRemoteSelectors(allowedSelectors));
    }
    /**
     * Removes error subscription, so that the corresponding callback is no longer executed when an error occurs.
     * @param subscriptionId subscription identifier
     */
    unsubscribeToApollonErrors(subscriptionId) {
      delete this.errorSubscribers[subscriptionId];
    }
    /**
     * exports current model as svg
     * @param options options to change the export behavior (add margin, exclude element ...)
     */
    exportAsSVG(options) {
      return _ApollonEditor.exportModelAsSvg(this.model, options, this.options.theme);
    }
    /**
     * Returns current scale factor of the application
     */
    getScaleFactor() {
      return this.options.scale || 1;
    }
    recreateEditor(state) {
      this.destroy();
      let nextRenderResolve;
      this.nextRenderPromise = new Promise((resolve) => {
        nextRenderResolve = resolve;
      });
      const element = (0, import_react200.createElement)(Application, {
        ref: async (app) => {
          if (app == null)
            return;
          this.application = app;
          await app.initialized;
          this.store.subscribe(this.onDispatch);
          nextRenderResolve();
        },
        state,
        patcher: this.patcher,
        styles: this.options.theme,
        locale: this.options.locale
      });
      const errorBoundary = (0, import_react200.createElement)(ErrorBoundary, { onError: this.onErrorOccurred.bind(this) }, element);
      this.root = (0, import_client.createRoot)(this.container);
      this.root.render(errorBoundary);
      this.componentDidMount();
    }
    onErrorOccurred(error) {
      Object.values(this.errorSubscribers).forEach((subscriber) => subscriber(error));
      this.restoreEditor();
    }
    restoreEditor() {
      if (this.currentModelState) {
        const state = {
          ...this.currentModelState,
          hovered: [],
          selected: [],
          moving: [],
          resizing: [],
          connecting: [],
          reconnecting: {},
          updating: []
        };
        this.recreateEditor(state);
      }
    }
    get store() {
      return this.application?.store?.state.store;
    }
    /**
     * Returns a Promise that resolves when the current React render cycle is finished.
     * => this.store is be available and there should be no errors when trying to access some methods like this.model
     */
    get nextRender() {
      return this.nextRenderPromise;
    }
  };

  // test-apollon.js
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("apollon-container");
    const editor = new ApollonEditor(container, {
      type: "ClassDiagram",
      mode: "modeling"
    });
    editor.model = { elements: [{ id: "1", type: "Class", name: "SampleClass" }] };
    editor.on("modelChange", (model) => {
      console.log("Model updated:", model);
    });
  });
})();
/*! Bundled license information:

pepjs/dist/pep.js:
  (*!
   * PEP v0.5.1 | https://github.com/jquery/PEP
   * Copyright jQuery Foundation and other contributors | http://jquery.org/license
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

fast-json-patch/module/helpers.mjs:
  (*!
   * https://github.com/Starcounter-Jack/JSON-Patch
   * (c) 2017-2022 Joachim Wester
   * MIT licensed
   *)

fast-json-patch/module/duplex.mjs:
  (*!
   * https://github.com/Starcounter-Jack/JSON-Patch
   * (c) 2017-2021 Joachim Wester
   * MIT license
   *)
*/
